{"version":3,"file":"home-page.1211c2560161a11bdebb.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yCAAyC,IAAI;AAC9E;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC;;AAEyC;;;;;;;;;;;;;;;;AChTQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0DAAW;AACxB,oDAAoD,WAAW;AAC/D;AACA;AACA,kDAAkD,YAAY;AAC9D,0FAA0F,WAAW;AACrG;AACA;AACA,gDAAgD,cAAc,QAAQ,mBAAmB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC;;;;;;;;;;;;;;;0BC3FrB,uKAAAA,CAAA,EAAAC,CAAA,EAAAC,CAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAF,CAAA,CAAAG,QAAA,kBAAAC,CAAA,GAAAJ,CAA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E,CAAC;YAC/ED,OAAO,CAACC,GAAG,gBAAAiD,MAAA,CAAgBxB,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CAAE,CAAC;YAAC,OAAA0B,SAAA,CAAAvF,CAAA,IAC5C;cAAE6D,IAAI,EAAJA,IAAI;cAAEV,EAAE,EAAE;YAAI,CAAC;QAAA;MAAA,GAAAkC,QAAA;IAAA,CAC3B;IAAA,SAzBDF,SAASA,CAAAU,GAAA;MAAA,OAAAT,UAAA,CAAAtD,KAAA,OAAAD,SAAA;IAAA;IAAA,OAATsD,SAAS;EAAA;AA0Bb,CAAC;AAED,iEAAe7C,KAAK,E;;;;;;;;;;;;;;;;AC3FpB;AAC6B;AACe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB,IAAI,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,SAAS;AACrB;AACA;AACA,KAAK;AACL;AACA;AACA,yBAAyB,2CAAM;AAC/B;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA,2BAA2B,KAAK,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B,8BAA8B;AACzD;AACA,+BAA+B,KAAK;AACpC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,MAAM,0BAA0B,YAAY;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,MAAM,kBAAkB,4BAA4B,eAAe,sBAAsB;AACtI;AACA;AACA;AACA,oCAAoC,MAAM,kBAAkB,4BAA4B,eAAe,wBAAwB,WAAW,uBAAuB,QAAQ,6BAA6B;AACtM;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,4CAA4C,qDAAS;AACrD,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;ACnOoB;AACI;AACA;AACN;AACE;AACQ;AACP;AAChD;AACA,iBAAiB,2DAAW;AAC5B,mBAAmB,6DAAa;AAChC,mBAAmB,6DAAa;AAChC,iBAAiB,2DAAW;AAC5B,iBAAiB,yDAAW;AAC5B,qBAAqB,+DAAe;AACpC,iBAAiB,yDAAW;AAC5B;AAC0B;;;;;;;;;;;;;;;;;;AChBoB;AACR;AACA;AACtC;AACA;AACA,wBAAwB,uDAAK;AAC7B;AACA;AACA,wBAAwB,uDAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yDAAW,KAAK,yDAAW;AACzD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4BAA4B,yDAAW,KAAK,yDAAW;AACvD;AACA;AA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S,uDAAW;AACpB,SAAS,uDAAW;AACpB,SAAS,uDAAW;AACpB,SAAS,uDAAW;AACpB,SAAS,uDAAW;AACpB,SAAS,uDAAW;AACpB,SAAS,uDAAW;AACpB,SAAS,uDAAW;AACpB,SAAS,uDAAW;AACpB;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA,6BAA6B,4DAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qDAAqD,uDAAW;AAChE;AACkE;;;;;;;;;;;;;;;;;;;;;AC7G/B;AACC;AACgD;AACzB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,oEAAoB;AACjC;AACA,yBAAyB,oEAAoB;AAC7C;AACA,gBAAgB;AAChB;AACA;AACA;AACA,iBAAiB,UAAU,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,iBAAiB,UAAU,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,mDAAmD,yEAAsB;AACzE;AACA,cAAc,qDAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yEAAkB;AAC/C;AACA;AACA,sBAAsB,qDAAM,6CAA6C,IAAI,IAAI,oEAAoE,WAAW;AAChK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAM,8CAA8C,IAAI;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qDAAM,8CAA8C,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qDAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2CAAO;AACtB;AACA;AACA,KAAK;AACL;AACA,eAAe,2CAAO;AACtB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qDAAM,4CAA4C,IAAI,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2CAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,yEAAsB;AACzE;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAM;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,KAAK,UAAU,UAAU;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK,UAAU,UAAU;AAC/E;AACA;AACA;AACA,sBAAsB,qDAAM,0CAA0C,IAAI,IAAI;AAC9E;AACA,2BAA2B,EAAE,kCAAkC;AAC/D;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C,QAAQ,2CAAO;AACf;AACA;AACA;AACA,aAAa,2CAAO;AACpB;AACA;AACA;AACA,aAAa,2CAAO;AACpB;AACA;AACA;AACA,aAAa,2CAAO;AACpB;AACA;AACA;AACA,aAAa,2CAAO;AACpB;AACA;AACA;AACA,aAAa,2CAAO;AACpB;AACA;AACA;AACA,aAAa,2CAAO;AACpB;AACA,gDAAgD,yEAAsB;AACtE;AACA,aAAa,2CAAO;AACpB;AACA;AACA;AACA,cAAc,qDAAM,2CAA2C,OAAO,IAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oEAAoB;AAC9C;AACA;AACA;AACgD;;;;;;;;;;;;;;;;;AChSJ;AACR;AACpC;AACO;AACP,+BAA+B,oDAAW;AAC1C,UAAU,qDAAM,4BAA4B,oDAAW;AACvD;AACA,iCAAiC,oDAAW;AAC5C,wCAAwC,oDAAW;AACnD,iCAAiC,oDAAW;AAC5C,yCAAyC,oDAAW;AACpD,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,qCAAqC,oDAAW;AAChD,qCAAqC,oDAAW;AAChD,qCAAqC,oDAAW;AAChD,qCAAqC,oDAAW;AAChD,oCAAoC,oDAAW,qBAAqB,oDAAW;AAC/E;AACA,kBAAkB,oDAAW;AAC7B,kBAAkB,oDAAW;AAC7B;AACA,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,mCAAmC,oDAAW;AAC9C,oCAAoC,oDAAW;AAC/C,oCAAoC,oDAAW;AAC/C,oCAAoC,oDAAW;AAC/C,oCAAoC,oDAAW;AAC/C,uCAAuC,oDAAW;AAClD,uCAAuC,oDAAW;AAClD,iCAAiC,oDAAW;AAC5C,iCAAiC,oDAAW;AAC5C,wCAAwC,oDAAW;AACnD,0CAA0C,oDAAW;AACrD,gCAAgC,oDAAW;AAC3C,kCAAkC,oDAAW;AAC7C,qCAAqC,oDAAW;AAChD;;;;;;;;;;;;;;;;;;AC7CqD;AAC9C,2CAA2C,eAAe;AACjE;AACO;AACA,yEAAyE,6DAAiB;;;;;;;;;;;;;;;;;;;;;;;ACJ/C;AACR;AACJ;AACQ;AACgD;AACrB;AAClC;AACU;AACjD;AACA;AACA;AACA,sBAAsB,wDAAM,8CAA8C,QAAQ,IAAI,IAAI,MAAM,kBAAkB,eAAe,IAAI;AACrI;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,uBAAuB,oEAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAY;AACrC,sBAAsB,wDAAM,kEAAkE,OAAO,cAAc,gBAAgB,IAAI;AACvI;AACA;AACA,8CAA8C,yDAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,wCAAwC,qDAAW;AACnD;AACA;AACA,oCAAoC,uDAAa;AACjD;AACA;AACA,qDAAqD,yDAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kEAAY;AACnC,qBAAqB,oDAAoD,MAAM;AAC/E;AACA;AACA,gCAAgC,yDAAW,KAAK,yDAAW;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2CAA2C;AAC3C;AACA;AACA,kEAAkE;AAClE,qBAAqB,wDAAM;AAC3B;AACA,iBAAiB,wDAAa;AAC9B,iBAAiB,wDAAa;AAC9B,iBAAiB,wDAAa;AAC9B,iBAAiB,wDAAa;AAC9B;AACA,4BAA4B,qDAAU;AACtC,iBAAiB,wDAAa;AAC9B,4BAA4B,8CAAG;AAC/B,iBAAiB,wDAAa;AAC9B,iBAAiB,wDAAa;AAC9B,iBAAiB,wDAAa;AAC9B,4BAA4B,qDAAU;AACtC;AACA,oBAAoB,8CAAO;AAC3B,8BAA8B,wDAAM,kGAAkG,OAAO,IAAI;AACjJ;AACA,4BAA4B,8CAAG;AAC/B;AACA;AACA;AACwB;;;;;;;;;;;;;;;;ACrIc;AACtC;AACA;AACA,wBAAwB;AACxB,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,wBAAwB;AACxB,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,wBAAwB;AACxB,+CAA+C;AAC/C;AACA;AACA;AACA;AACA,MAAM,KAAK;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,aAAa,UAAU;AACvB,YAAY,iBAAiB;AAC7B,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA,yCAAyC,MAAM,cAAc,IAAI,kBAAkB,UAAU,UAAU,OAAO;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,IAAI,eAAe,MAAM,IAAI;AAC7I;AACA;AACA,gHAAgH,IAAI,eAAe,MAAM;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,gDAAgD,kBAAkB;AAClI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,SAAS,8CAAO;AAChB,iDAAiD,6CAA6C,8CAAO,yBAAyB,GAAG,QAAQ,QAAQ;AACjJ;AACA;AACA;AACA;AACA,iDAAiD,qCAAqC,QAAQ,QAAQ;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe,oBAAoB,mCAAmC,QAAQ;AAC/H;AACA,gCAAgC,sBAAsB,EAAE,sBAAsB;AAC9E;AACA;AACA;AACA;AACA,sCAAsC,OAAO,KAAK,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO,IAAI,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AC/JiC;AACX;AACG;AAC0B;AAChB;AACrB;AAC4B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kEAAY;AAC/C,gDAAgD,uBAAuB;AACvE;AACA,kBAAkB,OAAO,EAAE,YAAY,KAAK,kBAAkB,IAAI,OAAO;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,qDAAM,8CAA8C,6BAA6B,QAAQ,SAAS;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oDAAW,oBAAoB,oDAAW;AACjF;AACA;AACA;AACA,kBAAkB,OAAO,EAAE,UAAU,EAAE,YAAY,GAAG,kBAAkB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAM;AAC3B;AACA,sBAAsB,qDAAM,6CAA6C,8BAA8B,QAAQ,KAAK,cAAc,IAAI;AACtI;AACA;AACA;AACA,sBAAsB,qDAAM,2CAA2C,iDAAiD,QAAQ,QAAQ,cAAc,IAAI;AAC1J;AACA,yBAAyB,yDAAa;AACtC,kCAAkC,uDAAe;AACjD,sBAAsB,qDAAM,2CAA2C,sDAAsD,QAAQ,QAAQ,cAAc,IAAI;AAC/J;AACA,4BAA4B,wDAAY,+BAA+B,yEAAsB;AAC7F;AACA;AACA;AACA,8CAA8C,oDAAW;AACzD,+BAA+B,eAAe,EAAE,qBAAqB,EAAE,iBAAiB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAM;AAC3B;AACA,sBAAsB,qDAAM,oDAAoD,8BAA8B,QAAQ,KAAK,cAAc,IAAI;AAC7I;AACA,mDAAmD,iBAAiB,EAAE,SAAS;AAC/E,4BAA4B,qDAAM;AAClC,yDAAyD,wDAAY,6BAA6B,yEAAsB;AACxH,iCAAiC,gEAAgB;AACjD,4BAA4B,wDAAY,+BAA+B,yEAAsB;AAC7F;AACA,+BAA+B,cAAc,GAAG,EAAE,yBAAyB;AAC3E,+DAA+D,oDAAW,wBAAwB,oDAAW;AAC7G;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA,+BAA+B,gEAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAM;AAC3B;AACA,sBAAsB,qDAAM,mDAAmD,8BAA8B,QAAQ,KAAK,cAAc,IAAI;AAC5I;AACA,kDAAkD,iBAAiB,EAAE,SAAS;AAC9E,2BAA2B,qDAAM;AACjC,0DAA0D,wDAAY,gCAAgC,yEAAsB;AAC5H;AACA,4BAA4B,wDAAY,+BAA+B,yEAAsB;AAC7F;AACA,+BAA+B,cAAc,GAAG,EAAE,yBAAyB;AAC3E,+DAA+D,oDAAW,wBAAwB,oDAAW;AAC7G;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO,EAAE,YAAY,GAAG,kBAAkB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qDAAM;AAC3B;AACA,sBAAsB,qDAAM,iDAAiD,6BAA6B,QAAQ,KAAK,cAAc,IAAI;AACzI;AACA,qBAAqB,wDAAY;AACjC,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wDAAY;AACvB;AACA;AACA,mBAAmB,iBAAiB,EAAE,UAAU,EAAE,iBAAiB;AACnE,wBAAwB,wDAAY,2BAA2B,wDAAY;AAC3E,kBAAkB,qDAAM,uCAAuC,8CAA8C,eAAe,IAAI;AAChI;AACA,6BAA6B,wDAAY,yCAAyC,wDAAY;AAC9F,kBAAkB,qDAAM,uCAAuC,iDAAiD,eAAe,IAAI;AACnI;AACA,2BAA2B,kDAAU,8CAA8C,wDAAY,kCAAkC,wDAAY;AAC7I,kBAAkB,qDAAM,uCAAuC,uGAAuG,eAAe,IAAI;AACzL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qDAAM;AAC7B;AACA,sBAAsB,qDAAM,uCAAuC,qEAAqE,eAAe,OAAO,cAAc,IAAI;AAChL;AACA;AACA,kDAAkD,QAAQ,QAAQ,MAAM,WAAW,SAAS;AAC5F,yBAAyB,yDAAa;AACtC,qBAAqB,wDAAY;AACjC,sBAAsB,wDAAY;AAClC,iDAAiD,gBAAgB,QAAQ,MAAM,WAAW,iBAAiB;AAC3G;AACA,4BAA4B,wDAAY,6BAA6B,wDAAY;AACjF;AACA;AACA,mCAAmC,wDAAY,4BAA4B,wDAAY;AACvF;AACA;AACA;AACA,sBAAsB,qDAAM,uCAAuC,4CAA4C;AAC/G;AACA,4BAA4B,iBAAiB,EAAE,OAAO,EAAE,iBAAiB;AACzE;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO,EAAE,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwE;;;;;;;;;;;;;;;;;;;;AClU5B;AAC5C;AACA;AACA;AACA;AACA,mCAAmC,qDAAS;AAC5C,gCAAgC,iBAAiB,SAAS,eAAe,UAAU,yBAAyB;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE,QAAQ,WAAW,WAAW,wBAAwB,UAAU,SAAS;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM;AACvD;AACA;AACA;AACA,8CAA8C,EAAE,QAAQ,WAAW,WAAW,EAAE;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsF;;;;;;;;;;;;;;;;;;;;;ACjE5C;AACoC;AACF;AACzC;AAC5B;AACP;AACA;AACA;AACA,eAAe,qDAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,oCAAoC,KAAK,aAAa,mDAAU;AAChE,eAAe,mDAAU;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,0EAAiC;AAChD;AACA;AACA;AACA;AACA;AACA,eAAe,qFAA+B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2CAAO;AACxB,mDAAmD,IAAI;AACvD;AACA;AACA,iBAAiB,2CAAO;AACxB,wDAAwD,IAAI;AAC5D;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA,oCAAoC,WAAW;AAC/C;AACA;AACA;AACA;AACO;AACP;AACA;AACA,8CAA8C,KAAK,OAAO,mBAAmB,KAAK,OAAO;AACzF;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjF8C;AACM;AACd;AACA;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,uBAAuB;AACvB,wBAAwB;AACxB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT,oEAAoE;AACpE,6CAA6C;AAC7C,oBAAoB,iBAAiB;AACrC,sBAAsB,kDAAM;AAC5B,4BAA4B,aAAa;AACzC,2BAA2B,kDAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qDAAS;AAClD,wCAAwC,yDAAW,KAAK,yDAAW;AACnE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,kDAAM;AAChC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,yCAAyC;AACzC;AACA,KAAK;AACL,6CAA6C,qDAAS;AACtD,gCAAgC,uDAAK,4BAA4B,uDAAK;AACtE,yCAAyC;AACzC;AACA,uDAAuD,MAAM;AAC7D;AACA,KAAK;AACL,qDAAqD,qDAAS;AAC9D;AACA;AACA,cAAc,yDAAW,OAAO,yDAAW;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA,cAAc,yDAAW,QAAQ,yDAAW;AAC5C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;ACzKgB;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB,cAAc,oBAAoB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oDAAW;AACrB,UAAU,oDAAW;AACrB,UAAU,oDAAW;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kCAAkC,EAAE;AACpC,qBAAqB,cAAc;AACnC,uBAAuB,cAAc;AACrC,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,gBAAgB;AACpC;AACA,SAAS;AACT;AACA;AACA,qBAAqB,UAAU;AAC/B,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB;AACxB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AAClnB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA,oBAAoB,YAAY;AAChC;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACO;;;;;;;;;;;;;;;;AChMmE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,6BAA6B,eAAe,WAAW;AACvD;AACA;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA,yBAAyB,mBAAmB;AAC5C,oBAAoB,qBAAqB;AACzC,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA,mDAAmD;AACnD,gCAAgC,mFAAoB;AACpD,wCAAwC,uCAAuC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,4CAA4C;AACzF,6CAA6C,4CAA4C;AACzF,6CAA6C,4CAA4C;AACzF;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,oBAAoB,EAAE,IAAI,EAAE,IAAI,EAAE;AAClC,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA;AACA,uCAAuC,eAAe;AACtD;AACA;AACA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,WAAW,GAAG,IAAI,GAAG,KAAK;AAClE,sCAAsC,WAAW,GAAG,UAAU;AAC9D;AACA,8BAA8B,SAAS,OAAO,eAAe,OAAO,eAAe,GAAG,oBAAoB;AAC1G,+BAA+B,IAAI,aAAa,IAAI,GAAG,KAAK,aAAa,KAAK;AAC9E,wCAAwC,gBAAgB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,MAAM,oBAAoB,UAAU;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,6BAA6B,EAAE,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;ACrLnB,IAAIwD,YAAY,GAAG;EAEf;EACA,gBAAgB,EAAG,yBAAyB;EAC5C,aAAa,EAAG,sBAAsB;EACtC,YAAY,EAAG,sBAAsB;EACrC,aAAa,EAAG,uBAAuB;EACvC,oBAAoB,EAAG,mDAAmD;EAC1E,mBAAmB,EAAG,yCAAyC;EAC/D,mBAAmB,EAAG,gCAAgC;EACtD,iBAAiB,EAAG,sBAAsB;EAC1C,MAAM,EAAG,eAAe;EACxB,QAAQ,EAAG,gBAAgB;EAE3BC,aAAa,EAAE,SAAfA,aAAaA,CAAWC,aAAa,EAAEC,UAAU,EAAE;IAC/C,IAAMC,MAAM,GAAGJ,YAAY,CAACG,UAAU,CAAC;IACvC;IACAD,aAAa,GAAGA,aAAa,CAACG,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IACjD,IAAIH,aAAa,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIJ,aAAa,CAAC7F,MAAM,GAAG,CAAC,EAAE;MAC7D6F,aAAa,IAAI,KAAK;IAC1B,CAAC,MAAM,IAAIA,aAAa,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACxCJ,aAAa,IAAI,IAAI;IACzB;IACA,UAAAL,MAAA,CAAUK,aAAa,EAAAL,MAAA,CAAGO,MAAM;EACpC;AACJ,CAAC;AAGD,iEAAeJ,YAAY,E;;;;;;;;;;;;;;;;;;AC5BmB;AACR;AAC8B;AAC/B;AACrC;AACA;AACA,6BAA6B,uDAAK;AAClC;AACA,+DAA+D,aAAa;AAC5E;AACA;AACA;AACA,mFAAmF,gBAAgB;AACnG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gEAAoB;AACpE,4CAA4C,gEAAoB;AAChE;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,0DAA0D,gEAAoB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,yDAAW,OAAO,yDAAW;AAC3C;AACA,KAAK;AACL;AACA;AACA,6BAA6B,yDAAW,KAAK,yDAAW;AACxD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,cAAc,yDAAW,QAAQ,yDAAW;AAC5C;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,iCAAiC,uDAAW;AAC5C,iBAAiB,8CAAO;AACxB;AACA;AACA,mCAAmC,uDAAW;AAC9C;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;ACxFe;AAC+D;AAC3G,2DAA2D,uDAAW;AACtE,sEAAsE,uDAAW;AACjF,wEAAwE,uDAAW;AACnF,8BAA8B,uDAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAW;AACpC;AACA;AACA;AACA;AACA,yBAAyB,uDAAW,mCAAmC,uDAAW;AAClF,4BAA4B,uDAAW,+BAA+B,uDAAW;AACjF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uDAAW;AACzD;AACA,yDAAyD,uDAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uDAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,uDAAW;AACvB,cAAc,uDAAW;AACzB;AACA,YAAY,uDAAW;AACvB,iBAAiB,uDAAW;AAC5B,iBAAiB,uDAAW;AAC5B;AACA;AACA,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B,SAAS,iEAAqB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,uDAAW;AAChC,qBAAqB,uDAAW;AAChC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAW;AAChC;AACA;AACA,wDAAwD,uDAAW;AACnE;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAW;AAChC;AACA;AACA,uDAAuD,uDAAW;AAClE;AACA;AACA;AACA;AACA,oBAAoB,iEAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uDAAW;AACzB,sBAAsB;AACtB,uBAAuB,uDAAW;AAClC;AACA,8BAA8B;AAC9B,iCAAiC,uDAAW;AAC5C;AACA;AACA;AACA,qBAAqB,wDAAW,2CAA2C,wDAAW;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oCAAoC,UAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAW;AACzC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,MAAM;AAC3B;AACA;AACA,qBAAqB,MAAM,IAAI,KAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mEAAuB;AACzD,kCAAkC,sDAAU;AAC5C;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,uDAAW;AACjE,kEAAkE,uDAAW;AAC7E,wDAAwD,uDAAW;AACnE,mEAAmE,uDAAW;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;AC5VgD;AAC9B;AACR;AACA;AACtC;AACA,KAAK,2DAAe,UAAU,yDAAW;AACzC,KAAK,2DAAe,MAAM,yDAAW;AACrC,KAAK,2DAAe,QAAQ,yDAAW;AACvC,KAAK,2DAAe,OAAO,yDAAW;AACtC,KAAK,2DAAe,OAAO,yDAAW;AACtC;AACO;AACP;AACA,uCAAuC;AACvC;AACA;AACA,uCAAuC;AACvC;AACA;AACA,uCAAuC;AACvC;AACA;AACA,uCAAuC;AACvC,SAAS;AACT,uCAAuC;AACvC;AACA;AACA,uCAAuC;AACvC;AACA,6BAA6B,mEAAuB;AACpD,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E,8BAA8B,uDAAK;AACnC;AACA,6EAA6E,WAAW;AACxF;AACA;AACA,+DAA+D,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,gCAAgC;AAC7C;AACA;AACA,oDAAoD,WAAW;AAC/D,gCAAgC,yDAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,UAAU,yDAAW;AACrB;AACA;AACA,iCAAiC,mEAAuB;AACxD;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2FAA2F,wBAAwB;AACnH,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,QAAQ;AACzB,gBAAgB,OAAO;AACvB;AACA;AACA,gDAAgD,2BAA2B;AAC3E;AACA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C,wBAAwB,gBAAgB;AACxC;AACA;AACA;AACA;AACA,2BAA2B,uDAAK;AAChC;AACA;AACA;AACA;AACA;AACA,4DAA4D,YAAY,aAAa,gCAAgC;AACrH;AACA;AACA;AACA,gEAAgE,uBAAuB;AACvF,KAAK;AACL;AACA,cAAc,yDAAW,OAAO,yDAAW;AAC3C,KAAK;AACL;AACA,2BAA2B,yDAAW,KAAK,yDAAW;AACtD,cAAc,yDAAW,mBAAmB,yDAAW;AACvD;AACA,KAAK;AACL;AACA,cAAc,yDAAW;AACzB,KAAK;AACL;AACA,cAAc,yDAAW;AACzB,KAAK;AACL;AACA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;AC5J3B;AACA;AACA;;AAEA;AACA;AACmD;AACoB;AACvB;AACO;AACvD;AACA,oBAAoB,yDAAa;AACjC,uCAAuC,yDAAa;AACpD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0BAA0B;AACjE;AACA;AACA;AACA,4DAA4D,SAAS;AACrE;AACA;AACA;AACA;AACA,uBAAuB,4DAAc;AACrC;AACA,yCAAyC;AACzC;AACA,wBAAwB,4DAAc;AACtC,4BAA4B,4DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,GAAG,QAAQ,GAAG,mBAAmB,EAAE,UAAU;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,MAAM,UAAU,0BAA0B;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAa;AAC7C,oDAAoD,yDAAa,SAAS,eAAe,oBAAoB;AAC7G;AACA,oBAAoB,IAAI,yDAAa,SAAS;AAC9C,YAAY,yDAAa;AACzB,6EAA6E,IAAI,WAAW,yDAAa,IAAI,QAAQ,gBAAgB;AACrI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA,2BAA2B,yDAAa;AACxC,wDAAwD,yDAAa,SAAS,uBAAuB,YAAY,WAAW,EAAE;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,oEAAkB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,uDAAW;AACvE,gEAAgE,uDAAW;AAC3E;AACA,2EAA2E,EAAE,gCAAgC;AAC7G;AACA;AACA,+EAA+E,EAAE,oCAAoC;AACrH;AACA;AACA,kCAAkC,mEAAuB;AACzD,+EAA+E,OAAO;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAa;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5IO;AACP;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;ACZmD;AACnD;AACA;AACA,cAAc,4DAAc;AAC5B,cAAc,4DAAc;AAC5B;AACA,KAAK;AACL;AACA,qBAAqB,4DAAc;AACnC,KAAK;AACL;AACuB;;;;;;;;;;;;;;;;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A;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA,yDAAyD;AACzD;AACA,oCAAoC,qBAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,YAAY;AACnD,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,SAAS;AACT;AACA;AACA,oBAAoB,mBAAmB,IAAI;AAC3C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,oBAAoB,8BAA8B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAA0D;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4E;;;;;;;;;;;;;;;;AC1P3B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yDAAW,KAAK,yDAAW;AAClD;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,cAAc,yDAAW,OAAO,yDAAW;AAC3C,KAAK;AACL;AACA;AACA;AA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,EAAE,CAACC,MAAM,CAACC,GAAG,CAAC,CACzE,CAAC;AACF;AAEA,SAAS+L,mBAAmBA,CAACnM,GAAG,EAAE;EACjCH,cAAc,CAACwL,IAAI,CAClB,IAAIvL,UAAU,CAACE,GAAG,EAAE3K,iFAAY,CAACK,SAAS,CAAC0W,UAAU,EAAE,CAACjM,MAAM,CAACiK,KAAK,CAAC,CACtE,CAAC;AACF;AAEA,SAAS1N,iBAAiBA,CAACsD,GAAG,EAAE;EAC/BH,cAAc,CAACwL,IAAI,CAClB,IAAIvL,UAAU,CAACE,GAAG,EAAE3K,iFAAY,CAACK,SAAS,CAAC0W,UAAU,EAAE,CAACjM,MAAM,CAACC,GAAG,CAAC,CACpE,CAAC;AACF;AAEA,IAAI7I,SAAS,GAAG;EACf8B,uBAAuB,EAAvBA,uBAAuB;EACvBR,qBAAqB,EAArBA,qBAAqB;EACrBsT,mBAAmB,EAAnBA,mBAAmB;EACnBzP,iBAAiB,EAAjBA;AACD,CAAC;;;;;;;;;;;;;;;;ACpHyC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAI;AACnB;AACA;AACA,yCAAyC,+CAAI;AAC7C;AACA;AACA,oCAAoC,+CAAI;AACxC;AACA;AACA,0CAA0C,+CAAI;AAC9C;AACA;AACA,yCAAyC,+CAAI;AAC7C;AACA;AACA,wCAAwC,+CAAI;AAC5C;AACA;AACA,wCAAwC,+CAAI;AAC5C;AACA;AACA,4CAA4C,+CAAI;AAChD;AACA;AACA,qCAAqC,+CAAI;AACzC;AACA;AACA,kCAAkC,+CAAI;AACtC;AACA;AACA,8CAA8C,+CAAI;AAClD;AACA;AACA,gDAAgD,+CAAI;AACpD;AACA;AACA,wCAAwC,+CAAI;AAC5C;AACA;AACA,mCAAmC,+CAAI;AACvC;AACA;AACA,iCAAiC,+CAAI;AACrC;AACA;AACA,qCAAqC,+CAAI;AACzC;AACA;AACA,+CAA+C,+CAAI;AACnD;AACA;AACA,wCAAwC,+CAAI;AAC5C;AACA;AACA;AACA,YAAY,+CAAI;AAChB;AACA;AACA,+CAA+C,+CAAI;AACnD;AACA;AACA,8CAA8C,+CAAI;AAClD;AACA;AACA,0CAA0C,+CAAI;AAC9C;AACA;AACA,oCAAoC,+CAAI;AACxC;AACA;AACA,sCAAsC,+CAAI;AAC1C;AACA;AACA,oCAAoC,+CAAI;AACxC;AACA;AACA,mCAAmC,+CAAI;AACvC;AACA;AACA;AACA;AACA;AACA,sCAAsC,+CAAI;AAC1C;AACA;AACA,wCAAwC,+CAAI;AAC5C;AACA;AACA,yCAAyC,+CAAI;AAC7C;AACA;AACA,2CAA2C,+CAAI;AAC/C;AACA;AACA;AACA;AACA;AACA,2CAA2C,+CAAI;AAC/C;AACA;AACA;AACA,yCAAyC,+CAAI;AAC7C;AACA;AACA;AACA,yCAAyC,+CAAI;AAC7C;AACA;AACA;AACA,4CAA4C,+CAAI;AAChD;AACA;AACA;AACA,oCAAoC,+CAAI;AACxC;AACA;AACA;AACA,kCAAkC,+CAAI;AACtC;AACA;AACA;AACA,sCAAsC,+CAAI;AAC1C;AACA;AACA;AACA,0CAA0C,+CAAI;AAC9C;AACA;AACA;AACA,iDAAiD,+CAAI;AACrD;AACA;AACA;AACA;AACA;AACA,yCAAyC,+CAAI;AAC7C;AACA;AACA;AACA;AACA,YAAY,+CAAI;AAChB;AACA;AACA;AACA,sCAAsC,+CAAI;AAC1C;AACA;AACA;AACA,iDAAiD,+CAAI;AACrD;AACA;AACA;AACA;AACA;AACA,wDAAwD,+CAAI;AAC5D;AACA;AACA;AACA,gDAAgD,+CAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+CAAI;AAChB;AACA;AACA,yCAAyC,+CAAI;AAC7C;AACA;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AC9RmD;AACkC;AAC9D;AACI;AACE;AACC;AACN;AACgB;AACN;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAAgB;AAC9C,gCAAgC,uEAAgB;AAChD,0BAA0B,sFAAoB,UAAU,uEAAgB;AACxE;AACA;AACA,qCAAqC,uEAAgB;AACrD,0BAA0B,sFAAoB,UAAU,uEAAgB;AACxE;AACA;AACA,qCAAqC,uEAAgB;AACrD,uCAAuC,2DAAW;AAClD,wEAAwE;AACxE;AACA,8BAA8B,sFAAoB,UAAU,uEAAgB;AAC5E,8BAA8B,4EAAG;AACjC,6DAA6D;AAC7D,oCAAoC,4EAAG;AACvC,yBAAyB;AACzB;AACA;AACA;AACA,8BAA8B,sFAAoB,UAAU,uEAAgB;AAC5E;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,IAAI,kEAAY;AAChB,2BAA2B,2DAAW;AACtC;AACA,kBAAkB,sFAAoB,UAAU,uEAAgB;AAChE,kBAAkB,4EAAG,cAAc,QAAQ,4EAAG,qBAAqB;AACnE;AACA;AACA,kBAAkB,sFAAoB,UAAU,uEAAgB;AAChE,kBAAkB,4EAAG,cAAc,QAAQ,4EAAG,wCAAwC;AACtF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAY;AACpB,QAAQ,kEAAY;AACpB,QAAQ,kEAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA,QAAQ,kEA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AAC;IACpD7N,+CAAI,CAACoN,OAAO,CAAC,gBAAgB,EAAED,aAAa,CAACW,cAAc,CAAC;IAC5D9N,+CAAI,CAACoN,OAAO,CAAC,iBAAiB,EAAED,aAAa,CAACY,eAAe,CAAC;IAC9D/N,+CAAI,CAACoN,OAAO,CAAC,SAAS,EAAED,aAAa,CAACa,OAAO,CAAC;IAC9ChO,+CAAI,CAACoN,OAAO,CAAC,WAAW,EAAED,aAAa,CAACc,SAAS,CAAC;IAClDjO,+CAAI,CAACoN,OAAO,CAAC,UAAU,EAAED,aAAa,CAACe,QAAQ,CAAC;IAChDlO,+CAAI,CAACoN,OAAO,CAAC,WAAW,EAAED,aAAa,CAACgB,SAAS,CAAC;IAClDnO,+CAAI,CAACoN,OAAO,CAAC,UAAU,EAAED,aAAa,CAACiB,QAAQ,CAAC;IAChDpO,+CAAI,CAACoN,OAAO,CAAC,kBAAkB,EAAED,aAAa,CAACkB,gBAAgB,CAAC;IAChErO,+CAAI,CAACoN,OAAO,CAAC,iBAAiB,EAAED,aAAa,CAACmB,eAAe,CAAC;EAC/D;AACD,CAAC;;;;;;;;;;;;;;;;ACxVM;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;UCTA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;;;WAGA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,E;;;;;WCxEA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D,E;;;;;UENA;UACA;UACA;UACA","sources":["webpack://e7-rta-archive/./node_modules/idb/build/index.js","webpack://e7-rta-archive/./static/assets/js/apis/e7-API.ts","webpack://e7-rta-archive/./static/assets/js/apis/py-API.js","webpack://e7-rta-archive/./static/assets/js/cache-manager.ts","webpack://e7-rta-archive/./static/assets/js/content-manager.ts","webpack://e7-rta-archive/./static/assets/js/e7/artifact-manager.ts","webpack://e7-rta-archive/./static/assets/js/e7/battle-manager.ts","webpack://e7-rta-archive/./static/assets/js/e7/battle-transform.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/base-elements.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/field-extract-map.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/filter-parse-references.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/filter-parser.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/filter-utils.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/functions.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/operators.ts","webpack://e7-rta-archive/./static/assets/js/e7/filter-parsing/string-literal-parse.ts","webpack://e7-rta-archive/./static/assets/js/e7/hero-manager.ts","webpack://e7-rta-archive/./static/assets/js/e7/plots.ts","webpack://e7-rta-archive/./static/assets/js/e7/references.ts","webpack://e7-rta-archive/./static/assets/js/e7/regex.ts","webpack://e7-rta-archive/./static/assets/js/e7/saved-filters.js","webpack://e7-rta-archive/./static/assets/js/e7/season-manager.ts","webpack://e7-rta-archive/./static/assets/js/e7/stats-builder.ts","webpack://e7-rta-archive/./static/assets/js/e7/user-manager.ts","webpack://e7-rta-archive/./static/assets/js/export-import-data-tools.ts","webpack://e7-rta-archive/./static/assets/js/html-safe.ts","webpack://e7-rta-archive/./static/assets/js/lang-manager.ts","webpack://e7-rta-archive/./static/assets/js/pages/home-page/home-page-build-tables.js","webpack://e7-rta-archive/./static/assets/js/pages/home-page/home-page-context.ts","webpack://e7-rta-archive/./static/assets/js/pages/home-page/home-page-listeners.js","webpack://e7-rta-archive/./static/assets/js/pages/home-page/home-page-views.ts","webpack://e7-rta-archive/./static/assets/js/pages/home-page/home-page.ts","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/hero-info/hero-info-listeners.ts","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/hero-info/hero-info-logic.ts","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/load-data/load-data-listeners.js","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/load-data/load-data-logic.js","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/select-data/select-data-listeners.js","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/select-data/select-data-logic.js","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/stats/stats-listeners.js","webpack://e7-rta-archive/./static/assets/js/pages/home-page/page-views/home-page/stats/stats-logic.js","webpack://e7-rta-archive/./static/assets/js/pages/html-constructor/html-constructor.ts","webpack://e7-rta-archive/./static/assets/js/pages/orchestration/inter-page-manager.ts","webpack://e7-rta-archive/./static/assets/js/pages/orchestration/page-orchestration-template.ts","webpack://e7-rta-archive/./static/assets/js/pages/orchestration/page-state-manager.ts","webpack://e7-rta-archive/./static/assets/js/pages/orchestration/text-controller.js","webpack://e7-rta-archive/./static/assets/js/pages/page-utilities/doc-element-references.ts","webpack://e7-rta-archive/./static/assets/js/pages/page-utilities/nav-bar-utils.ts","webpack://e7-rta-archive/./static/assets/js/pages/page-utilities/page-state-references.ts","webpack://e7-rta-archive/./static/assets/js/pages/page-utilities/page-utils.js","webpack://e7-rta-archive/./static/assets/js/populate-content.js","webpack://e7-rta-archive/./static/assets/js/str-functions.ts","webpack://e7-rta-archive/webpack/bootstrap","webpack://e7-rta-archive/webpack/runtime/async module","webpack://e7-rta-archive/webpack/runtime/define property getters","webpack://e7-rta-archive/webpack/runtime/hasOwnProperty shorthand","webpack://e7-rta-archive/webpack/runtime/make namespace object","webpack://e7-rta-archive/webpack/before-startup","webpack://e7-rta-archive/webpack/startup","webpack://e7-rta-archive/webpack/after-startup"],"sourcesContent":["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n","import { WORLD_CODES } from \"../e7/references.ts\";\nconst HERO_URL = \"https://static.smilegatemegaport.com/gameRecord/epic7/epic7_hero.json\";\nconst ARTIFACT_URL = \"https://static.smilegatemegaport.com/gameRecord/epic7/epic7_artifact.json\";\nasync function fetchE7Data(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error: status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"Fetched data from E7 Server; keys:\", Object.keys(data));\n        return data;\n    }\n    catch (error) {\n        console.error(\"Error fetching global user data:\", error);\n        return null;\n    }\n}\nasync function fetchHeroJSON(lang = null) {\n    console.log(`Fetching hero data (lang=${lang ?? \"all\"}) from E7 Server...`);\n    let data = await fetchE7Data(HERO_URL);\n    if (!data) {\n        return null;\n    }\n    if (lang && data[lang]) {\n        data = data[lang];\n    }\n    else if (lang && !data[lang]) {\n        console.error(\"Could not find hero data for language:\", lang);\n        data = null;\n    }\n    return data;\n}\nasync function fetchArtifactJSON(lang = null) {\n    console.log(`Fetching hero data (lang=${lang ?? \"all\"}) from E7 Server...`);\n    let data = await fetchE7Data(ARTIFACT_URL);\n    let output = null;\n    if (data && lang && typeof data === \"object\" && lang in data) {\n        let record = data;\n        if (Array.isArray(record[lang])) {\n            return output = record[lang];\n        }\n    }\n    return output;\n}\nasync function fetchUserJSON(world_code) {\n    world_code = world_code.replace(\"world_\", \"\");\n    if (![...WORLD_CODES].some((code) => code.replace(\"world_\", \"\") === world_code)) {\n        console.error(`Could not find world code: ${world_code}`);\n        return null;\n    }\n    console.log(`Fetching users for world code: ${world_code} from E7 Server...`);\n    const url = `https://static.smilegatemegaport.com/gameRecord/epic7/epic7_user_world_${world_code}.json`;\n    const data = await fetchE7Data(url);\n    if (data && typeof data === \"object\" && \"users\" in data && Array.isArray(data.users)) {\n        console.log(`Got user data for world: ${world_code} ; Found ${data.users.length} users`);\n    }\n    return data;\n}\nasync function fetchInfo(uid, worldCode, lang = \"en\") {\n    const url = \"https://epic7.onstove.com/gg/gameApi/getUserInfo\";\n    const payload = new URLSearchParams({\n        nick_no: uid,\n        world_code: worldCode,\n        lang: lang,\n    });\n    try {\n        const resp = await fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n            },\n            body: payload.toString(),\n        });\n        if (!resp.ok) {\n            console.error(\"Error fetching battle list:\", resp.status, resp.statusText);\n            return null;\n        }\n        const data = await resp.json();\n        return data;\n    }\n    catch (err) {\n        console.error(\"Request failed:\", err);\n        return null;\n    }\n}\nlet E7API = {\n    fetchHeroJSON: fetchHeroJSON,\n    fetchUserJSON: fetchUserJSON,\n    fetchArtifactJSON: fetchArtifactJSON,\n    fetchInfo: fetchInfo\n};\nexport default E7API;\n","const RS_BATTLE_URL = '/api/rs_get_battle_data';\r\nconst HERO_URL = '/api/get_hero_data';\r\nconst USER_URL = '/api/get_user_data';\r\nconst SEASON_URL = '/api/get_season_details';\r\nconst ARTIFACT_JSON_URL = '/api/get_artifact_json';\r\n\r\nlet PYAPI = {\r\n\r\n    test: function(data) {\r\n        // test the fetching works properly\r\n        console.log('Got data in test:', data.rank_plot);\r\n    },\r\n\r\n    fetchFromPython: async function (url) {\r\n        let response = await fetch(url);\r\n        if (!response.ok) {\r\n            console.log(\"Retrying Fetch...\");\r\n            response = await fetch(url);\r\n        }\r\n        const data = await response.json();\r\n        return data? data : null;\r\n    },\r\n\r\n    fetchHeroData: async function () {\r\n        return await this.fetchFromPython(HERO_URL);\r\n    },\r\n\r\n    // uses the new API endpoint that utilizes Rust for fetching and processing the battles\r\n    rsFetchBattleData: async function (user) {\r\n        if (!user) {\r\n            throw new Error(\"Must pass user to fetch battles data\");\r\n        }\r\n        return await fetch(RS_BATTLE_URL, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ user: user })\r\n          })\r\n    },\r\n\r\n    fetchSeasonDetails: async function () {\r\n        const response = await fetch(SEASON_URL);\r\n        const data = await response.json();\r\n        if (data.success) {\r\n            const seasonDetails = JSON.parse(data.seasonDetails);\r\n            return { seasonDetails: seasonDetails, error: false};\r\n        } else {\r\n            return { seasonDetails: null, error: data.error};\r\n        }\r\n    },\r\n\r\n    fetchArtifactJson: async function () {\r\n        const response = await fetch(ARTIFACT_JSON_URL);\r\n        const data = await response.json();\r\n        if (data.success) {\r\n            const artifactJson = JSON.parse(data.artifactJson);\r\n            return artifactJson\r\n        } else {\r\n            return null\r\n        }\r\n    },\r\n\r\n    fetchUser: async function (userData) {\r\n        if ((!userData.name || !userData.world_code) && !userData.id) {\r\n            throw new Error(\"Must pass a user object with either user.name and user.world_code or user.id to fetch user\");\r\n        }\r\n        const response = await fetch(USER_URL, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ userData })\r\n        })\r\n        const data = await response.json();\r\n        if (!response.ok) {\r\n            throw new Error(`Flask server error: ${data.error}`);\r\n        }\r\n        if (!data.foundUser) {\r\n            if (!userData.world_code) {\r\n                return { user: null, ok: true};\r\n            }\r\n            return { user: null, ok: true};\r\n        } \r\n        const user = data.user;\r\n        console.log(\"Server communication successful; received response data for user\");\r\n        console.log(`Found user: ${JSON.stringify(user)}`);\r\n        return { user, ok: true};\r\n    },\r\n};\r\n\r\nexport default PYAPI;","// static/app.js\nimport { openDB } from 'idb';\nimport { LANGUAGES } from './e7/references';\nasync function clearStore(db, storeName) {\n    const tx = db.transaction(storeName, 'readwrite');\n    const store = tx.objectStore(storeName);\n    store.clear();\n    await tx.done;\n}\n;\nconst USER_DATA_KEYS = {\n    USER: \"current-user\",\n    BATTLES: \"battles\",\n    RAW_UPLOAD: \"raw-upload\",\n    STATS: \"stats\",\n    FILTER_STR: \"filter-str\",\n};\nconst SERVER_USER_LISTS_KEYS = {\n    GLOBAL_USERS: \"global-users\",\n    EU_USERS: \"eu-users\",\n    ASIA_USERS: \"asia-users\",\n    JPN_USERS: \"jpn-users\",\n    KOR_USERS: \"kor-users\",\n};\nconst REFERENCE_DATA_KEYS = {\n    ...SERVER_USER_LISTS_KEYS,\n    ARTIFACTS: \"artifacts\", // map of artifact codes to names\n    ARTIFACTS_LOWERCASE_NAMES_MAP: \"artifacts-lowercase-names-map\", // map of artifact lowercase names to original names\n    ARTIFACT_OBJECT_LIST: \"artifact-object-list\", // list of artifact objects with id and name fields\n    HERO_MANAGER: \"hero-manager\",\n    SEASON_DETAILS: \"season-details\",\n};\nconst Keys = {\n    ...USER_DATA_KEYS,\n    ...REFERENCE_DATA_KEYS,\n    LANG: \"lang\",\n    AUTO_ZOOM_FLAG: \"auto-zoom\",\n    AUTO_QUERY_FLAG: \"auto-query\",\n    ID_SEARCH_FLAG: \"id-search\",\n    HOME_PAGE_STATE: \"home-page-state\",\n    INTER_PAGE_MANAGER: \"inter-page-manager\",\n};\n// time units in milliseconds\nconst SECOND = 1000;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst WEEK = 7 * DAY;\nconst DEFAULT_TIMEOUT = DAY * 2;\nconst USER_DATA_TIMEOUT = WEEK * 3;\nconst REFERENCE_DATA_TIMEOUT = DAY;\n// Key list for creating custom timeouts\nconst REFERENCE_DATA_KEY_LIST = Object.values(REFERENCE_DATA_KEYS);\nconst USER_DATA_KEY_LIST = Object.values(USER_DATA_KEYS).filter((key) => key !== USER_DATA_KEYS.FILTER_STR);\nfunction timeoutToStr(timeoutData) {\n    const [timestamp, timeout] = timeoutData;\n    return `[${new Date(timestamp)}, ${timeout}]`;\n}\nfunction isTimeoutData(data) {\n    return Array.isArray(data) && data.length === 2 && typeof data[0] === 'number' && typeof data[1] === 'number';\n}\nfunction getCacheTimeout(key) {\n    if (REFERENCE_DATA_KEY_LIST.includes(key))\n        return REFERENCE_DATA_TIMEOUT;\n    if (USER_DATA_KEY_LIST.includes(key))\n        return USER_DATA_TIMEOUT;\n    return DEFAULT_TIMEOUT;\n}\nfunction makeTimeoutData(key) {\n    return [Date.now(), getCacheTimeout(key)];\n}\nconst DATA_STORE_NAME = 'DataStore';\nconst META_STORE_NAME = 'MetaStore';\nlet ClientCache = {\n    consts: {\n        DB_NAME: 'E7ArenaStatsClientDB',\n        DB_VERSION: 1,\n        STORE_NAME: DATA_STORE_NAME,\n        META_STORE_NAME: META_STORE_NAME,\n    },\n    Keys: { ...Keys },\n    MetaKeys: {\n        TIMESTAMP: \"timestamp\",\n    },\n    loaded_UM: new Set(),\n    openDB: async function () {\n        const db = await openDB(ClientCache.consts.DB_NAME, ClientCache.consts.DB_VERSION, {\n            upgrade(db) {\n                if (db.objectStoreNames.contains(DATA_STORE_NAME)) {\n                    db.deleteObjectStore(DATA_STORE_NAME); // 🧹 clear old store\n                    console.log('Old store deleted');\n                }\n                if (!db.objectStoreNames.contains(DATA_STORE_NAME)) {\n                    console.log('Created data store');\n                    db.createObjectStore(DATA_STORE_NAME);\n                }\n                if (!db.objectStoreNames.contains(META_STORE_NAME)) {\n                    console.log('Created meta data store');\n                    db.createObjectStore(META_STORE_NAME);\n                }\n            }\n        });\n        return db;\n    },\n    get: async function (key) {\n        const db = await this.openDB();\n        const result = await db.get(DATA_STORE_NAME, key);\n        if (result) {\n            console.log(`Found ${key} in cache`);\n        }\n        else {\n            console.log(`${key} not found in cache; returning null`);\n            return null;\n        }\n        const useCache = await this.checkCacheTimeout(key);\n        if (useCache) {\n            return result;\n        }\n        else {\n            return null;\n        }\n    },\n    cache: async function (key, data) {\n        if (key === Keys.SEASON_DETAILS) {\n            console.log(\"Caching season details: \", data);\n        }\n        // console.log(`Caching ${key}`);\n        const db = await this.openDB();\n        await db.put(DATA_STORE_NAME, data, key);\n        await this.setTimeoutDataNow(key);\n    },\n    delete: async function (key) {\n        const db = await this.openDB();\n        await db.delete(DATA_STORE_NAME, key);\n        await this.deleteTimeoutData(key);\n    },\n    deleteDB: async function () {\n        await indexedDB.deleteDatabase(this.consts.DB_NAME);\n        console.log('Database deleted');\n    },\n    getTimeoutData: async function (key) {\n        const db = await this.openDB();\n        const metakey = `${key + this.MetaKeys.TIMESTAMP}`;\n        const timeoutData = await db.get(META_STORE_NAME, metakey);\n        return timeoutData || null;\n    },\n    setTimeoutData: async function (key, timeoutData) {\n        const db = await this.openDB();\n        const metakey = `${key + this.MetaKeys.TIMESTAMP}`;\n        await db.put(META_STORE_NAME, timeoutData, metakey);\n    },\n    setTimeoutDataNow: async function (key) {\n        const timeoutData = makeTimeoutData(key);\n        await this.setTimeoutData(key, timeoutData);\n    },\n    deleteTimeoutData: async function (key) {\n        const db = await this.openDB();\n        const metakey = `${key + this.MetaKeys.TIMESTAMP}`;\n        await db.delete(META_STORE_NAME, metakey);\n        console.log(`Deleted ${key} from cache`);\n    },\n    clearData: async function () {\n        const db = await this.openDB();\n        await clearStore(db, DATA_STORE_NAME);\n        await clearStore(db, META_STORE_NAME);\n        console.log('All data cleared from data cache and meta data cache');\n    },\n    clearUserData: async function () {\n        const toDelete = Object.values(USER_DATA_KEYS);\n        await Promise.all(toDelete.map(key => this.delete(key)));\n        console.log(\"User data cleared from data cache\");\n    },\n    clearUserLists: async function () {\n        const toDelete = Object.values(SERVER_USER_LISTS_KEYS);\n        await Promise.all(toDelete.map(key => this.delete(key)));\n        console.log(\"User lists cleared from data cache\");\n    },\n    clearSeasonData: async function () {\n        await this.delete(Keys.SEASON_DETAILS);\n        console.log(\"Season data cleared from data cache\");\n    },\n    clearReferenceData: async function () {\n        const toDelete = Object.values(REFERENCE_DATA_KEYS);\n        await Promise.all(toDelete.map(key => this.delete(key)));\n        console.log(\"Reference data cleared from data cache\");\n    },\n    checkCacheTimeout: async function (key) {\n        const timeoutData = await this.getTimeoutData(key);\n        const currentTime = Date.now();\n        if (!timeoutData) {\n            console.log(\"No timeout data found for \" + key);\n            return false;\n        }\n        else if (!isTimeoutData(timeoutData)) {\n            console.log(`Invalid timeout data found for ${key}; Invalid Timeout Record: ${timeoutData}`);\n            await this.delete(key);\n            return false;\n        }\n        const [timestamp, timeout] = timeoutData;\n        const timedelta = currentTime - timestamp;\n        if (timedelta > timeout) {\n            console.log(`Cache timeout for ${key}; Timeout Record: ${timeoutToStr(timeoutData)}; currentTime: ${new Date(currentTime)}`);\n            await this.delete(key);\n            return false;\n        }\n        console.log(`Cache ok for ${key}; Timeout Record: ${timeoutToStr(timeoutData)}; currentTime: ${new Date(currentTime)}; timeout: ${getCacheTimeout(key)}; diff: ${currentTime - timeoutData[0]}`);\n        return true;\n    },\n    getFilterStr: async function () {\n        return await this.get(Keys.FILTER_STR);\n    },\n    setFilterStr: async function (filterStr) {\n        await this.cache(Keys.FILTER_STR, filterStr);\n    },\n    getLang: async function () {\n        return await this.get(Keys.LANG) ?? LANGUAGES.CODES.EN;\n    },\n    setLang: async function (lang) {\n        await this.cache(Keys.LANG, lang);\n    },\n    getStats: async function () {\n        return await this.get(Keys.STATS);\n    },\n    setStats: async function (stats) {\n        await this.cache(Keys.STATS, stats);\n    },\n};\nexport default ClientCache;\n","import HeroManager from \"./e7/hero-manager.ts\";\nimport BattleManager from \"./e7/battle-manager.ts\";\nimport SeasonManager from \"./e7/season-manager.ts\";\nimport ClientCache from \"./cache-manager.ts\";\nimport UserManager from \"./e7/user-manager.ts\";\nimport ArtifactManager from \"./e7/artifact-manager.ts\";\nimport { LangManager } from \"./lang-manager.ts\";\nlet ContentManager = {\n    HeroManager: HeroManager,\n    BattleManager: BattleManager,\n    SeasonManager: SeasonManager,\n    UserManager: UserManager,\n    ClientCache: ClientCache,\n    ArtifactManager: ArtifactManager,\n    LangManager: LangManager,\n};\nexport { ContentManager };\n","import ClientCache from \"../cache-manager.ts\";\nimport E7API from \"../apis/e7-API.ts\";\nimport PYAPI from \"../apis/py-API.js\";\nasync function getArtifactCodeToNameMap() {\n    console.log(`Getting artifact map from E7 server...`);\n    let rawJSON = await E7API.fetchArtifactJSON(\"en\");\n    if (rawJSON === null) {\n        console.log(`Getting artifact map from flask server...`);\n        rawJSON = await PYAPI.fetchArtifactJson();\n    }\n    if (rawJSON === null) {\n        console.error(`Could not get artifact Json map from E7 server or flask server`);\n        return null;\n    }\n    console.log(`Got artifact Json for language: 'en'`);\n    return Object.fromEntries(rawJSON\n        .filter((artifact) => artifact.name !== null)\n        .map((artifact) => [artifact.code, artifact.name]));\n}\nlet ArtifactManager = {\n    async getArtifactCodeToNameMap() {\n        let artifacts = await ClientCache.get(ClientCache.Keys.ARTIFACTS);\n        if (!artifacts) {\n            artifacts = await this.fetchAndCacheArtifacts();\n        }\n        return artifacts;\n    },\n    getArtifactLowercaseNameMap: async function () {\n        let artiMap = await ClientCache.get(ClientCache.Keys.ARTIFACTS_LOWERCASE_NAMES_MAP);\n        if (artiMap !== null) {\n            console.log(\"Got artifact lowercase name map from cache\");\n            return artiMap;\n        }\n        const artifacts = await this.getArtifactCodeToNameMap();\n        artiMap = Object.fromEntries(Object.values(artifacts)\n            .filter((name) => name !== null)\n            .map((name) => {\n            return [name.toLowerCase(), name];\n        }));\n        await ClientCache.cache(ClientCache.Keys.ARTIFACTS_LOWERCASE_NAMES_MAP, artiMap);\n        return artiMap;\n    },\n    getArtifactObjectList: async function () {\n        let objectList = await ClientCache.get(ClientCache.Keys.ARTIFACT_OBJECT_LIST);\n        if (objectList !== null) {\n            console.log(\"Got artifact object list from cache\");\n            return objectList;\n        }\n        const artifacts = await this.getArtifactCodeToNameMap();\n        objectList = Object.entries(artifacts).map(([id, name]) => ({ id, name }));\n        await ClientCache.cache(ClientCache.Keys.ARTIFACT_OBJECT_LIST, objectList);\n        return objectList;\n    },\n    fetchAndCacheArtifacts: async function () {\n        console.log(`ArtifactManager not found in cache, fetching from server and caching it`);\n        const artifactMap = await getArtifactCodeToNameMap();\n        if (artifactMap === null) {\n            return {};\n        }\n        await ClientCache.cache(ClientCache.Keys.ARTIFACTS, artifactMap);\n        console.log(`Cached ArtifactManager using raw data recieved from server`);\n        return artifactMap;\n    },\n    clearArtifactData: async function () {\n        await ClientCache.delete(ClientCache.Keys.ARTIFACTS);\n    },\n    // will fall back to the code if the name is not found\n    convertCodeToName: function (code, artifacts) {\n        return artifacts[code] || code;\n    },\n};\nexport default ArtifactManager;\n","import ClientCache from \"../cache-manager.ts\";\nimport StatsBuilder from \"./stats-builder.ts\";\nimport { buildFormattedBattleMap, parsedCSVToFormattedBattleMap, } from \"./battle-transform.ts\";\nimport { StandardFilter, GlobalFilter } from \"./filter-parsing/functions.ts\";\nimport { COLUMNS_MAP } from \"./references.ts\";\nexport function applyFilters(battleList, filters) {\n    const localFilterList = filters.filter((f) => f instanceof StandardFilter);\n    const globalFilterList = filters.filter((f) => f instanceof GlobalFilter);\n    // apply global filters (filters that require context of all battles); these are always applied before local filters in order of appearance\n    for (let filter of globalFilterList) {\n        console.log(`Applying global filter: ${filter.asString()}`);\n        battleList = filter.call(battleList);\n    }\n    // apply local filters (filters that can be resolved on each battle without context of other battles)\n    for (let filter of localFilterList) {\n        console.log(`Applying local filter: ${filter.asString()}`);\n        battleList = battleList.filter((b) => {\n            // console.log(`Filtering battle:`, b);\n            const result = filter.call(b);\n            // console.log(`Result: ${result ? \"included\" : \"excluded\"}`);\n            return result;\n        });\n    }\n    return battleList;\n}\nlet BattleManager = {\n    loaded_servers: new Set(),\n    // gets battles (upload and/or queried) and returns as list in clean format; used directly to populate battles table\n    getBattles: async function () {\n        console.log(\"Getting battles\");\n        const battles = (await ClientCache.get(ClientCache.Keys.BATTLES)) ?? null;\n        ClientCache.setTimeoutDataNow(ClientCache.Keys.BATTLES);\n        return battles;\n    },\n    applyFilters: applyFilters,\n    //takes in list of battles then converts to dict and then adds to cached battles\n    extendBattles: async function (cleanBattleMap) {\n        let oldDict = (await ClientCache.get(ClientCache.Keys.BATTLES)) ?? {};\n        // new battles automatically overwrite old ones if they share same seq_num\n        const newDict = { ...oldDict, ...this.sortBattlesObj(cleanBattleMap) };\n        await ClientCache.cache(ClientCache.Keys.BATTLES, newDict);\n        console.log(\"Extended user data in cache\");\n        return newDict;\n    },\n    //Takes queried battles, clean format and extend in cache\n    cacheQuery: async function (battleList, HeroDicts, artifacts) {\n        if (!battleList) {\n            console.log(\"No query battles provided to cacheQuery\");\n            return [];\n        }\n        console.log(`Caching queried battles: ${battleList.length} battles; modified [BATTLES];`, battleList);\n        const cleanBattleMap = buildFormattedBattleMap(battleList, HeroDicts, artifacts);\n        const battles = await this.extendBattles(cleanBattleMap);\n        console.log(\"Cached queried battles in cache; modified [BATTLES];\");\n        return battles;\n    },\n    //Takes uploaded battles and sets as battles in cache, should be called before attempting to get battles if upload exists\n    cacheUpload: async function (rawParsedBattleList, HeroDicts) {\n        if (!rawParsedBattleList) {\n            console.error(\"No uploaded battles provided to cacheUpload\");\n            return {};\n        }\n        const cleanBattles = parsedCSVToFormattedBattleMap(rawParsedBattleList, HeroDicts);\n        let battles = await this.extendBattles(cleanBattles);\n        console.log(\"Ingested uploaded battle data into cache; modified [BATTLES]\");\n        return battles;\n    },\n    getStats: async function (battles, filters, HeroDicts) {\n        console.log(\"Getting stats\");\n        const numFilters = filters.length;\n        console.log(`Applying ${numFilters} filters`);\n        const battlesList = Object.values(battles);\n        const filteredBattlesList = applyFilters(battlesList, filters);\n        const areFiltersApplied = numFilters > 0;\n        console.log(\"Getting preban stats\");\n        const prebanStats = await StatsBuilder.getPrebanStats(filteredBattlesList, HeroDicts);\n        console.log(\"Getting first pick stats\");\n        const firstPickStats = await StatsBuilder.getFirstPickStats(filteredBattlesList, HeroDicts);\n        console.log(\"Getting general stats\");\n        const generalStats = await StatsBuilder.getGeneralStats(filteredBattlesList);\n        console.log(\"Getting hero stats\");\n        const heroStats = await StatsBuilder.getHeroStats(filteredBattlesList, HeroDicts);\n        console.log(\"Getting server stats\");\n        const performanceStats = await StatsBuilder.getPerformanceStats(filteredBattlesList);\n        console.log(\"Returning stats\");\n        return {\n            battles: battlesList,\n            filteredBattlesObj: Object.fromEntries(filteredBattlesList.map((b) => [b[COLUMNS_MAP.SEQ_NUM], b])),\n            prebanStats: prebanStats,\n            generalStats: generalStats,\n            firstPickStats: firstPickStats,\n            playerHeroStats: heroStats.playerHeroStats,\n            enemyHeroStats: heroStats.enemyHeroStats,\n            performanceStats: performanceStats,\n            numFilters: numFilters,\n            areFiltersApplied: areFiltersApplied,\n        };\n    },\n    sortBattlesList: function (battlesList, asc = true) {\n        const cmpCol = COLUMNS_MAP.DATE_TIME;\n        if (asc) {\n            return battlesList.sort((a, b) => {\n                return +new Date(a[cmpCol]) - +new Date(b[cmpCol]);\n            });\n        }\n        else {\n            return battlesList.sort((a, b) => {\n                return +new Date(b[cmpCol]) - +new Date(a[cmpCol]);\n            });\n        }\n    },\n    sortBattlesObj: function (battlesObj, asc = true) {\n        const cmpCol = COLUMNS_MAP.DATE_TIME;\n        if (asc) {\n            let sorted = Object.values(battlesObj).sort((a, b) => {\n                return +new Date(a[cmpCol]) - +new Date(b[cmpCol]);\n            });\n            return Object.fromEntries(sorted.map((b) => [b[COLUMNS_MAP.SEQ_NUM], b]));\n        }\n        else {\n            let sorted = Object.values(battlesObj).sort((a, b) => {\n                return +new Date(b[cmpCol]) - +new Date(a[cmpCol]);\n            });\n            return Object.fromEntries(sorted.map((b) => [b[COLUMNS_MAP.SEQ_NUM], b]));\n        }\n    },\n};\nexport default BattleManager;\n","import HeroManager from \"./hero-manager.ts\";\nimport ArtifactManager from \"./artifact-manager.ts\";\nimport { EQUIPMENT_SET_MAP, COLUMNS_MAP, WORLD_CODE_TO_CLEAN_STR, } from \"./references.ts\";\nimport { toTitleCase } from \"../str-functions.ts\";\n// takes in cleaned battle row (including from uploaded file or in formatBattleAsRow)\n// and adds fields representing sets heroes as prime products\nfunction addPrimeFields(battle, HeroDicts) {\n    const getChampPrime = (name) => HeroManager.getHeroByName(name, HeroDicts)?.prime ?? HeroDicts.Fodder.prime;\n    battle[COLUMNS_MAP.P1_PICKS_PRIMES] =\n        battle[COLUMNS_MAP.P1_PICKS].map(getChampPrime);\n    battle[COLUMNS_MAP.P2_PICKS_PRIMES] =\n        battle[COLUMNS_MAP.P2_PICKS].map(getChampPrime);\n    battle[COLUMNS_MAP.P1_PREBANS_PRIMES] =\n        battle[COLUMNS_MAP.P1_PREBANS].map(getChampPrime);\n    battle[COLUMNS_MAP.P2_PREBANS_PRIMES] =\n        battle[COLUMNS_MAP.P2_PREBANS].map(getChampPrime);\n}\nconst P1 = \"p1\";\nconst P2 = \"p2\";\n// takes raw battle from array returned by rust battle array call to flask-server; formats into row to populate table\nfunction formatBattleAsRow(raw, HeroDicts, artifacts) {\n    // Make functions used to convert the identifier strings in the E7 data into human readable names\n    const getChampName = (code) => HeroManager.getHeroByCode(code, HeroDicts)?.name ?? HeroDicts.Fodder.name;\n    const getArtifactName = (code) => ArtifactManager.convertCodeToName(code, artifacts) || \"None\";\n    const checkBanned = (player, index) => {\n        // used to check if artifact is null because banned or because not equipped\n        if (player === P1) {\n            return raw.p2_postban === raw.p1_picks[index];\n        }\n        else {\n            return raw.p1_postban === raw.p2_picks[index];\n        }\n    };\n    const formatArtifacts = (player, artiArr) => artiArr.map((code, index) => code ? getArtifactName(code) : checkBanned(player, index) ? \"n/a\" : \"None\");\n    function formatCRBar(crBar) {\n        return crBar.map((entry) => entry && entry.length == 2\n            ? [getChampName(entry[0]), entry[1]]\n            : [\"n/a\", 0]);\n    }\n    // Fall back to the code if the equipment set is not defined in references\n    const formatEquipment = (equipArr) => equipArr.map((heroEquipList) => heroEquipList.map((equip) => EQUIPMENT_SET_MAP[equip] || equip));\n    const firstTurnHero = raw.cr_bar.find((entry) => entry[1] === 100);\n    const p1TookFirstTurn = firstTurnHero\n        ? raw.p1_picks.includes(firstTurnHero[0])\n        : false;\n    const battle = {\n        [COLUMNS_MAP.SEASON]: raw.season_name || \"None\",\n        [COLUMNS_MAP.SEASON_CODE]: raw.season_code || \"None\",\n        [COLUMNS_MAP.DATE_TIME]: raw.date_time,\n        [COLUMNS_MAP.SECONDS]: raw.seconds,\n        [COLUMNS_MAP.TURNS]: raw.turns,\n        [COLUMNS_MAP.SEQ_NUM]: raw.seq_num,\n        [COLUMNS_MAP.P1_ID]: raw.p1_id.toString(),\n        [COLUMNS_MAP.P1_SERVER]: WORLD_CODE_TO_CLEAN_STR[raw.p1_server] || raw.p1_server || \"None\",\n        [COLUMNS_MAP.P2_ID]: raw.p2_id.toString(),\n        [COLUMNS_MAP.P2_SERVER]: WORLD_CODE_TO_CLEAN_STR[raw.p2_server] || raw.p2_server || \"None\",\n        [COLUMNS_MAP.P1_LEAGUE]: toTitleCase(raw.p1_league) || \"None\",\n        [COLUMNS_MAP.P2_LEAGUE]: toTitleCase(raw.p2_league) || \"None\",\n        [COLUMNS_MAP.P1_POINTS]: raw.p1_win_score,\n        [COLUMNS_MAP.POINT_GAIN]: raw.p1_point_delta || null,\n        [COLUMNS_MAP.WIN]: raw.win === 1 ? true : false,\n        [COLUMNS_MAP.FIRST_PICK]: raw.first_pick === 1 ? true : false,\n        [COLUMNS_MAP.FIRST_TURN]: p1TookFirstTurn ? true : false,\n        [COLUMNS_MAP.FIRST_TURN_HERO]: firstTurnHero\n            ? getChampName(firstTurnHero[0])\n            : \"n/a\",\n        [COLUMNS_MAP.CR_BAR]: formatCRBar(raw.cr_bar),\n        [COLUMNS_MAP.P1_PREBANS]: raw.p1_prebans.map(getChampName),\n        [COLUMNS_MAP.P2_PREBANS]: raw.p2_prebans.map(getChampName),\n        [COLUMNS_MAP.P1_PICKS]: raw.p1_picks.map(getChampName),\n        [COLUMNS_MAP.P2_PICKS]: raw.p2_picks.map(getChampName),\n        [COLUMNS_MAP.P1_POSTBAN]: getChampName(raw.p1_postban),\n        [COLUMNS_MAP.P2_POSTBAN]: getChampName(raw.p2_postban),\n        [COLUMNS_MAP.P1_EQUIPMENT]: formatEquipment(raw.p1_equipment),\n        [COLUMNS_MAP.P2_EQUIPMENT]: formatEquipment(raw.p2_equipment),\n        [COLUMNS_MAP.P1_ARTIFACTS]: formatArtifacts(P1, raw.p1_artifacts),\n        [COLUMNS_MAP.P2_ARTIFACTS]: formatArtifacts(P2, raw.p2_artifacts),\n        [COLUMNS_MAP.P1_MVP]: getChampName(raw.p1_mvp),\n        [COLUMNS_MAP.P2_MVP]: getChampName(raw.p2_mvp),\n    };\n    // finally take the array hero array fields and compute the prime products after converting; will be used to compute statistics more easily\n    addPrimeFields(battle, HeroDicts);\n    return battle;\n}\nfunction buildFormattedBattleMap(rawBattles, HeroDicts, artifacts) {\n    artifacts = artifacts ?? ArtifactManager.getArtifactCodeToNameMap();\n    let entries = [];\n    for (const rawBattle of rawBattles) {\n        let battle = formatBattleAsRow(rawBattle, HeroDicts, artifacts);\n        entries.push([battle[\"Seq Num\"], battle]);\n    }\n    return Object.fromEntries(entries);\n}\nfunction castRawUploadBattle(raw) {\n    return Object.fromEntries(Object.entries(raw).map(([column, value]) => [\n        column,\n        JSON.parse(value),\n    ]));\n}\n// takes output of CSV parse and parses the list rows and ensures types are correct\nfunction parsedCSVToFormattedBattleMap(rawRowsArr, HeroDicts) {\n    const rows = rawRowsArr.map((row) => {\n        const formattedRow = castRawUploadBattle(row);\n        console.log(\"Formatted Row: \", formattedRow);\n        addPrimeFields(formattedRow, HeroDicts);\n        return formattedRow;\n    });\n    return Object.fromEntries(rows.map((row) => [row[COLUMNS_MAP.SEQ_NUM], row]));\n}\nexport { buildFormattedBattleMap, parsedCSVToFormattedBattleMap };\n","import { RegExps } from \"../regex\";\nimport Futils from \"./filter-utils\";\nimport { parseStringLiteral, STRING_LITERAL_PARSERS } from \"./string-literal-parse\";\nimport { FIELD_EXTRACT_FN_MAP } from \"./field-extract-map\";\nconst COLLECTION_FIELDS_SET = new Set([\n    \"p1.picks\",\n    \"p2.picks\",\n    \"p1.prebans\",\n    \"p2.prebans\",\n    \"prebans\",\n    \"postbans\"\n]);\nconst BaseEltTypes = {\n    FIELD: \"FIELD\",\n    RANGE: \"RANGE\",\n    SET: \"SET\",\n    INT: \"INT\",\n    DATE: \"DATE\",\n    BOOL: \"BOOL\",\n    STRING: \"STRING\",\n};\nclass BaseElement {\n}\nclass Field extends BaseElement {\n    type = BaseEltTypes.FIELD;\n    rawString;\n    extractFn;\n    constructor(str) {\n        super();\n        this.rawString = str;\n        if (!FIELD_EXTRACT_FN_MAP[str])\n            throw new Error(\"Invalid field\");\n        this.extractFn = FIELD_EXTRACT_FN_MAP[str];\n    }\n    getData() { throw new Error(\"Not implemented for Field\"); }\n    extractData(battle) {\n        return this.extractFn(battle);\n    }\n    asString() { return `${this.rawString}`; }\n}\nclass Literal extends BaseElement {\n    rawString;\n    constructor(str) {\n        super();\n        this.rawString = str;\n    }\n    getData() {\n        return this.data;\n    }\n    extractData(battle) { throw new Error(\"Not implemented for Literals\"); }\n    asString() { return `${this.fmtString}`; }\n}\nclass StringLiteral extends Literal {\n    type = BaseEltTypes.STRING;\n    fmtString;\n    data;\n    constructor(str, REFS, parsers = Object.values(STRING_LITERAL_PARSERS)) {\n        super(str);\n        str = Futils.trimSurroundingQuotes(str);\n        this.data = this.processString(str, REFS, parsers);\n        this.fmtString = this.data;\n    }\n    /**\n     * Processes a string literal and returns the parsed string.\n     * If the string could not be parsed, throws a ValidationError.\n     * @param str the string to parse\n     * @param REFS the FilterReferences to use for parsing\n     * @param parsers an array of StringLiteralParser to use for parsing\n     * @returns the parsed string\n     * @throws ValidationError if the string could not be parsed\n     */\n    processString(str, REFS, parsers) {\n        const parsedString = parseStringLiteral(str, REFS, parsers);\n        if (!parsedString) {\n            const parsersStr = parsers.map((parser) => parser.parserType).join(\", \");\n            throw new Futils.ValidationError(`Invalid string literal: '${str}' ; could not be parsed as a valid instance of any of the following: [${parsersStr}]`);\n        }\n        return parsedString;\n    }\n}\nclass IntLiteral extends Literal {\n    type = BaseEltTypes.INT;\n    fmtString;\n    data;\n    constructor(str) {\n        super(str);\n        this.data = this.processString(str);\n        this.fmtString = str;\n    }\n    processString(str) {\n        const num = parseInt(str);\n        if (isNaN(num)) {\n            throw new Futils.ValidationError(`Invalid integer literal: '${str}'`);\n        }\n        return num;\n    }\n}\nclass BoolLiteral extends Literal {\n    type = BaseEltTypes.BOOL;\n    fmtString;\n    data;\n    constructor(str) {\n        super(str);\n        this.data = this.processString(str);\n        this.fmtString = str;\n    }\n    processString(str) {\n        if (str === \"true\")\n            return true;\n        if (str === \"false\")\n            return false;\n        throw new Futils.ValidationError(`Invalid boolean literal: '${str}'`);\n    }\n}\nclass DateLiteral extends Literal {\n    type = BaseEltTypes.DATE;\n    fmtString;\n    data;\n    constructor(str) {\n        super(str);\n        this.data = this.processString(str);\n        this.fmtString = str;\n    }\n    processString(str) {\n        return Futils.parseDate(str).getTime();\n    }\n}\nclass RangeData {\n    start;\n    end;\n    endInclusive;\n    constructor(start, end, endInclusive) {\n        this.start = start;\n        this.end = end;\n        this.endInclusive = endInclusive;\n    }\n    has(value) {\n        if (typeof value === \"number\" && typeof this.start === \"number\" && typeof this.end === \"number\") {\n            // number case\n            if (value < this.start)\n                return false;\n            if (value > this.end)\n                return false;\n            return value === this.end ? this.endInclusive : true;\n        }\n        return false;\n    }\n    includes(value) {\n        return this.has(value);\n    }\n}\nconst RANGE_ELT_PARSERS = [\n    (str) => {\n        return RegExps.DATE_LITERAL_RE.test(str)\n            ? new DateLiteral(str)\n            : null;\n    },\n    (str) => {\n        return RegExps.INT_LITERAL_RE.test(str)\n            ? new IntLiteral(str)\n            : null;\n    },\n];\nfunction tryParseRange(start, end, endInclusive, parser) {\n    let parsedStart = parser(start);\n    let parsedEnd = parser(end);\n    if (parsedStart === null || parsedEnd === null)\n        return null;\n    return new RangeData(parsedStart.data, parsedEnd.data, endInclusive);\n}\nclass RangeLiteral extends Literal {\n    type = BaseEltTypes.RANGE;\n    fmtString;\n    data;\n    constructor(str, REFS) {\n        super(str);\n        this.fmtString = str;\n        this.data = this.processString(str, REFS);\n    }\n    processString(str, REFS) {\n        const split = str.split(\"...\");\n        const start = split[0];\n        let endInclusive = split[1].charAt(0) === \"=\";\n        const end = split[1].slice(endInclusive ? 1 : 0);\n        for (const parser of RANGE_ELT_PARSERS) {\n            const parsedRangeData = tryParseRange(start, end, endInclusive, parser);\n            if (parsedRangeData !== null) {\n                console.log(\"Parsed Range literal:\", parsedRangeData);\n                return parsedRangeData;\n            }\n        }\n        throw new Futils.ValidationError(`Invalid range literal: '${str}' ; ranges must be homogenous and of the format x...y or x...=y for the types: [Date, Integer]`);\n    }\n}\nconst SET_ELT_PARSERS = [\n    ...RANGE_ELT_PARSERS\n];\nconst SET_STRING_PARSER = (str, REFS, parsers) => {\n    return RegExps.STRING_RE.test(str)\n        ? new StringLiteral(str, REFS, parsers)\n        : null;\n};\nclass SetLiteral extends Literal {\n    type = BaseEltTypes.SET;\n    fmtString;\n    data;\n    constructor(str, REFS, parsers = Object.values(STRING_LITERAL_PARSERS)) {\n        super(str);\n        this.fmtString = str;\n        this.data = this.processString(str, REFS, parsers);\n    }\n    processString(str, REFS, parsers) {\n        let args = Futils.tokenizeWithNestedEnclosures(str, \",\", 1, true);\n        args = args.filter((arg) => arg !== \"\");\n        const parsedSet = new Set();\n        for (const arg of args) {\n            let parsedElt = null;\n            for (const parser of SET_ELT_PARSERS) {\n                parsedElt = parser(arg);\n                if (parsedElt) {\n                    console.log(`Parsed literal: ${arg} and got ${parsedElt}`);\n                    parsedSet.add(parsedElt.data);\n                    break;\n                }\n            }\n            if (parsedElt)\n                continue;\n            parsedElt = SET_STRING_PARSER(arg, REFS, parsers);\n            if (parsedElt) {\n                console.log(`Parsed string literal: ${arg} and got ${parsedElt}`);\n                parsedSet.add(parsedElt.data);\n                continue;\n            }\n            throw new Futils.ValidationError(`Invalid set element: '${str}' ; could not be parsed as a valid instance of any of the following types: [Date, Integer, String]`);\n        }\n        this.fmtString = `{${Array.from(parsedSet).join(\", \")}}`;\n        return parsedSet;\n    }\n}\nfunction parseBaseElement(string, REFS) {\n    console.log(`Parsing string: ${string}`);\n    if (RegExps.STRING_LITERAL_RE.test(string)) {\n        console.log(`Parsing as StringLiteral`);\n        return new StringLiteral(string, REFS);\n    }\n    else if (RegExps.INT_LITERAL_RE.test(string)) {\n        console.log(\"Parsing as IntLiteral\");\n        return new IntLiteral(string);\n    }\n    else if (RegExps.BOOL_LITERAL_RE.test(string)) {\n        console.log(\"Parsing as BoolLiteral\");\n        return new BoolLiteral(string);\n    }\n    else if (RegExps.DATE_LITERAL_RE.test(string)) {\n        console.log(\"Parsing as DateLiteral\");\n        return new DateLiteral(string);\n    }\n    else if (RegExps.RANGE_LITERAL_RE.test(string)) {\n        console.log(\"Parsing as RangeLiteral\");\n        return new RangeLiteral(string, REFS);\n    }\n    else if (RegExps.SET_LITERAL_RE.test(string)) {\n        console.log(\"Parsing as SetLiteral\");\n        return new SetLiteral(string, REFS);\n    }\n    else if (RegExps.SEASON_LITERAL_RE.test(string)) {\n        console.log(\"Parsing as SeasonLiteral\");\n        return new StringLiteral(string, REFS, [STRING_LITERAL_PARSERS.Season]);\n    }\n    else if (RegExps.FIELD_WORD_LITERAL_RE.test(string)) {\n        console.log(\"Parsing as Field\");\n        return new Field(string);\n    }\n    throw new Futils.ValidationError(`Invalid base element: '${string}' ; could not be parsed as a Field or Literal.`);\n}\nconst BaseElements = {\n    StringLiteral: StringLiteral,\n    IntLiteral: IntLiteral,\n    BoolLiteral: BoolLiteral,\n    DateLiteral: DateLiteral,\n    RangeLiteral: RangeLiteral,\n    SetLiteral: SetLiteral,\n    Field: Field,\n    BaseEltTypes: BaseEltTypes,\n    FIELD_EXTRACT_FN_MAP: FIELD_EXTRACT_FN_MAP,\n    parseBaseElement: parseBaseElement,\n    COLLECTION_FIELDS_SET: COLLECTION_FIELDS_SET\n};\nexport { BaseElements, BaseElement, RangeData };\n","import { COLUMNS_MAP } from \"../references\";\nimport Futils from \"./filter-utils\";\n// FNS that take in a clean format battle and return the appropriate data\nexport const FIELD_EXTRACT_FN_MAP = {\n    \"date\": (battle) => battle[COLUMNS_MAP.DATE_TIME]\n        ? Futils.castStringToUTCDate(battle[COLUMNS_MAP.DATE_TIME].split(\" \")[0]).getTime()\n        : \"N/A\",\n    \"season\": (battle) => battle[COLUMNS_MAP.SEASON_CODE],\n    \"is-first-pick\": (battle) => battle[COLUMNS_MAP.FIRST_PICK] ? true : false,\n    \"is-win\": (battle) => battle[COLUMNS_MAP.WIN] ? true : false,\n    \"victory-points\": (battle) => battle[COLUMNS_MAP.P1_POINTS],\n    \"p1.picks\": (battle) => battle[COLUMNS_MAP.P1_PICKS],\n    \"p2.picks\": (battle) => battle[COLUMNS_MAP.P2_PICKS],\n    \"p1.prebans\": (battle) => battle[COLUMNS_MAP.P1_PREBANS],\n    \"p2.prebans\": (battle) => battle[COLUMNS_MAP.P2_PREBANS],\n    \"p1.postban\": (battle) => battle[COLUMNS_MAP.P1_POSTBAN],\n    \"p2.postban\": (battle) => battle[COLUMNS_MAP.P2_POSTBAN],\n    \"postbans\": (battle) => [battle[COLUMNS_MAP.P1_POSTBAN], battle[COLUMNS_MAP.P2_POSTBAN]],\n    \"prebans\": (battle) => [\n        ...battle[COLUMNS_MAP.P1_PREBANS],\n        ...battle[COLUMNS_MAP.P2_PREBANS],\n    ],\n    \"p1.pick1\": (battle) => battle[COLUMNS_MAP.P1_PICKS][0],\n    \"p1.pick2\": (battle) => battle[COLUMNS_MAP.P1_PICKS][1],\n    \"p1.pick3\": (battle) => battle[COLUMNS_MAP.P1_PICKS][2],\n    \"p1.pick4\": (battle) => battle[COLUMNS_MAP.P1_PICKS][3],\n    \"p1.pick5\": (battle) => battle[COLUMNS_MAP.P1_PICKS][4],\n    \"p2.pick1\": (battle) => battle[COLUMNS_MAP.P2_PICKS][0],\n    \"p2.pick2\": (battle) => battle[COLUMNS_MAP.P2_PICKS][1],\n    \"p2.pick3\": (battle) => battle[COLUMNS_MAP.P2_PICKS][2],\n    \"p2.pick4\": (battle) => battle[COLUMNS_MAP.P2_PICKS][3],\n    \"p2.pick5\": (battle) => battle[COLUMNS_MAP.P2_PICKS][4],\n    \"p1.league\": (battle) => battle[COLUMNS_MAP.P1_LEAGUE],\n    \"p2.league\": (battle) => battle[COLUMNS_MAP.P2_LEAGUE],\n    \"p1.server\": (battle) => battle[COLUMNS_MAP.P1_SERVER],\n    \"p2.server\": (battle) => battle[COLUMNS_MAP.P2_SERVER],\n    \"p1.id\": (battle) => Number(battle[COLUMNS_MAP.P1_ID]),\n    \"p2.id\": (battle) => Number(battle[COLUMNS_MAP.P2_ID]),\n    \"p1.mvp\": (battle) => battle[COLUMNS_MAP.P1_MVP],\n    \"p2.mvp\": (battle) => battle[COLUMNS_MAP.P2_MVP],\n    \"is-first-turn\": (battle) => battle[COLUMNS_MAP.FIRST_TURN] ? true : false,\n    \"first-turn-hero\": (battle) => battle[COLUMNS_MAP.FIRST_TURN_HERO],\n    \"turns\": (battle) => battle[COLUMNS_MAP.TURNS],\n    \"seconds\": (battle) => battle[COLUMNS_MAP.SECONDS],\n    \"point-gain\": (battle) => battle[COLUMNS_MAP.POINT_GAIN],\n};\n","import { EQUIPMENT_SET_MAP } from \"../references.ts\";\nexport const ACCEPTED_CHARS = new Set(`'\"(),_-.=; ><!1234567890{}~` +\n    `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`);\nexport const PRINT_PREFIX = \"   \";\nexport const EQUIPMENT_LOWERCASE_STRINGS_MAP = Object.fromEntries(Object.values(EQUIPMENT_SET_MAP).map((v) => [v.toLowerCase(), v]));\n","import ArtifactManager from \"../artifact-manager\";\nimport HeroManager from \"../hero-manager\";\nimport { RegExps } from \"../regex.ts\";\nimport SeasonManager from \"../season-manager\";\nimport { FNS, FN_STR_MAP, FUNCTION_STRS, GlobalFilter, StandardFilter } from \"./functions.ts\";\nimport { ACCEPTED_CHARS, PRINT_PREFIX } from \"./filter-parse-references\";\nimport Futils from \"./filter-utils.ts\";\nimport ClientCache from \"../../cache-manager.ts\";\nfunction validateChars(str, charSet, objName) {\n    for (let char of str) {\n        if (!charSet.has(char)) {\n            throw new Futils.SyntaxException(`Invalid character within <${objName}> ; ' ${char} ' is not allowed; got string: '${str}'`);\n        }\n    }\n}\nfunction preParse(str) {\n    str = str.replace(/[\\n\\t\\r]/g, \" \").replace(/\\s+/g, \" \"); // replace newlines with spaces and remove multiple spaces\n    validateChars(str, ACCEPTED_CHARS, \"Main Filter String\");\n    str = str.toLowerCase();\n    return str;\n}\nfunction getEmptyFilters() {\n    return [];\n}\nfunction validateClauseBody(filters, str) {\n    for (const f of filters) {\n        if (f instanceof GlobalFilter) {\n            throw new Futils.SyntaxException(`Global filters not allowed in clause functions; got: ${f.asString()} from string: \"${str}\"`);\n        }\n    }\n    return filters.filter((f) => f instanceof StandardFilter);\n}\nfunction sortFilters(filters) {\n    const globalFilters = [];\n    const standardFilters = [];\n    for (const f of filters) {\n        if (f instanceof GlobalFilter) {\n            globalFilters.push(f);\n        }\n        else {\n            standardFilters.push(f);\n        }\n    }\n    return [...globalFilters, ...standardFilters];\n}\nclass FilterParser {\n    _filters;\n    rawString;\n    preParsedString;\n    references;\n    constructor() {\n        this._filters = getEmptyFilters();\n        this.rawString = \"\";\n        this.preParsedString = \"\";\n        this.references = {\n            HeroDicts: null,\n            ARTIFACT_LOWERCASE_STRINGS_MAP: {},\n            SEASON_DETAILS: [],\n        };\n    }\n    async addReferences(HeroDicts = null) {\n        HeroDicts = HeroDicts || (await HeroManager.getHeroDicts());\n        if (HeroDicts === null)\n            throw new Error(\"Hero Manager could not be retrieved to parse filters.\");\n        const seasonDetails = await SeasonManager.getSeasonDetails();\n        if (seasonDetails === null)\n            throw new Error(\"Season Details could not be retrieved to parse filters.\");\n        const ARTIFACT_LOWERCASE_STRINGS_MAP = await ArtifactManager.getArtifactLowercaseNameMap();\n        this.references = {\n            HeroDicts: HeroDicts,\n            ARTIFACT_LOWERCASE_STRINGS_MAP: ARTIFACT_LOWERCASE_STRINGS_MAP,\n            SEASON_DETAILS: seasonDetails,\n        };\n    }\n    getFilters() {\n        return sortFilters(this._filters);\n    }\n    asString() {\n        const prefix = PRINT_PREFIX;\n        return `[\\n${this._filters.map((f) => f.asString(prefix)).join(\";\\n\")};\\n]`;\n    }\n    static async getFiltersFromCache(HeroDicts = null) {\n        const filterStr = await ClientCache.get(ClientCache.Keys.FILTER_STR);\n        if (filterStr === null)\n            return [];\n        let parser = await this.fromFilterStr(filterStr, HeroDicts);\n        return parser.getFilters();\n    }\n    static async fromFilterStr(filterStr, HeroDicts = null) {\n        const parser = new FilterParser();\n        parser.rawString = filterStr;\n        await parser.addReferences(HeroDicts);\n        parser.preParsedString = preParse(filterStr);\n        parser._filters = parser.parse(parser.preParsedString);\n        return parser;\n    }\n    parseList(filterStrs) {\n        return filterStrs.reduce((acc, str) => {\n            acc.push(...this.parse(str));\n            return acc;\n        }, getEmptyFilters());\n    }\n    parse(str) {\n        str = str.trim();\n        if (str === \"\")\n            return getEmptyFilters();\n        if (str.includes(\";\")) {\n            const filterStrs = str.split(\";\");\n            return this.parseList(filterStrs);\n        }\n        const fnStr = str.split(\"(\")[0].replace(/p[1-2]\\./i, \"\"); // \n        const args = Futils.tokenizeWithNestedEnclosures(str, \",\", 1, true);\n        switch (fnStr) {\n            case FUNCTION_STRS.AND:\n            case FUNCTION_STRS.OR:\n            case FUNCTION_STRS.NOT:\n            case FUNCTION_STRS.XOR:\n                const filters = validateClauseBody(this.parseList(args), str);\n                return [new FN_STR_MAP[fnStr](...filters)];\n            case FUNCTION_STRS.LAST_N:\n                return [new FNS.LAST_N(str)];\n            case FUNCTION_STRS.EQUIPMENT:\n            case FUNCTION_STRS.ARTIFACT:\n            case FUNCTION_STRS.CR:\n                return [new FN_STR_MAP[fnStr](str, this.references)];\n            default:\n                if (RegExps.FUNCTION_CALL_RE.test(str)) {\n                    throw new Futils.SyntaxException(`Filter String is not a valid function call but a parenthese block was detected; got: ${str}`);\n                }\n                return [new FNS.BASE_FILTER(str, this.references)];\n        }\n    }\n}\nexport { FilterParser };\n","import { RegExps } from \"../regex.ts\";\nclass SyntaxException extends Error {\n    constructor(message) {\n        super(message); // Pass message to base Error\n        this.name = \"Filter Syntax Exception\"; // Set error name\n    }\n}\nclass TypeException extends Error {\n    constructor(message) {\n        super(message); // Pass message to base Error\n        this.name = \"Filter Type Exception\"; // Set error name\n    }\n}\nclass ValidationError extends Error {\n    constructor(message) {\n        super(message); // Pass message to base Error\n        this.name = \"Filter Validation Error\"; // Set error name\n    }\n}\nconst ENCLOSURE_MAP = {\n    \"(\": \")\",\n    \"{\": \"}\",\n    '\"': '\"',\n    \"'\": \"'\",\n};\nconst ENCLOSURE_IGNORE = {\n    // if we are in a string enclosure, don't look for other quotes\n    \"'\": '\"',\n    '\"': \"'\",\n};\nconst REVERSE_ENCLOSURE_MAP = Object.fromEntries(Object.entries(ENCLOSURE_MAP)\n    .filter(([k, v]) => k !== v)\n    .map(([k, v]) => [v, k]));\n/**\n * Tokenize a string into an array of strings, ignoring any enclosures up to a given level.\n * @param {string} input - The string to tokenize.\n * @param {string} [splitChars=\" \"] - The characters to split on.\n * @param {number} [enclosureLevel=0] - The level of enclosure to ignore.\n * @param {boolean} [trim=true] - Whether to trim the tokens.\n * @returns {string[]} An array of strings, each representing a token in the input string.\n * @throws {SyntaxException} If there is an unbalanced closing character in the input string.\n * @throws {Error} If there are any unresolved characters from the enclosure stack after tokenizing.\n */\nfunction tokenizeWithNestedEnclosures(input, splitChars = \" \", enclosureLevel = 0, trim = true) {\n    const tokens = [];\n    let current = \"\";\n    let stack = [];\n    for (let i = 0; i < input.length; i++) {\n        const char = input[i];\n        //console.log(`Processing char ${char} at position ${i}; current string: ${current}; tokens: ${tokens}`);\n        if (splitChars.includes(char) && stack.length === enclosureLevel) {\n            if (current) {\n                tokens.push(trim ? current.trim() : current);\n                current = \"\";\n            }\n        }\n        else {\n            if (REVERSE_ENCLOSURE_MAP[char]) {\n                // found a closing brace or parenthesis\n                const expected = REVERSE_ENCLOSURE_MAP[char];\n                if (stack.length > enclosureLevel) {\n                    current += char;\n                }\n                if (stack[stack.length - 1] === expected) {\n                    stack.pop();\n                }\n                else {\n                    const charCounts = getCharCounts(input);\n                    if ((charCounts[\"'\"] || 0) % 2 !== 0 ||\n                        (charCounts['\"'] || 0) % 2 !== 0) {\n                        throw new SyntaxException(`Error tokenizing: Unbalanced closing character at position ${i}; got string: '${input}' ; if a str type has quote characters in it, wrap it in the opposite quote character.`);\n                    }\n                    else {\n                        throw new SyntaxException(`Error tokenizing: Unbalanced closing character at position ${i}; got string: '${input}'`);\n                    }\n                }\n            }\n            else {\n                if (stack.length >= enclosureLevel) {\n                    // we are beyond the level of enclosure we are ignoring so add to current string\n                    current += char;\n                }\n                if (ENCLOSURE_MAP[char] &&\n                    (!ENCLOSURE_IGNORE[char] ||\n                        stack[stack.length - 1] !== ENCLOSURE_IGNORE[char])) {\n                    if (stack[stack.length - 1] === ENCLOSURE_MAP[char] && // matching quote to end the enclosure\n                        char === ENCLOSURE_MAP[char]) {\n                        stack.pop();\n                    }\n                    else {\n                        stack.push(char); // add new enclosure level\n                    }\n                }\n            }\n        }\n    }\n    if (stack.length > 0) {\n        throw new Error(`Unbalanced enclosures in input string; unresolved characters from enclosure stack: [ ${stack.join(\", \")} ]`);\n    }\n    if (current) {\n        tokens.push(trim ? current.trim() : current);\n    }\n    return tokens;\n}\nfunction getCharCounts(str) {\n    const counts = {};\n    for (const char of str) {\n        counts[char] = (counts[char] || 0) + 1;\n    }\n    return counts;\n}\nfunction castStringToUTCDate(dateStr) {\n    return new Date(`${dateStr}T00:00:00Z`);\n}\nfunction parseDate(dateStr) {\n    if (!RegExps.DATE_LITERAL_RE.test(dateStr)) {\n        throw new SyntaxException(`Invalid date; must be in the format: YYYY-MM-DD ( regex: ${RegExps.DATE_LITERAL_RE.source} ); got: '${dateStr}'`);\n    }\n    const date = castStringToUTCDate(dateStr);\n    // Check if valid date\n    if (isNaN(date.getTime())) {\n        throw new SyntaxException(`Invalid date; could not be parsed as a valid date; got: '${dateStr}'`);\n    }\n    // Check if parsed date matches passed in string\n    const dateString = date.toISOString().split(\"T\")[0];\n    const [year, month, day] = dateString.split(\"-\").map(Number);\n    if (date.getUTCFullYear() !== year ||\n        date.getUTCMonth() + 1 !== month ||\n        date.getUTCDate() !== day) {\n        throw new SyntaxException(`Invalid date; parsed date: ${date.toISOString()} does not match passed in string: ${dateStr}`);\n    }\n    console.log(`Parsed date: ${date.toISOString()} ; ${date.constructor.name}`);\n    return date;\n}\nfunction tryConvert(convertFnc, typeName, value, errMSG = null) {\n    if (errMSG === null) {\n        errMSG = `Could not convert ${value} to ${typeName}`;\n    }\n    try {\n        return convertFnc(value);\n    }\n    catch (err) {\n        throw new TypeException(`${errMSG}: ${err.message}`);\n    }\n}\nfunction trimSurroundingQuotes(str) {\n    return str.replace(/^\"(.*)\"$/, \"$1\").replace(/^'(.*)'$/, \"$1\");\n}\nlet Futils = {\n    SyntaxException: SyntaxException,\n    TypeException: TypeException,\n    ValidationError: ValidationError,\n    getCharCounts: getCharCounts,\n    tokenizeWithNestedEnclosures: tokenizeWithNestedEnclosures,\n    parseDate: parseDate,\n    tryConvert: tryConvert,\n    trimSurroundingQuotes: trimSurroundingQuotes,\n    castStringToUTCDate,\n};\nexport default Futils;\n","import { strArrToCountMap } from \"../../str-functions\";\nimport { COLUMNS_MAP } from \"../references\";\nimport { BaseElements } from \"./base-elements\";\nimport { CompareOperator, parseOperator, InOperator } from \"./operators\";\nimport { PRINT_PREFIX } from \"./filter-parse-references\";\nimport Futils from \"./filter-utils\";\nimport { STRING_LITERAL_PARSERS } from \"./string-literal-parse\";\nconst FUNCTION_STRS = {\n    AND: \"and\",\n    OR: \"or\",\n    XOR: \"xor\",\n    NOT: \"not\",\n    LAST_N: \"last-n\",\n    EQUIPMENT: \"equipment\",\n    ARTIFACT: \"artifact\",\n    CR: \"cr\",\n    BASE_FILTER: \"base-filter\",\n};\nconst FN_TYPES = {\n    CLAUSE_FN: \"CLAUSE_FN\",\n    HERO_LIST_FN: \"HERO_LIST_FN\",\n    GLOBAL_FN: \"GLOBAL_FN\",\n    BASE_FILTER: \"BASE_FILTER\",\n};\nclass Fn {\n}\nclass StandardFilter extends Fn {\n}\nclass ClauseFn extends StandardFilter {\n    fnType = FN_TYPES.CLAUSE_FN;\n    fns = [];\n    constructor(...fns) {\n        super();\n        this.fns = fns;\n    }\n    asString(prefix = \"\") {\n        let strBody = \"\";\n        const newPrefix = prefix + PRINT_PREFIX;\n        this.fns.forEach((fn) => (strBody += `${fn.asString(newPrefix)},\\n`));\n        console.log(\"Clause Fn asString got strBody:\", strBody);\n        return `${prefix}${this.fnName}(\\n${strBody.trimEnd()}\\n${prefix})`;\n    }\n}\nclass AND extends ClauseFn {\n    fnName = FUNCTION_STRS.AND;\n    fnType = FN_TYPES.CLAUSE_FN;\n    call(battle) {\n        return this.fns.every((fn) => fn.call(battle));\n    }\n}\nclass OR extends ClauseFn {\n    fnName = FUNCTION_STRS.OR;\n    fnType = FN_TYPES.CLAUSE_FN;\n    call(battle) {\n        return this.fns.some((fn) => fn.call(battle));\n    }\n}\nclass XOR extends ClauseFn {\n    fnName = FUNCTION_STRS.XOR;\n    fnType = FN_TYPES.CLAUSE_FN;\n    call(battle) {\n        let result = false;\n        for (let fn of this.fns) {\n            result = (!result && fn.call(battle)) || (result && !fn.call(battle));\n        }\n        return result;\n    }\n}\nclass NOT extends ClauseFn {\n    fnName = FUNCTION_STRS.NOT;\n    fnType = FN_TYPES.CLAUSE_FN;\n    constructor(...fns) {\n        super(...fns);\n        if (this.fns.length !== 1) {\n            throw new Futils.SyntaxException(`Invalid NOT function call ; accepts exactly 1 argument ; got: [${this.fns}]`);\n        }\n    }\n    call(battle) {\n        return !this.fns[0].call(battle);\n    }\n}\nclass HeroListFn extends StandardFilter {\n    fnType = FN_TYPES.HERO_LIST_FN;\n    getHeroes(battle) {\n        return this.isPlayer1 ? battle[COLUMNS_MAP.P1_PICKS] : battle[COLUMNS_MAP.P2_PICKS];\n    }\n    asString(prefix = \"\") {\n        const playerStr = this.isPlayer1 ? \"p1.\" : \"p2.\";\n        return `${prefix}${playerStr}${this.fnName}(${this.argFmtString})`;\n    }\n}\nclass CRFn extends HeroListFn {\n    fnName = FUNCTION_STRS.CR;\n    fnType = FN_TYPES.HERO_LIST_FN;\n    heroName;\n    crThreshold = 0;\n    operator;\n    targetField;\n    isPlayer1 = false;\n    argFmtString;\n    constructor(str, REFS) {\n        super();\n        const splitChar = str.includes(\",\") ? \",\" : \" \";\n        const args = Futils.tokenizeWithNestedEnclosures(str, splitChar, 1, true);\n        if (args.length !== 3) {\n            throw new Futils.SyntaxException(`Invalid CR function call ; accepts exactly 3 arguments ; got: [${args}] from str: ${str}`);\n        }\n        const threshold = parseInt(args[2]);\n        if (isNaN(threshold)) {\n            throw new Futils.TypeException(`Invalid CR function call ; third argument must be a valid integer literal ; got: '${args[2]}' from str: ${str}`);\n        }\n        const operator = parseOperator(args[1]);\n        if (!(operator instanceof CompareOperator)) {\n            throw new Futils.TypeException(`Invalid CR function call ; second argument must be a valid comparison operator ; got: '${args[1]}' from str: ${str}`);\n        }\n        this.heroName = new BaseElements.StringLiteral(args[0], REFS, [STRING_LITERAL_PARSERS.Hero]).data;\n        this.crThreshold = threshold;\n        this.operator = operator;\n        this.isPlayer1 = str.includes(\"p1.\");\n        this.targetField = (battle) => battle[COLUMNS_MAP.CR_BAR];\n        this.argFmtString = `${this.heroName} ${this.operator.opStr} ${this.crThreshold}`;\n    }\n    call(battle) {\n        // console.log(\"Calling CR function on battle: \", battle);\n        const heroes = this.getHeroes(battle);\n        const crBar = this.targetField(battle);\n        const heroCr = crBar.find((entry) => entry[0] === this.heroName);\n        // console.log(\"Called CR function; Got: \", heroes, crBar, heroCr, \"Filtering using operator: \", this.operator);\n        if (!heroCr) {\n            return false;\n        }\n        else if (!heroes.includes(this.heroName)) {\n            return false;\n        }\n        // console.log(\"Returning value: \", this.operator.call(heroCr[1], this.crThreshold));\n        return this.operator.call(heroCr[1], this.crThreshold);\n    }\n}\n/**\n * Returns true if all the equipment counts in target are matched or exceeded in the instance.\n * In other words, target is a subset of instance.\n * If a hero has additional equipment, the function will still return true\n * @param target the target object to check against\n * @param instance the object to check\n * @returns boolean indicating if all the equipment counts in target are present in instance\n */\nfunction validateEquipmentCounts(target, instance) {\n    for (const key in target) {\n        if (target[key] > (instance[key] || 0)) {\n            return false;\n        }\n    }\n    return true;\n}\n// TODO: consolidate code with ArtifactFn where possible to reduce duplication\nclass EquipmentFn extends HeroListFn {\n    fnName = FUNCTION_STRS.EQUIPMENT;\n    fnType = FN_TYPES.HERO_LIST_FN;\n    heroName;\n    targetEquipCounts;\n    isPlayer1 = false;\n    argFmtString;\n    targetField;\n    constructor(str, REFS) {\n        super();\n        const args = Futils.tokenizeWithNestedEnclosures(str, \",\", 1, true);\n        if (args.length !== 2) {\n            throw new Futils.SyntaxException(`Invalid equipment function call ; accepts exactly 2 arguments ; got: [${args}] from str: ${str}`);\n        }\n        const equipmentSetStr = args[1].includes(\"{\") ? args[1] : `{${args[1]}}`;\n        let equipmentList = Futils.tokenizeWithNestedEnclosures(equipmentSetStr, \",\", 1, true);\n        equipmentList = equipmentList.map((equip) => new BaseElements.StringLiteral(equip, REFS, [STRING_LITERAL_PARSERS.Equipment]).data);\n        this.targetEquipCounts = strArrToCountMap(equipmentList);\n        this.heroName = new BaseElements.StringLiteral(args[0], REFS, [STRING_LITERAL_PARSERS.Hero]).data;\n        this.isPlayer1 = str.includes(\"p1.\");\n        this.argFmtString = `${this.heroName}, {${equipmentList.join(\",\")}}`;\n        this.targetField = (battle) => this.isPlayer1 ? battle[COLUMNS_MAP.P1_EQUIPMENT] : battle[COLUMNS_MAP.P2_EQUIPMENT];\n    }\n    call(battle) {\n        const heroes = this.getHeroes(battle);\n        const heroEq = this.targetField(battle);\n        for (let i = 0; i < heroes.length; i++) {\n            if (heroes[i] === this.heroName) {\n                const counts = strArrToCountMap(heroEq[i]);\n                return validateEquipmentCounts(this.targetEquipCounts, counts);\n            }\n        }\n        return false;\n    }\n}\nclass ArtifactFn extends HeroListFn {\n    fnName = FUNCTION_STRS.ARTIFACT;\n    fnType = FN_TYPES.HERO_LIST_FN;\n    heroName;\n    targetArtifacts;\n    isPlayer1 = false;\n    argFmtString;\n    targetField;\n    constructor(str, REFS) {\n        super();\n        const args = Futils.tokenizeWithNestedEnclosures(str, \",\", 1, true);\n        if (args.length !== 2) {\n            throw new Futils.SyntaxException(`Invalid artifact function call ; accepts exactly 2 arguments ; got: [${args}] from str: ${str}`);\n        }\n        const artifactSetStr = args[1].includes(\"{\") ? args[1] : `{${args[1]}}`;\n        let artifactList = Futils.tokenizeWithNestedEnclosures(artifactSetStr, \",\", 1, true);\n        artifactList = artifactList.map((artifact) => new BaseElements.StringLiteral(artifact, REFS, [STRING_LITERAL_PARSERS.Artifact]).data);\n        this.targetArtifacts = artifactList;\n        this.heroName = new BaseElements.StringLiteral(args[0], REFS, [STRING_LITERAL_PARSERS.Hero]).data;\n        this.isPlayer1 = str.includes(\"p1.\");\n        this.argFmtString = `${this.heroName}, {${artifactList.join(\", \")}}`;\n        this.targetField = (battle) => this.isPlayer1 ? battle[COLUMNS_MAP.P1_ARTIFACTS] : battle[COLUMNS_MAP.P2_ARTIFACTS];\n    }\n    call(battle) {\n        const heroes = this.getHeroes(battle);\n        const heroArtifacts = this.targetField(battle);\n        for (let i = 0; i < heroes.length; i++) {\n            if (heroes[i] === this.heroName) {\n                return this.targetArtifacts.some((artifact) => heroArtifacts[i].includes(artifact));\n            }\n        }\n        return false;\n    }\n}\nclass GlobalFilter extends Fn {\n    fnType = FN_TYPES.GLOBAL_FN;\n    asString(prefix = \"\") {\n        return `${prefix}${this.fnName}(${this.argFmtString})`;\n    }\n}\nclass LastNFn extends GlobalFilter {\n    fnName = FUNCTION_STRS.LAST_N;\n    fnType = FN_TYPES.GLOBAL_FN;\n    argFmtString;\n    n;\n    constructor(str) {\n        super();\n        const args = Futils.tokenizeWithNestedEnclosures(str, \",\", 1, true);\n        if (args.length !== 1) {\n            throw new Futils.SyntaxException(`Invalid last-n function call ; accepts exactly 1 argument ; got: [${args}] from str: ${str}`);\n        }\n        this.n = new BaseElements.IntLiteral(args[0]).data;\n        this.argFmtString = `${this.n}`;\n    }\n    call(battles) {\n        return battles.slice(-this.n);\n    }\n}\nfunction isCollection(baseElt) {\n    return BaseElements.COLLECTION_FIELDS_SET.has(baseElt.rawString);\n}\nfunction validateBaseFilterTypes(left, op, right) {\n    const str = `${left.asString()} ${op.opStr} ${right.asString()}`;\n    if (left instanceof BaseElements.Field && right instanceof BaseElements.Field) {\n        throw new Futils.ValidationError(`Invalid base filter; fields cannot be compared with other fields ; got string: [${str}]`);\n    }\n    else if (!(left.type === BaseElements.BaseEltTypes.FIELD) && !(right.type === BaseElements.BaseEltTypes.FIELD)) {\n        throw new Futils.ValidationError(`Invalid base filter; every base filter must have at least one field ; got string: [${str}]`);\n    }\n    else if (op instanceof InOperator && !(isCollection(right) || right instanceof BaseElements.RangeLiteral || right instanceof BaseElements.SetLiteral)) {\n        throw new Futils.ValidationError(`Invalid base filter; 'in' operators can only be used with Ranges, Sets, or Fields that correspond to sets like 'p1.picks' ; got string: [${str}]`);\n    }\n    return true;\n}\nclass BaseFilter extends StandardFilter {\n    fnType = FN_TYPES.BASE_FILTER;\n    fnName = FUNCTION_STRS.BASE_FILTER;\n    fmtString;\n    fn;\n    constructor(str, REFS) {\n        super();\n        const tokens = Futils.tokenizeWithNestedEnclosures(str, \" \", 0, true);\n        if (tokens.length !== 3) {\n            throw new Futils.SyntaxException(`Invalid base filter; filters must have 3 tokens and be of the form: ['X', operator, 'Y']; got tokens: [${tokens}] from str: ${str}`);\n        }\n        let [leftStr, opStr, rightStr] = tokens;\n        console.log(`PARSING BASE FILTER: Left: ${leftStr}, Op: ${opStr}, Right: ${rightStr}`);\n        const operator = parseOperator(opStr);\n        const left = BaseElements.parseBaseElement(leftStr, REFS);\n        const right = BaseElements.parseBaseElement(rightStr, REFS);\n        console.log(`PARSED BASE FILTER: Left: ${left.asString()}, Op: ${opStr}, Right: ${right.asString()}`);\n        validateBaseFilterTypes(left, operator, right);\n        if (left instanceof BaseElements.Field && !(right instanceof BaseElements.Field)) {\n            this.fn = (battle) => operator.call(left.extractData(battle), right.getData());\n        }\n        else if (!(left instanceof BaseElements.Field) && right instanceof BaseElements.Field) {\n            this.fn = (battle) => operator.call(left.getData(), right.extractData(battle));\n        }\n        else {\n            throw new Futils.ValidationError(\"Invalid base filter; filters must contain a Field and a Literal; got: \" + str);\n        }\n        this.fmtString = `${left.asString()} ${opStr} ${right.asString()}`;\n    }\n    call(b) {\n        return this.fn(b);\n    }\n    asString(prefix = \"\") {\n        return `${prefix}${this.fmtString}`;\n    }\n}\nconst FN_STR_MAP = {\n    [FUNCTION_STRS.BASE_FILTER]: BaseFilter,\n    [FUNCTION_STRS.AND]: AND,\n    [FUNCTION_STRS.OR]: OR,\n    [FUNCTION_STRS.NOT]: NOT,\n    [FUNCTION_STRS.XOR]: XOR,\n    [FUNCTION_STRS.LAST_N]: LastNFn,\n    [FUNCTION_STRS.EQUIPMENT]: EquipmentFn,\n    [FUNCTION_STRS.ARTIFACT]: ArtifactFn,\n    [FUNCTION_STRS.CR]: CRFn,\n};\nconst FNS = {\n    AND: AND,\n    OR: OR,\n    NOT: NOT,\n    XOR: XOR,\n    LAST_N: LastNFn,\n    EQUIPMENT: EquipmentFn,\n    ARTIFACT: ArtifactFn,\n    CR: CRFn,\n    BASE_FILTER: BaseFilter,\n};\nexport { StandardFilter, GlobalFilter, FNS, FN_STR_MAP, FUNCTION_STRS };\n","import { RangeData } from \"./base-elements\";\nfunction collectionToString(collection) {\n    if (collection instanceof Set) {\n        return Array.from(collection).join(\", \");\n    }\n    else if (collection instanceof RangeData) {\n        return `Range[ start: ${collection.start}, end: ${collection.end}, incl: ${collection.endInclusive} ]`;\n    }\n    else {\n        return collection.join(\", \");\n    }\n}\nconst COMPARISON_OPERATORS = {\n    \">\": (a, b) => a > b,\n    \"<\": (a, b) => a < b,\n    \"=\": (a, b) => a === b,\n    \">=\": (a, b) => a >= b,\n    \"<=\": (a, b) => a <= b,\n    \"!=\": (a, b) => a !== b,\n};\nconst OPERATOR_TYPES = {\n    IN: \"in\",\n    COMPARE: \"compare\",\n};\nclass Operator {\n}\nclass InOperator extends Operator {\n    type = OPERATOR_TYPES.IN;\n    opStr;\n    negate = false;\n    constructor(negate = false) {\n        super();\n        this.negate = negate;\n        this.opStr = this.negate ? \"!in\" : \"in\";\n    }\n    call(a, b) {\n        const contains = Array.isArray(b) ? b.includes(a) : b.has(a);\n        // console.log(`IN OPER: Left: ${a}, Op: ${this.opStr}, Right: ${collectionToString(b)}; Result: ${contains}`);\n        return this.negate ? !contains : contains;\n    }\n}\nclass CompareOperator extends Operator {\n    type = OPERATOR_TYPES.COMPARE;\n    opStr;\n    compareFn;\n    constructor(opStr) {\n        super();\n        this.opStr = opStr;\n        this.compareFn = COMPARISON_OPERATORS[opStr];\n        if (!this.compareFn) {\n            throw new Error(`Unknown operator: ${opStr}`);\n        }\n    }\n    call(a, b) {\n        // console.log(`COMPARE OPER: Left: ${a}, Op: ${this.opStr}, Right: ${b}`);\n        return this.compareFn(a, b);\n    }\n}\nfunction parseOperator(opStr) {\n    switch (opStr) {\n        case \"in\": return new InOperator();\n        case \"!in\": return new InOperator(true);\n        default: return new CompareOperator(opStr);\n    }\n}\nexport { COMPARISON_OPERATORS, parseOperator, Operator, CompareOperator, InOperator };\n","import HeroManager from \"../hero-manager\";\nimport { LEAGUE_MAP, WORLD_CODE_LOWERCASE_TO_CLEAN_STR } from \"../references\";\nimport { EQUIPMENT_LOWERCASE_STRINGS_MAP } from \"./filter-parse-references\";\nimport { RegExps } from \"../regex\";\nexport class StringLiteralParser {\n}\nclass HeroParser extends StringLiteralParser {\n    parse(str, REFS) {\n        return HeroManager.getHeroByName(str, REFS.HeroDicts)?.name ?? null;\n    }\n    parserType = \"Hero\";\n}\nclass LeagueParser extends StringLiteralParser {\n    parse(str) {\n        console.log(`Parsing str: ${str} using map:`, LEAGUE_MAP);\n        return LEAGUE_MAP[str];\n    }\n    parserType = \"League\";\n}\nclass ServerParser extends StringLiteralParser {\n    parse(str) {\n        return WORLD_CODE_LOWERCASE_TO_CLEAN_STR[str];\n    }\n    parserType = \"Server\";\n}\nclass EquipmentParser extends StringLiteralParser {\n    parse(str) {\n        return EQUIPMENT_LOWERCASE_STRINGS_MAP[str.toLowerCase()];\n    }\n    parserType = \"Equipment\";\n}\nclass ArtifactParser extends StringLiteralParser {\n    parse(str, REFS) {\n        return REFS.ARTIFACT_LOWERCASE_STRINGS_MAP[str.toLowerCase()];\n    }\n    parserType = \"Artifact\";\n}\nclass SeasonCodeParser extends StringLiteralParser {\n    parse(str, REFS) {\n        console.log(`Parsing season code: ${str}`);\n        let seasonNum;\n        if (str === \"current-season\") {\n            return REFS.SEASON_DETAILS[0].Code;\n        }\n        else if (str === \"last-season\") {\n            return REFS.SEASON_DETAILS[1].Code;\n        }\n        else if (RegExps.SEASON_LITERAL_RE.test(str)) {\n            console.log(`Parsing season literal: ${str}`);\n            seasonNum = str.split(\"-\").at(-1);\n        }\n        else if (RegExps.SEASON_CODE_LITERAL_RE.test(str)) {\n            console.log(`Parsing season code literal: ${str}`);\n            seasonNum = str.split(\"_ss\").at(-1);\n        }\n        else {\n            return null;\n        }\n        console.log(`Season num: ${seasonNum}`);\n        const seasonNums = REFS.SEASON_DETAILS.map((season) => season.Code.split(\"_\").at(-1));\n        console.log(`Season nums: ${seasonNums}`);\n        return REFS.SEASON_DETAILS.find((season) => season.Code.split(\"_ss\").at(-1) === seasonNum)?.Code;\n    }\n    parserType = \"Season Code\";\n}\nexport function parseStringLiteral(str, REFS, parsers) {\n    for (const parser of parsers) {\n        const parsed = parser.parse(str, REFS);\n        console.log(`Parsed string literal: ${str} with ${parser.parserType} as ${parsed}`);\n        if (parsed)\n            return parsed;\n    }\n    return null;\n}\nexport const STRING_LITERAL_PARSERS = {\n    Hero: new HeroParser(),\n    League: new LeagueParser(),\n    Server: new ServerParser(),\n    Equipment: new EquipmentParser(),\n    Artifact: new ArtifactParser(),\n    Season: new SeasonCodeParser(),\n};\n","import ClientCache from \"../cache-manager.ts\";\nimport { LANGUAGES, PRIMES } from \"./references.ts\";\nimport PYAPI from \"../apis/py-API.js\";\nimport E7API from \"../apis/e7-API.ts\";\nconst FODDER_NAME = \"~Fodder\";\nconst EMPTY_NAME = \"~Empty\";\nfunction getEmptyHero() {\n    return {\n        attribute_cd: \"N/A\",\n        code: \"N/A\",\n        grade: \"N/A\",\n        job_cd: \"N/A\",\n        name: \"N/A\",\n        prime: 1,\n    };\n}\nfunction getEmptyHeroManager() {\n    return {\n        heroes: [],\n        Empty: getEmptyHero(),\n        Fodder: getEmptyHero(),\n        name_lookup: {},\n        code_lookup: {},\n        prime_lookup: {},\n        prime_pair_lookup: {},\n    };\n}\n// This function adds two heroes to the Hero Manager to account for fodder champions and empty picks/prebans\nfunction addNonHeroes(HeroDicts) {\n    const next_index = HeroDicts.heroes.length;\n    const Empty = {\n        attribute_cd: \"N/A\",\n        code: \"N/A\",\n        grade: \"N/A\",\n        job_cd: \"N/A\",\n        name: EMPTY_NAME,\n        prime: 1,\n    };\n    const Fodder = {\n        attribute_cd: \"N/A\",\n        code: \"N/A\",\n        grade: \"2/3\",\n        job_cd: \"N/A\",\n        name: FODDER_NAME,\n        prime: PRIMES[next_index],\n    };\n    HeroDicts.heroes.push(Empty);\n    HeroDicts.heroes.push(Fodder);\n    HeroDicts.Fodder = Fodder;\n    HeroDicts.Empty = Empty;\n    return HeroDicts;\n}\n// add lookup dicts to the hero manager so that we can perform efficient lookups\nfunction addDicts(HeroDicts) {\n    console.log(\"Adding Lookup Dicts\");\n    console.log(\"\\tAdding name lookup\");\n    HeroDicts.name_lookup = HeroDicts.heroes.reduce((acc, hero) => {\n        acc[hero.name.toLowerCase().replace(/\\s+/g, \"\")] = hero;\n        return acc;\n    }, {});\n    console.log(\"\\tAdding prime lookup\");\n    HeroDicts.prime_lookup = HeroDicts.heroes.reduce((acc, hero) => {\n        acc[hero.prime] = hero;\n        return acc;\n    }, {});\n    console.log(\"\\tAdding code lookup\");\n    HeroDicts.code_lookup = HeroDicts.heroes.reduce((acc, hero) => {\n        acc[hero.code] = hero;\n        return acc;\n    }, {});\n    console.log(\"\\tAdding prime pair lookup\");\n    let prime_pair_lookup = HeroDicts.heroes.reduce((acc, hero) => {\n        acc[hero.prime] = hero.name;\n        return acc;\n    }, {});\n    const numKeys = Object.keys(HeroDicts.prime_lookup).length - 1; // subtract 1 since we don't consider Empty hero\n    console.log(\"\\tAdding prime pair lookup; primes to process\", numKeys);\n    for (let i = 0; i < numKeys - 1; i++) {\n        const prime = PRIMES[i];\n        for (let j = i + 1; j < numKeys; j++) {\n            const prime2 = PRIMES[j];\n            const product = prime * prime2;\n            const name1 = HeroDicts.prime_lookup[prime].name;\n            const name2 = HeroDicts.prime_lookup[prime2].name;\n            prime_pair_lookup[product] = [name1, name2].sort().join(\", \");\n        }\n    }\n    //capture case where two fodder heroes\n    prime_pair_lookup[HeroDicts.Fodder.prime * HeroDicts.Fodder.prime] = [\n        HeroDicts.Fodder.name,\n        HeroDicts.Fodder.name,\n    ].join(\", \");\n    //set prime pair lookup dict in HeroDicts and return\n    HeroDicts.prime_pair_lookup = prime_pair_lookup;\n    return HeroDicts;\n}\nlet HeroManager = {\n    getHeroDicts: async function (lang = LANGUAGES.CODES.EN) {\n        const cachedHeroManager = await ClientCache.get(ClientCache.Keys.HERO_MANAGER);\n        if (cachedHeroManager) {\n            return cachedHeroManager;\n        }\n        return this.fetchAndCacheHeroManager(lang);\n    },\n    createHeroManager: function (rawHeroList) {\n        // add prime identifier to each hero so that we can represent a set as a product of primes\n        for (let [index, heroData] of rawHeroList.entries()) {\n            const prime = PRIMES[index];\n            heroData.prime = prime;\n        }\n        let HeroDicts = getEmptyHeroManager();\n        HeroDicts.heroes = rawHeroList;\n        HeroDicts = addNonHeroes(HeroDicts); //should not be called again\n        HeroDicts = addDicts(HeroDicts); // Must come after addNonHeroes so that empty/fodder are added to the dicts\n        return HeroDicts;\n    },\n    fetchHeroManager: async function (lang = LANGUAGES.CODES.EN) {\n        const heroJSON = (await E7API.fetchHeroJSON()) ?? (await PYAPI.fetchHeroData());\n        const heroList = heroJSON[lang]; //get english hero list\n        const HeroDicts = this.createHeroManager(heroList);\n        console.log(`Created HeroManager of language ${lang} using raw data received from server`);\n        return HeroDicts;\n    },\n    fetchAndCacheHeroManager: async function (lang = LANGUAGES.CODES.EN) {\n        console.log(\"HeroManager not found in cache, fetching from server and caching it\");\n        const HeroDicts = await this.fetchHeroManager(lang);\n        await ClientCache.cache(ClientCache.Keys.HERO_MANAGER, HeroDicts);\n        console.log(\"Cached HeroManager using raw data recieved from server\");\n        console.log(HeroDicts);\n        return HeroDicts;\n    },\n    deleteHeroManager: async function () {\n        await ClientCache.delete(ClientCache.Keys.HERO_MANAGER);\n        console.log(\"Removed hero manager from cache\");\n    },\n    getHeroByName: function (name, HeroDicts) {\n        if (!HeroDicts) {\n            throw new Error(\"HeroManager instance must be passed to lookup functions\");\n        }\n        else if (!name) {\n            return HeroDicts.Empty;\n        }\n        const normalizedName = name.toLowerCase().replace(/\\s+/g, \"\");\n        return HeroDicts.name_lookup[normalizedName] ?? null;\n    },\n    getHeroByPrime: function (prime, HeroDicts) {\n        if (!HeroDicts) {\n            throw new Error(\"HeroManager instance must be passed to lookup functions\");\n        }\n        return HeroDicts.prime_lookup[prime] ?? null;\n    },\n    getHeroByCode: function (code, HeroDicts) {\n        if (!HeroDicts) {\n            throw new Error(\"HeroManager instance must be passed to lookup functions\");\n        }\n        else if (!code) {\n            return HeroDicts.Empty;\n        }\n        return HeroDicts.code_lookup[code] ?? null;\n    },\n    getPairNamesByProduct: function (product, HeroDicts) {\n        if (!HeroDicts) {\n            throw new Error(\"HeroManager instance must be passed to lookup functions\");\n        }\n        return HeroDicts.prime_pair_lookup[product];\n    },\n    EMPTY_NAME: EMPTY_NAME,\n    FODDER_NAME: FODDER_NAME,\n};\nexport default HeroManager;\n","import { COLUMNS_MAP } from \"./references\";\nexport const PLOT_REFS = {\n    markerMaxWidth: 16,\n    lineMaxWidth: 8,\n    minMarkerSize: 2,\n    minLineWidth: 1\n};\nfunction logBase(x, base) {\n    return Math.log(x) / Math.log(base);\n}\nconst SCALING = 2.4;\nexport function getSizes(numBattles) {\n    const length = numBattles;\n    const markerSize = Math.max(PLOT_REFS.minMarkerSize, PLOT_REFS.markerMaxWidth - logBase(length, SCALING) * 2);\n    const lineWidth = Math.max(PLOT_REFS.minLineWidth, PLOT_REFS.lineMaxWidth - logBase(length, SCALING));\n    return { markerSize, lineWidth };\n}\nexport function getZoom(battlesList, filteredBattlesList) {\n    const zoom = {\n        startX: null,\n        endX: null,\n        startY: null,\n        endY: null\n    };\n    const zoomYPadding = 50;\n    const zoomXPadding = 0.5;\n    for (const [idx, battle] of battlesList.entries()) {\n        if (battle[\"Seq Num\"] in filteredBattlesList) {\n            zoom.startX = (zoom.startX === null || idx < zoom.startX) ? idx - zoomXPadding : zoom.startX;\n            zoom.startY = (zoom.startY === null || battle[\"P1 Points\"] < zoom.startY + zoomYPadding) ? battle[\"P1 Points\"] - zoomYPadding : zoom.startY;\n            zoom.endX = (zoom.endX === null || idx > zoom.endX) ? idx + zoomXPadding : zoom.endX;\n            zoom.endY = (zoom.endY === null || battle[\"P1 Points\"] > zoom.endY - zoomYPadding) ? battle[\"P1 Points\"] + zoomYPadding : zoom.endY;\n        }\n    }\n    return zoom;\n}\nexport function generateRankPlot(container, battles, user, filteredBattles = null) {\n    // Sort battles chronologically by time\n    battles.sort((a, b) => a[\"Date/Time\"].localeCompare(b[\"Date/Time\"]));\n    // if the user is not passed, default the username to the ID of the player\n    if (!user) {\n        user = { name: `UID: ${battles[0][\"P1 ID\"]}` };\n    }\n    const markerDefaultColor = '#0df8fd';\n    const markerFilteredColor = '#ff9900';\n    const x = battles.map((_, i) => i);\n    const y = battles.map(b => b[\"P1 Points\"]);\n    const markerMask = [];\n    // iterate through battles and build list to color filtered battles distinctly \n    // and determine the area to zoom on if needed\n    for (let [idx, battle] of battles.entries()) {\n        if (filteredBattles && battle[\"Seq Num\"] in filteredBattles) {\n            markerMask.push(markerFilteredColor);\n        }\n        else {\n            markerMask.push(markerDefaultColor);\n        }\n    }\n    ;\n    const customdata = battles.map(b => [\n        b[COLUMNS_MAP.DATE_TIME].slice(0, 10), // date only\n        b[COLUMNS_MAP.SEASON],\n        b[COLUMNS_MAP.P1_LEAGUE],\n    ]);\n    const sizes = getSizes(battles.length);\n    const trace = {\n        x: x,\n        y: y,\n        mode: 'lines+markers',\n        line: {\n            color: '#4f9293',\n            width: sizes.lineWidth\n        },\n        marker: {\n            symbol: 'circle',\n            size: sizes.markerSize,\n            color: markerMask\n        },\n        customdata: customdata,\n        hovertemplate: 'Points: %{y}<br>' +\n            'Date: %{customdata[0]}<br>' +\n            'Season: %{customdata[1]}<br>' +\n            'League: %{customdata[2]}<extra></extra>'\n    };\n    const layout = {\n        autosize: true,\n        font: {\n            family: 'Roboto, Open Sans'\n        },\n        hoverlabel: {\n            bgcolor: \"rgba(0, 0, 0, 0.5)\", // background\n            font: { color: \"white\" },\n            bordercolor: \"rgba(0, 0, 0, 0.5)\"\n        },\n        hovermode: 'x unified',\n        title: {\n            text: `${user.name}'s RTA Point Plot`,\n            font: { size: 24, color: '#dddddd' },\n            xanchor: 'center',\n            yanchor: 'top',\n            y: 0.95,\n            x: 0.5\n        },\n        xaxis: {\n            title: {\n                text: 'Battle Number (Chronological)',\n                font: { size: 18, color: '#dddddd' }\n            },\n            showgrid: true,\n            gridcolor: '#8d8d8d',\n            zeroline: false,\n            tickfont: { size: 12, color: '#dddddd' },\n            range: null\n        },\n        yaxis: {\n            title: {\n                text: 'Victory Points',\n                font: { size: 18, color: '#dddddd' }\n            },\n            showgrid: true,\n            gridcolor: '#8d8d8d',\n            zeroline: true,\n            zerolinecolor: '#dddddd',\n            zerolinewidth: 2,\n            tickfont: { size: 12, color: '#dddddd' },\n            range: null\n        },\n        plot_bgcolor: '#1e222d',\n        paper_bgcolor: '#1e222d'\n    };\n    const config = {\n        responsive: true\n    };\n    let plotDiv;\n    let plotDivExists = true;\n    plotDiv = document.getElementById(\"rank-plot\");\n    if (!plotDiv) {\n        plotDivExists = false;\n        plotDiv = document.createElement(\"div\");\n        plotDiv.id = \"rank-plot\"; // or use a dynamic ID if needed\n        container.appendChild(plotDiv);\n    }\n    plotDiv.style.width = \"100%\";\n    plotDiv.style.height = \"100%\";\n    if (plotDivExists) {\n        console.log(\"updating plot\");\n        // @ts-ignore\n        Plotly.react(plotDiv, [trace], layout, config);\n    }\n    else {\n        console.log(\"creating plot\");\n        // @ts-ignore\n        Plotly.newPlot(plotDiv, [trace], layout, config);\n    }\n    return plotDiv;\n}\n","export const LANGUAGES = {\n    CODES: {\n        DE: \"de\",\n        KO: \"ko\",\n        PT: \"pt\",\n        TH: \"th\",\n        ZH_TW: \"zh-TW\",\n        JA: \"ja\",\n        EN: \"en\",\n        FR: \"fr\",\n        ZH_CN: \"zh-CN\",\n        ES: \"es\",\n    },\n    NAMES: {\n        DE: \"German\",\n        KO: \"Korean\",\n        PT: \"Portuguese\",\n        TH: \"Thai\",\n        ZH_TW: \"Chinese (Traditional, Taiwan)\",\n        JA: \"Japanese\",\n        EN: \"English\",\n        FR: \"French\",\n        ZH_CN: \"Chinese (Simplified, China)\",\n        ES: \"Spanish\",\n    }\n};\nexport const WORLD_CODES = new Set([\n    \"world_kor\",\n    \"world_global\",\n    \"world_jpn\",\n    \"world_asia\",\n    \"world_eu\",\n]);\nexport const WORLD_CODE_ENUM = {\n    GLOBAL: \"world_global\",\n    KOR: \"world_kor\",\n    JPN: \"world_jpn\",\n    ASIA: \"world_asia\",\n    EU: \"world_eu\",\n};\nexport const WORLD_CODE_TO_CLEAN_STR = {\n    [WORLD_CODE_ENUM.GLOBAL]: \"Global\",\n    [WORLD_CODE_ENUM.KOR]: \"Korea\",\n    [WORLD_CODE_ENUM.JPN]: \"Japan\",\n    [WORLD_CODE_ENUM.ASIA]: \"Asia\",\n    [WORLD_CODE_ENUM.EU]: \"Europe\",\n};\nexport const CLEAN_STR_TO_WORLD_CODE = {\n    [WORLD_CODE_TO_CLEAN_STR.world_global]: WORLD_CODE_ENUM.GLOBAL,\n    [WORLD_CODE_TO_CLEAN_STR.world_kor]: WORLD_CODE_ENUM.KOR,\n    [WORLD_CODE_TO_CLEAN_STR.world_jpn]: WORLD_CODE_ENUM.JPN,\n    [WORLD_CODE_TO_CLEAN_STR.world_asia]: WORLD_CODE_ENUM.ASIA,\n    [WORLD_CODE_TO_CLEAN_STR.world_eu]: WORLD_CODE_ENUM.EU,\n};\nexport const WORLD_CODE_LOWERCASE_TO_CLEAN_STR = Object.fromEntries(Object.values(WORLD_CODE_TO_CLEAN_STR).map((v) => [v.toLowerCase(), v]));\nexport const EQUIPMENT_SET_MAP = {\n    set_speed: \"Speed\",\n    set_acc: \"Hit\",\n    set_cri: \"Critical\",\n    set_res: \"Resist\",\n    set_def: \"Defense\",\n    set_att: \"Attack\",\n    set_max_hp: \"Health\",\n    set_cri_dmg: \"Destruction\",\n    set_coop: \"Unity\",\n    set_immune: \"Immunity\",\n    set_rage: \"Rage\",\n    set_vampire: \"Lifesteal\",\n    set_shield: \"Protection\",\n    set_revenge: \"Revenge\",\n    set_penetrate: \"Penetration\",\n    set_torrent: \"Torrent\",\n    set_counter: \"Counter\",\n    set_scar: \"Injury\",\n};\nexport const ONE_DAY_MILLISECONDS = 1000 * 60 * 60 * 24; // milliseconds\nexport const LEAGUE_MAP = {\n    bronze: \"Bronze\",\n    silver: \"Silver\",\n    gold: \"Gold\",\n    master: \"Master\",\n    challenger: \"Challenger\",\n    champion: \"Champion\",\n    warlord: \"Warlord\",\n    emperor: \"Emperor\",\n    legend: \"Legend\",\n};\nexport const COLUMNS_MAP = {\n    SEASON: \"Season\",\n    SEASON_CODE: \"Season Code\",\n    DATE_TIME: \"Date/Time\",\n    SECONDS: \"Seconds\",\n    TURNS: \"Turns\",\n    SEQ_NUM: \"Seq Num\",\n    P1_ID: \"P1 ID\",\n    P1_SERVER: \"P1 Server\",\n    P2_ID: \"P2 ID\",\n    P2_SERVER: \"P2 Server\",\n    P1_LEAGUE: \"P1 League\",\n    P2_LEAGUE: \"P2 League\",\n    P1_POINTS: \"P1 Points\",\n    POINT_GAIN: \"Point Gain\",\n    WIN: \"Win\",\n    FIRST_PICK: \"First Pick\",\n    FIRST_TURN: \"First Turn\",\n    FIRST_TURN_HERO: \"First Turn Hero\",\n    CR_BAR: \"CR Bar\",\n    P1_PREBANS: \"P1 Prebans\",\n    P2_PREBANS: \"P2 Prebans\",\n    P1_PICKS: \"P1 Picks\",\n    P2_PICKS: \"P2 Picks\",\n    P1_POSTBAN: \"P1 Postban\",\n    P2_POSTBAN: \"P2 Postban\",\n    P1_EQUIPMENT: \"P1 Equipment\",\n    P2_EQUIPMENT: \"P2 Equipment\",\n    P1_ARTIFACTS: \"P1 Artifacts\",\n    P2_ARTIFACTS: \"P2 Artifacts\",\n    P1_MVP: \"P1 MVP\",\n    P2_MVP: \"P2 MVP\",\n    P1_PICKS_PRIMES: \"P1 Picks Primes\",\n    P2_PICKS_PRIMES: \"P2 Picks Primes\",\n    P1_PREBANS_PRIMES: \"P1 Prebans Primes\",\n    P2_PREBANS_PRIMES: \"P2 Prebans Primes\",\n};\nexport const CSVHeaders = Object.values(COLUMNS_MAP).filter(h => !h.toLowerCase().includes(\"prime\"));\nexport const ExportColumns = Object.values(COLUMNS_MAP).filter(h => !h.toLowerCase().includes(\"prime\"));\nexport const ARRAY_COLUMNS = [\n    COLUMNS_MAP.P1_EQUIPMENT,\n    COLUMNS_MAP.P2_EQUIPMENT,\n    COLUMNS_MAP.P1_ARTIFACTS,\n    COLUMNS_MAP.P2_ARTIFACTS,\n    COLUMNS_MAP.CR_BAR,\n    COLUMNS_MAP.P1_PREBANS,\n    COLUMNS_MAP.P2_PREBANS,\n    COLUMNS_MAP.P1_PICKS,\n    COLUMNS_MAP.P2_PICKS,\n];\nexport const BOOLS_COLS = [\n    COLUMNS_MAP.FIRST_PICK,\n    COLUMNS_MAP.FIRST_TURN,\n    COLUMNS_MAP.WIN,\n];\nexport const INT_COLUMNS = [\n    COLUMNS_MAP.SECONDS,\n    COLUMNS_MAP.TURNS,\n    COLUMNS_MAP.P1_POINTS,\n    COLUMNS_MAP.POINT_GAIN,\n];\nexport const TITLE_CASE_COLUMNS = [\n    COLUMNS_MAP.P1_LEAGUE,\n    COLUMNS_MAP.P2_LEAGUE,\n];\nexport const HERO_STATS_COLUMN_MAP = {\n    HERO_NAME: \"Hero Name\",\n    BATTLES: \"Battles\",\n    PICK_RATE: \"Pick Rate\",\n    WINS: \"Wins\",\n    WIN_RATE: \"Win rate\",\n    POSTBANS: \"Postbans\",\n    POSTBAN_RATE: \"Postban Rate\",\n    SUCCESS_RATE: \"Success Rate\", // success rate indicates a win or a postban\n    PLUS_MINUS: \"+/-\",\n    POINT_GAIN: \"Point Gain\",\n    AVG_CR: \"Avg CR\",\n    FIRST_TURNS: \"First Turns\",\n    FIRST_TURN_RATE: \"First Turn Rate\",\n};\nexport const E7_STOVE_HOME_URL = \"https://epic7.onstove.com\";\nexport const E7_GG_HOME_URL = E7_STOVE_HOME_URL + \"/gg\";\n/**\n * Generates a list of all prime numbers up to and including the given limit.\n *\n * Uses the Sieve of Eratosthenes algorithm to generate the list.\n *\n * Primes are used to represent as prime identifier allowing us to represent a set as a product of primes\n *\n * @param {number} limit - The upper limit of the prime numbers to generate. Must be a positive integer.\n * @returns {number[]} - A list of all prime numbers up to and including the given limit.\n */\nfunction getPrimes(limit) {\n    const sieve = new Uint8Array(limit + 1);\n    const primes = [];\n    for (let i = 2; i <= limit; i++) {\n        if (!sieve[i]) {\n            primes.push(i);\n            for (let j = i * i; j <= limit; j += i) {\n                sieve[j] = 1;\n            }\n        }\n    }\n    return primes;\n}\nexport const PRIMES = getPrimes(30000);\n","import { FIELD_EXTRACT_FN_MAP } from \"./filter-parsing/field-extract-map\";\n/**\n * Returns a new RegExp object that matches if the input pattern matches the beginning of a string\n * and is followed by either a comma, closing parenthesis, whitespace, or the end of the string.\n *\n * Used for syntax highlighting in CodeMirror\n *\n * @param {RegExp} pattern - Pattern to pad with the above requirements.\n * @param {string} [flags=\"i\"] - Flags to use in the resulting RegExp object. Defaults to case-insensitive matching.\n * @returns {RegExp} A new RegExp object that matches if the input pattern matches the beginning of a string\n *                   and is followed by either a comma, closing parenthesis, whitespace, or the end of the string.\n */\nfunction padRegex(pattern, flags = \"i\") {\n    return new RegExp(`^(?:${pattern.source})(?=[,)\\\\s;]|$)`, flags);\n}\nfunction anchorExp(pattern, flags = \"i\") {\n    return new RegExp(`^(?:${pattern.source})$`, flags);\n}\n/**\n * Combines multiple regex patterns into a single regex that matches any of the given patterns.\n *\n * @param {RegExp[]} patterns - An array of regular expression objects to combine.\n * @param {string} [flags=\"i\"] - The flags for the resulting RegExp object. Defaults to case-insensitive matching.\n * @returns {RegExp} A new RegExp object that matches if any of the supplied patterns match.\n * @throws {Error} If no patterns are provided.\n */\nfunction orRegex(patterns, flags = \"i\") {\n    if (patterns.length < 1)\n        throw new Error(\"orRegex must have at least one pattern\");\n    let regExStr = `(?:${patterns[0].source})`;\n    for (let i = 1; i < patterns.length; i++) {\n        regExStr += `|(?:${patterns[i].source})`;\n    }\n    return new RegExp(regExStr, flags);\n}\nconst escapeRegex = (str) => str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\nconst FIELD_WORDS = Object.keys(FIELD_EXTRACT_FN_MAP);\nconst FIELD_WORD_RE = new RegExp(`^(?:${FIELD_WORDS.map(escapeRegex).join(\"|\")})`, \"i\");\nconst CLAUSE_FUNCTIONS = [\"and\", \"or\", \"xor\", \"not\"];\nconst GLOBAL_FUNCTIONS = [\"last-n\"];\nconst DIRECT_FUNCTIONS = [\n    \"p1.equipment\",\n    \"p2.equipment\",\n    \"p1.artifact\",\n    \"p2.artifact\",\n    \"p1.cr\",\n    \"p2.cr\",\n];\nconst CLAUSE_FUNCTIONS_RE = new RegExp(`(?:${CLAUSE_FUNCTIONS.map(escapeRegex).join(\"|\")})(?=\\\\()`, \"i\");\nconst GLOBAL_FUNCTIONS_RE = new RegExp(`(?:${GLOBAL_FUNCTIONS.map(escapeRegex).join(\"|\")})(?=\\\\()`, \"i\");\nconst DIRECT_FUNCTIONS_RE = new RegExp(`(?:${DIRECT_FUNCTIONS.map(escapeRegex).join(\"|\")})(?=\\\\()`, \"i\");\nconst FUNCTIONS_RE = orRegex([\n    CLAUSE_FUNCTIONS_RE,\n    GLOBAL_FUNCTIONS_RE,\n    DIRECT_FUNCTIONS_RE,\n]);\nconst STRING_RE = /.*/i; // matches any string\nconst DATE_RE = /\\d{4}-\\d{2}-\\d{2}/;\nconst EMPTY_SET_RE = /\\{\\s*\\}/;\nconst INT_RE = /-?\\d+/;\nconst SEASON_RE = /season-[1-9]+[0-9]*f?|current-season|last-season/i;\nconst SEASON_CODE_RE = /pvp_rta_ss[1-9]+[0-9]*f?/i;\nconst GLOBAL_FILTER_RE = /last-n\\(\\d+\\)/i;\nconst DATE_LITERAL_RE = new RegExp(`^${DATE_RE.source}$`, \"i\");\nconst INT_LITERAL_RE = /^-?\\d+$/;\nconst BOOL_LITERAL_RE = /^(true|false)$/i;\nconst DATA_WORD_RE = new RegExp(`(?:${SEASON_RE.source})`, \"i\");\n//consts without RE are used for injecting into regex patterns\nconst STR = STRING_RE.source;\nconst INT = INT_RE.source;\nconst DATE = DATE_RE.source;\nconst FIELD_WORD = FIELD_WORD_RE.source;\nconst DATA_WORD = DATA_WORD_RE.source;\nconst QUOTED_STRING_RE = /\"[^\"]*\"|'[^']*'/i;\nconst STRING_LITERAL_RE = anchorExp(QUOTED_STRING_RE);\nconst QUOTED_STR = QUOTED_STRING_RE.source;\nconst SET_ELEMENT_RE = new RegExp(`(?:${QUOTED_STR}|${STR}|${DATE})`, \"i\");\nconst DATAFIELD_RE = new RegExp(`(?:${FIELD_WORD}|${DATA_WORD})`, \"i\");\nconst SETELT = SET_ELEMENT_RE.source;\nconst SET_RE = new RegExp(`\\\\{\\\\s*(?:${SETELT}\\\\s*)(?:,\\\\s*${SETELT}\\\\s*)*,?\\\\s*\\\\}|${EMPTY_SET_RE.source}`, \"i\");\nconst RANGE_RE = new RegExp(`${INT}\\\\.\\\\.\\\\.=?${INT}|${DATE}\\\\.\\\\.\\\\.=?${DATE}`);\nconst RANGE_LITERAL_RE = new RegExp(`^${RANGE_RE.source}$`);\nconst FUNCTION_CALL_RE = /\\(.*\\)/i;\n// used by CodeMirror for syntax highlighting\nfunction tokenMatchInner(stream) {\n    if (stream.match(FUNCTIONS_RE)) {\n        // console.log(\"Matched stream as clause:\", stream);\n        return \"keyword\";\n    }\n    if (stream.match(/\\s+(?:!=|<|>|=|>=|<=|in|!in)(?=\\s+)/i)) {\n        // console.log(\"Matched stream as operator:\", stream);\n        return \"operator\";\n    }\n    if (stream.match(new RegExp(`[a-z0-9.\"'}=)-]${DATAFIELD_RE.source}(?=[,)\\\\s;]|$)`, \"i\"))) {\n        // console.log(\"Matched stream as field with preceding fragment:\", stream);\n        return null;\n    }\n    if (stream.match(padRegex(FIELD_WORD_RE))) {\n        // console.log(\"Matched stream as Data Field:\", stream);\n        return \"field\";\n    }\n    if (stream.match(padRegex(DATA_WORD_RE))) {\n        // console.log(\"Matched stream as Data Field:\", stream);\n        return \"declared-data\";\n    }\n    if (stream.match(padRegex(QUOTED_STRING_RE))) {\n        // console.log(\"Matched stream as string:\", stream);\n        return \"string\";\n    }\n    if (stream.match(padRegex(SET_RE))) {\n        // console.log(\"Matched stream as set:\", stream);\n        return \"set\";\n    }\n    if (stream.match(padRegex(RANGE_RE))) {\n        // console.log(\"Matched stream as range:\", stream);\n        return \"range\";\n    }\n    if (stream.match(/[^(,\\s;.=0-9\\-]+\\d+/i)) {\n        // console.log(\"Matched stream as non-num null\", stream);\n        return null;\n    }\n    if (stream.match(padRegex(INT_RE))) {\n        // console.log(\"Matched stream as number:\", stream);\n        return \"declared-data\";\n    }\n    if (stream.match(padRegex(DATE_RE))) {\n        // console.log(\"Matched stream as date:\", stream);\n        return \"declared-data\";\n    }\n    if (stream.match(/(?:^|\\s)(?:true|false)(?=[,)\\s;]|$)/i)) {\n        // console.log(\"Matched stream as bool:\", stream);\n        return \"declared-data\";\n    }\n    if (stream.match(/[\\(\\)\\{\\}\\;\\,]/)) {\n        // console.log(\"Matched stream as bracket:\", stream);\n        return \"bracket\";\n    }\n    stream.next();\n    // console.log(\"Matched stream as null:\", stream);\n    return null;\n}\nfunction tokenMatch(stream) {\n    const result = tokenMatchInner(stream);\n    return result;\n}\nlet RegExps = {\n    STRING_RE: STRING_RE,\n    DATE_RE: DATE_RE,\n    INT_RE: INT_RE,\n    EMPTY_SET_RE: EMPTY_SET_RE,\n    SET_ELEMENT_RE: SET_ELEMENT_RE,\n    SET_RE: SET_RE,\n    SET_LITERAL_RE: anchorExp(SET_RE),\n    STRING_LITERAL_RE: STRING_LITERAL_RE,\n    DATE_LITERAL_RE: DATE_LITERAL_RE,\n    INT_LITERAL_RE: INT_LITERAL_RE,\n    BOOL_LITERAL_RE: BOOL_LITERAL_RE,\n    RANGE_RE: RANGE_RE,\n    RANGE_LITERAL_RE: RANGE_LITERAL_RE,\n    SEASON_RE: SEASON_RE,\n    SEASON_LITERAL_RE: anchorExp(SEASON_RE),\n    SEASON_CODE_RE: SEASON_CODE_RE,\n    SEASON_CODE_LITERAL_RE: anchorExp(SEASON_CODE_RE),\n    DATA_WORD_RE: DATA_WORD_RE,\n    DATA_WORD_LITERAL_RE: anchorExp(DATA_WORD_RE),\n    FIELD_WORD_RE: FIELD_WORD_RE,\n    FIELD_WORD_LITERAL_RE: anchorExp(FIELD_WORD_RE),\n    DATAFIELD_RE: DATAFIELD_RE,\n    GLOBAL_FILTER_RE: GLOBAL_FILTER_RE,\n    ANCHORED_STR_LITERAL_RE: anchorExp(STRING_LITERAL_RE),\n    CLAUSE_FUNCTIONS_RE: CLAUSE_FUNCTIONS_RE,\n    DIRECT_FUNCTIONS_RE: DIRECT_FUNCTIONS_RE,\n    GLOBAL_FUNCTIONS_RE: GLOBAL_FUNCTIONS_RE,\n    FUNCTIONS_RE: FUNCTIONS_RE,\n    FUNCTION_CALL_RE: FUNCTION_CALL_RE,\n    padRegex: padRegex,\n    anchorExp: anchorExp,\n    tokenMatch: tokenMatch,\n    orRegex: orRegex,\n    escapeRegex: escapeRegex,\n};\nexport { RegExps };\n","let SavedFilters = {\r\n\r\n    // Filter Name Keys must match the text content in home.html\r\n    \"Current Season\" : \"season = current-season\",\r\n    \"Last Season\" : \"season = last-season\",\r\n    \"First Pick\" : \"is-first-pick = true\",\r\n    \"Second Pick\" : \"is-first-pick = false\",\r\n    \"Champion+ Opponent\" : \"p2.league in {champion, warlord, emperor, legend}\",\r\n    \"Warlord+ Opponent\" : \"p2.league in {warlord, emperor, legend}\",\r\n    \"Emperor+ Opponent\" : \"p2.league in {emperor, legend}\",\r\n    \"Legend Opponent\" : \"p2.league = 'legend'\",\r\n    \"Wins\" : \"is-win = true\",\r\n    \"Losses\" : \"is-win = false\",\r\n\r\n    extendFilters: function(currFilterStr, filterName) {\r\n        const filter = SavedFilters[filterName];\r\n        // trim whitespace only from end of str\r\n        currFilterStr = currFilterStr.replace(/\\s+$/, '');\r\n        if (currFilterStr.slice(-1) !== \";\" && currFilterStr.length > 0) {\r\n            currFilterStr += \";\\n\";\r\n        } else if (currFilterStr.slice(-1) === \";\") {\r\n            currFilterStr += \"\\n\";\r\n        }\r\n        return `${currFilterStr}${filter};`;\r\n    }\r\n}\r\n\r\n\r\nexport default SavedFilters;","import ClientCache from \"../cache-manager.ts\";\nimport PYAPI from \"../apis/py-API.js\";\nimport { COLUMNS_MAP, ONE_DAY_MILLISECONDS } from \"./references.ts\";\nimport { RegExps } from \"./regex.ts\";\nlet SeasonManager = {\n    fetchAndCacheSeasonDetails: async function () {\n        const result = await PYAPI.fetchSeasonDetails();\n        if (result.error) {\n            throw new Error(`Could not fetch season details: ${result.error}`);\n        }\n        const seasonDetails = result.seasonDetails;\n        seasonDetails.forEach((season) => {\n            season.range = [season[\"Start\"], season[\"End\"]].map((d) => new Date(`${d.split(\" \")[0]}T00:00:00`));\n            season[\"Season Number\"] = String(season[\"Season Number\"]);\n        });\n        seasonDetails.sort((a, b) => parseInt(a[\"Season Number\"]) - parseInt(b[\"Season Number\"]));\n        // add pre seasons\n        const preSeasonFilled = [seasonDetails[0]];\n        let lastSeason = seasonDetails[0];\n        seasonDetails.slice(1).forEach((season) => {\n            const [start, end] = [\n                new Date(+lastSeason.range[1] + ONE_DAY_MILLISECONDS),\n                new Date(+season.range[0] - ONE_DAY_MILLISECONDS),\n            ];\n            const seasonNumStr = lastSeason[\"Season Number\"] + \"f\";\n            const preSeason = {\n                \"Season Number\": seasonNumStr,\n                Code: \"pvp_rta_ss\" + seasonNumStr,\n                Season: `Pre ${season[\"Season\"]}`,\n                Start: start.toISOString().slice(0, 10),\n                End: end.toISOString().slice(0, 10),\n                Status: \"Complete\",\n                range: [start, end],\n            };\n            preSeasonFilled.push(preSeason);\n            preSeasonFilled.push(season);\n            lastSeason = season;\n        });\n        // add another pre season if current season is complete\n        if (lastSeason.range[1] < new Date()) {\n            const start = new Date(+lastSeason.range[1] + ONE_DAY_MILLISECONDS);\n            const seasonNumStr = lastSeason[\"Season Number\"] + \"f\";\n            const preSeason = {\n                \"Season Number\": seasonNumStr,\n                Code: \"pvp_rta_ss\" + seasonNumStr,\n                Season: `Active Pre-Season`,\n                Start: start.toISOString().slice(0, 10),\n                End: \"N/A\",\n                Status: \"Active\",\n                range: [start, new Date()],\n            };\n            preSeasonFilled.push(preSeason);\n        }\n        preSeasonFilled.reverse();\n        await ClientCache.cache(ClientCache.Keys.SEASON_DETAILS, preSeasonFilled);\n        return preSeasonFilled;\n    },\n    getSeasonDetails: async function () {\n        console.log(\"Getting season details\");\n        const cached = await ClientCache.get(ClientCache.Keys.SEASON_DETAILS);\n        if (cached) {\n            return cached;\n        }\n        return await SeasonManager.fetchAndCacheSeasonDetails();\n    },\n    clearSeasonDetails: async function () {\n        await ClientCache.delete(ClientCache.Keys.SEASON_DETAILS);\n        console.log(\"Season details cleared from data cache\");\n    },\n    getSeasonNumFromCode: function (seasonCode) {\n        return seasonCode.split(\"_\").at(-1);\n    },\n    reaquireIfNeeded: async function (battle) {\n        const seasonDetails = await SeasonManager.getSeasonDetails();\n        const seasonCodes = new Set(seasonDetails.map((s) => s.Code));\n        battle.forEach((b) => {\n            const seasonCode = b[COLUMNS_MAP.SEASON_CODE];\n            if (!RegExps.SEASON_CODE_LITERAL_RE.test(seasonCode)) {\n                console.error(\"Battle contains invalid season code:\", seasonCode, b);\n            }\n            if (!seasonCodes.has(b[COLUMNS_MAP.SEASON_CODE])) {\n                SeasonManager.fetchAndCacheSeasonDetails();\n                console.log(\"Reacquired season details due to missing season code:\", seasonCode);\n                return;\n            }\n        });\n    },\n};\nexport default SeasonManager;\n","import HeroManager from \"./hero-manager.ts\";\nimport { WORLD_CODE_TO_CLEAN_STR, COLUMNS_MAP, HERO_STATS_COLUMN_MAP, LEAGUE_MAP, } from \"./references.ts\";\nconst getWins = (battleList) => battleList.filter((b) => b[COLUMNS_MAP.WIN]);\nconst getFirstPickSubset = (battleList) => battleList.filter((b) => b[COLUMNS_MAP.FIRST_PICK]);\nconst getSecondPickSubset = (battleList) => battleList.filter((b) => !b[COLUMNS_MAP.FIRST_PICK]);\nconst isIncomplete = (b) => b[COLUMNS_MAP.TURNS] === 0;\nconst NA = \"N/A\";\nfunction toPercent(value) {\n    return (value * 100).toFixed(2) + \"%\";\n}\nfunction divideToPercentString(a, b, zeroIfUndefined = false) {\n    if (b === 0)\n        return zeroIfUndefined ? \"0.00%\" : NA;\n    return toPercent(a / b);\n}\nfunction divideToString(a, b) {\n    if (b === 0)\n        return NA;\n    return (a / b).toFixed(2);\n}\nfunction getCR(battle, heroName) {\n    const entry = battle[COLUMNS_MAP.CR_BAR].find((entry) => entry[0] === heroName);\n    return entry ? entry[1] : null;\n}\nfunction computeCRStats(battleList, heroName) {\n    const notPostbanned = battleList.filter((b) => {\n        const picked = b[COLUMNS_MAP.P1_PICKS].includes(heroName) || b[COLUMNS_MAP.P2_PICKS].includes(heroName);\n        const notBanned = b[COLUMNS_MAP.P1_POSTBAN] !== heroName && b[COLUMNS_MAP.P2_POSTBAN] !== heroName;\n        return picked && notBanned;\n    });\n    let gamesConsidered = notPostbanned.length;\n    let crTotal = 0;\n    let firstTurns = 0;\n    for (const battle of notPostbanned) {\n        const cr = getCR(battle, heroName);\n        if (cr === null)\n            continue;\n        crTotal += cr;\n        firstTurns += +(cr === 100);\n    }\n    const avgCR = divideToPercentString(crTotal / 100, gamesConsidered, true);\n    return {\n        avgCR,\n        firstTurns,\n        firstTurnRate: divideToPercentString(firstTurns, gamesConsidered, true),\n    };\n}\nfunction computeGenericStats(subset, totalBattles) {\n    const wins = getWins(subset).length;\n    const subsetLength = subset.length;\n    const firstTurns = subset.filter((b) => b[COLUMNS_MAP.FIRST_TURN]).length;\n    const firstTurnRate = divideToPercentString(firstTurns, subset.length);\n    const pointGain = subset.reduce((acc, b) => acc + (b[COLUMNS_MAP.POINT_GAIN] || 0), 0);\n    return {\n        wins,\n        subsetLength,\n        frequency: divideToPercentString(subset.length, totalBattles),\n        winRate: divideToPercentString(wins, subset.length),\n        plusMinus: 2 * wins - subsetLength,\n        pointGain: subset.reduce((acc, b) => acc + (b[COLUMNS_MAP.POINT_GAIN] || 0), 0),\n        avgPPG: divideToString(pointGain, subsetLength),\n        firstTurns,\n        firstTurnRate,\n    };\n}\n;\nfunction queryStats(battleList, totalBattles, heroName) {\n    const genericStats = computeGenericStats(battleList, totalBattles);\n    const postBanned = battleList.reduce((acc, b) => acc +\n        +(b[COLUMNS_MAP.P1_POSTBAN] === heroName ||\n            b[COLUMNS_MAP.P2_POSTBAN] === heroName), 0);\n    const successes = battleList.reduce((acc, b) => acc +\n        +(b[COLUMNS_MAP.WIN]\n            || b[COLUMNS_MAP.P1_POSTBAN] === heroName\n            || b[COLUMNS_MAP.P2_POSTBAN] === heroName), 0);\n    const crStats = computeCRStats(battleList, heroName);\n    return {\n        [HERO_STATS_COLUMN_MAP.HERO_NAME]: heroName,\n        [HERO_STATS_COLUMN_MAP.BATTLES]: genericStats.subsetLength,\n        [HERO_STATS_COLUMN_MAP.PICK_RATE]: genericStats.frequency,\n        [HERO_STATS_COLUMN_MAP.WINS]: genericStats.wins,\n        [HERO_STATS_COLUMN_MAP.WIN_RATE]: genericStats.winRate,\n        [HERO_STATS_COLUMN_MAP.POSTBANS]: postBanned,\n        [HERO_STATS_COLUMN_MAP.POSTBAN_RATE]: divideToPercentString(postBanned, genericStats.subsetLength),\n        [HERO_STATS_COLUMN_MAP.SUCCESS_RATE]: divideToPercentString(successes, genericStats.subsetLength),\n        [HERO_STATS_COLUMN_MAP.PLUS_MINUS]: genericStats.plusMinus,\n        [HERO_STATS_COLUMN_MAP.POINT_GAIN]: genericStats.pointGain,\n        [HERO_STATS_COLUMN_MAP.AVG_CR]: crStats.avgCR,\n        [HERO_STATS_COLUMN_MAP.FIRST_TURNS]: crStats.firstTurns,\n        [HERO_STATS_COLUMN_MAP.FIRST_TURN_RATE]: crStats.firstTurnRate,\n    };\n}\nfunction getPrimes(battleList, isP1 = true) {\n    const primeSet = new Set();\n    for (const battle of Object.values(battleList)) {\n        const picks = isP1\n            ? battle[COLUMNS_MAP.P1_PICKS_PRIMES]\n            : battle[COLUMNS_MAP.P2_PICKS_PRIMES];\n        picks.forEach((element) => {\n            primeSet.add(element);\n        });\n    }\n    return primeSet;\n}\nfunction getHeroStats(battleList, HeroDicts) {\n    if (battleList.length === 0) {\n        return { playerHeroStats: [], enemyHeroStats: [] };\n    }\n    const totalBattles = battleList.length;\n    const playerPrimes = getPrimes(battleList, true);\n    const enemyPrimes = getPrimes(battleList, false);\n    const playerHeroStats = [];\n    const enemyHeroStats = [];\n    for (const prime of playerPrimes) {\n        const hero = HeroManager.getHeroByPrime(prime, HeroDicts);\n        if (!hero)\n            continue;\n        const playerSubset = battleList.filter((b) => b[COLUMNS_MAP.P1_PICKS_PRIMES].includes(prime));\n        if (playerSubset.length > 0) {\n            playerHeroStats.push(queryStats(playerSubset, totalBattles, hero.name));\n        }\n    }\n    for (const prime of enemyPrimes) {\n        const hero = HeroManager.getHeroByPrime(prime, HeroDicts);\n        if (!hero)\n            continue;\n        const enemySubset = battleList.filter((b) => b[COLUMNS_MAP.P2_PICKS_PRIMES].includes(prime));\n        if (enemySubset.length > 0) {\n            enemyHeroStats.push(queryStats(enemySubset, totalBattles, hero.name));\n        }\n    }\n    const nameCol = HERO_STATS_COLUMN_MAP.HERO_NAME;\n    return {\n        playerHeroStats: playerHeroStats.sort((b1, b2) => b1[nameCol].localeCompare(b2[nameCol])),\n        enemyHeroStats: enemyHeroStats.sort((b1, b2) => b1[nameCol].localeCompare(b2[nameCol])),\n    };\n}\nfunction getFirstPickStats(battleList, HeroDicts) {\n    battleList = getFirstPickSubset(Object.values(battleList));\n    if (battleList.length === 0) {\n        return [];\n    }\n    const totalBattles = battleList.length;\n    const grouped = {};\n    for (const b of battleList) {\n        if (b[COLUMNS_MAP.P1_PICKS_PRIMES].length === 0)\n            continue; // skip any battle where player didn't get to pick a first unit\n        const hero = b[COLUMNS_MAP.P1_PICKS_PRIMES][0];\n        if (!(hero in grouped))\n            grouped[hero] = { wins: 0, appearances: 0 };\n        grouped[hero].wins += +b[COLUMNS_MAP.WIN];\n        grouped[hero].appearances += 1;\n    }\n    const result = Object.entries(grouped).map(([prime, stats]) => {\n        const name = HeroManager.getHeroByPrime(prime, HeroDicts)?.name ?? HeroManager.EMPTY_NAME;\n        return {\n            hero: name,\n            wins: stats.wins,\n            appearances: stats.appearances,\n            win_rate: toPercent(stats.wins / stats.appearances),\n            appearance_rate: toPercent(stats.appearances / totalBattles),\n            \"+/-\": 2 * stats.wins - stats.appearances,\n        };\n    });\n    result.sort((a, b) => b.appearances - a.appearances);\n    return result;\n}\nfunction getPrebanStats(battleList, HeroDicts) {\n    //console.log(`Got HeroDicts: ${HeroDicts}`);\n    if (battleList.length === 0) {\n        return [];\n    }\n    const product = (numVec) => numVec.reduce((acc, n) => acc * n, 1);\n    const prebanSet = new Set();\n    for (const b of battleList) {\n        const prebans = b[COLUMNS_MAP.P1_PREBANS_PRIMES];\n        if (prebans.length === 0)\n            continue;\n        for (const preban of prebans) {\n            if (preban === HeroDicts.Empty.prime)\n                continue;\n            prebanSet.add(preban);\n        }\n        const prebanProduct = product(prebans);\n        if (prebanProduct !== HeroDicts.Empty.prime)\n            prebanSet.add(prebanProduct);\n    }\n    console.log(\"Got prebanSet:\", prebanSet);\n    const totalBattles = battleList.length;\n    const output = [];\n    for (const preban of prebanSet) {\n        const filtered = battleList.filter((b) => {\n            const prebans = b[COLUMNS_MAP.P1_PREBANS_PRIMES];\n            return prebans.includes(preban) || product(prebans) === preban;\n        });\n        const genericStats = computeGenericStats(filtered, totalBattles);\n        output.push({\n            preban: HeroDicts.prime_pair_lookup[preban],\n            wins: genericStats.wins,\n            appearances: genericStats.subsetLength,\n            appearance_rate: genericStats.frequency,\n            win_rate: genericStats.winRate,\n            \"+/-\": genericStats.plusMinus,\n        });\n    }\n    output.sort((a, b) => b.appearances - a.appearances);\n    console.log(\"Preban Stats:\", output);\n    return output;\n}\nfunction secondsToTimeStr(inputSeconds) {\n    let timeStr;\n    const mins = Math.floor(inputSeconds / 60);\n    const secs = (inputSeconds % 60).toFixed(1);\n    if (mins === 0) {\n        timeStr = `${secs} secs`;\n    }\n    else {\n        timeStr = `${mins} : ${secs}s`;\n    }\n    return timeStr;\n}\nfunction getGeneralStats(battleList) {\n    battleList.sort((b1, b2) => new Date(b1[\"Date/Time\"]).getTime() - new Date(b2[\"Date/Time\"]).getTime());\n    const totalBattles = battleList.length;\n    const totalGain = battleList.reduce((acc, b) => acc + (b[\"Point Gain\"] || 0), 0);\n    const avgPPG = divideToString(totalGain, totalBattles);\n    const totalTurns = battleList.reduce((acc, b) => acc + b[\"Turns\"], 0);\n    const avgTurns = divideToString(totalTurns, totalBattles);\n    const maxTurns = battleList.length > 0 ? Math.max(...battleList.map((b) => b[\"Turns\"])) : 0;\n    const totalSeconds = battleList.reduce((acc, b) => acc + b[\"Seconds\"], 0);\n    const avgSeconds = totalBattles > 0 ? totalSeconds / totalBattles : 0;\n    const maxSeconds = battleList.length > 0\n        ? Math.max(...battleList.map((b) => b[\"Seconds\"]))\n        : 0;\n    let avgTimeStr = secondsToTimeStr(avgSeconds);\n    let maxTimeStr = secondsToTimeStr(maxSeconds);\n    const totalFirstTurnGames = battleList.reduce((acc, b) => acc + +b[\"First Turn\"], 0);\n    // create subsets for first pick and second pick battles\n    const fpBattles = getFirstPickSubset(battleList);\n    const spBattles = getSecondPickSubset(battleList);\n    const fpStats = computeGenericStats(fpBattles, totalBattles);\n    const spStats = computeGenericStats(spBattles, totalBattles);\n    // calculate total win rate\n    const winRate = divideToPercentString(fpStats.wins + spStats.wins, totalBattles);\n    // iterate through battles and calculate longest win/loss streaks\n    let [maxWinStreak, maxLossStreak, winStreak, lossStreak] = [0, 0, 0, 0];\n    for (let b of battleList) {\n        if (b.Win) {\n            winStreak += 1;\n            maxWinStreak = Math.max(maxWinStreak, winStreak);\n            lossStreak = 0;\n        }\n        else {\n            winStreak = 0;\n            lossStreak += 1;\n            maxLossStreak = Math.max(maxLossStreak, lossStreak);\n        }\n    }\n    return {\n        first_pick_count: fpStats.subsetLength,\n        second_pick_count: spStats.subsetLength,\n        first_pick_rate: fpStats.frequency,\n        second_pick_rate: spStats.frequency,\n        first_pick_winrate: fpStats.winRate,\n        second_pick_winrate: spStats.winRate,\n        total_winrate: winRate,\n        total_battles: totalBattles,\n        total_wins: fpStats.wins + spStats.wins,\n        max_win_streak: maxWinStreak,\n        max_loss_streak: maxLossStreak,\n        avg_ppg: avgPPG,\n        avg_turns: avgTurns,\n        avg_time: avgTimeStr,\n        max_turns: maxTurns,\n        max_time: maxTimeStr,\n        first_turn_games: totalFirstTurnGames,\n        first_turn_rate: totalBattles\n            ? toPercent(totalFirstTurnGames / totalBattles)\n            : NA,\n    };\n}\nfunction getPerformanceStats(battlesList) {\n    const perfStatsContainer = {\n        servers: [],\n        leagues: [],\n    };\n    const totalBattles = battlesList.length;\n    const servers = Object.values(WORLD_CODE_TO_CLEAN_STR);\n    const leagues = Object.values(LEAGUE_MAP);\n    const subsetFilters = [\n        ...servers.map((server) => [\n            `Server: ${server}`,\n            (b) => b[\"P2 Server\"] === server,\n        ]),\n        ...leagues.map((league) => [\n            `League: ${league}`,\n            (b) => b[\"P2 League\"] === league,\n        ]),\n    ];\n    for (const [label, subsetFilter] of subsetFilters) {\n        const subset = battlesList.filter(subsetFilter);\n        const count = subset.length;\n        if (count === 0)\n            continue;\n        const subsetStats = computeGenericStats(subset, totalBattles);\n        const firstPickGames = subset.filter((b) => b[COLUMNS_MAP.FIRST_PICK]);\n        const fpWins = firstPickGames.reduce((acc, b) => acc + +b[COLUMNS_MAP.WIN], 0);\n        const secondPickGames = subset.filter((b) => !b[COLUMNS_MAP.FIRST_PICK]);\n        const spWins = secondPickGames.reduce((acc, b) => acc + +b[COLUMNS_MAP.WIN], 0);\n        const targetList = label.toLowerCase().includes(\"server\")\n            ? perfStatsContainer.servers\n            : perfStatsContainer.leagues;\n        targetList.push({\n            label,\n            count,\n            wins: subsetStats.wins,\n            win_rate: subsetStats.winRate,\n            frequency: subsetStats.frequency,\n            \"+/-\": subsetStats.plusMinus,\n            fp_games: firstPickGames.length,\n            sp_games: secondPickGames.length,\n            fp_wr: firstPickGames.length > 0\n                ? toPercent(fpWins / firstPickGames.length)\n                : \"N/A\",\n            sp_wr: secondPickGames.length > 0\n                ? toPercent(spWins / secondPickGames.length)\n                : \"N/A\",\n        });\n    }\n    return [\n        ...perfStatsContainer.servers,\n        ...perfStatsContainer.leagues.slice(-4), // only show highest 4 leagues the player has played against\n    ];\n}\nlet StatsBuilder = {\n    getHeroStats,\n    getFirstPickStats,\n    getPrebanStats,\n    getPerformanceStats,\n    getGeneralStats,\n    computeGenericStats,\n    queryStats,\n    toPercent,\n    divideToPercentString,\n    divideToString,\n    computeCRStats,\n    secondsToTimeStr,\n};\nexport default StatsBuilder;\n","import { WORLD_CODE_TO_CLEAN_STR, WORLD_CODE_ENUM, } from \"./references.ts\";\nimport ClientCache from \"../cache-manager.ts\";\nimport E7API from \"../apis/e7-API.ts\";\nimport PYAPI from \"../apis/py-API.js\";\nconst userMapCacheKeyMap = {\n    [WORLD_CODE_ENUM.GLOBAL]: ClientCache.Keys.GLOBAL_USERS,\n    [WORLD_CODE_ENUM.EU]: ClientCache.Keys.EU_USERS,\n    [WORLD_CODE_ENUM.ASIA]: ClientCache.Keys.ASIA_USERS,\n    [WORLD_CODE_ENUM.JPN]: ClientCache.Keys.JPN_USERS,\n    [WORLD_CODE_ENUM.KOR]: ClientCache.Keys.KOR_USERS,\n};\nexport function validateUserFormat(user) {\n    if (!user) {\n        throw new Error(\"Invalid user; user is null or undefined\");\n    }\n    if (!(\"id\" in user) || typeof user.id !== \"number\") {\n        throw new Error(\"Invalid user; user id does not exist or is not a number\");\n    }\n    if (!(\"name\" in user) || typeof user.name !== \"string\") {\n        throw new Error(\"Invalid user; user name does not exist or is not a string\");\n    }\n    // if (!(\"code\" in user) || (user.code !== null && typeof user.code !== \"string\")) {\n    // \tthrow new Error(\"Invalid user; user code is not a string\");\n    // } if (!(\"rank\" in user) || (user.rank !== null && typeof user.rank !== \"number\")) {\n    // \tthrow new Error(\"Invalid user; user rank is not a number\");\n    // } \n    if (!(\"world_code\" in user) || typeof user.world_code !== \"string\") {\n        throw new Error(\"Invalid user; user.world_code does not exist or is not a string\");\n    }\n    if (!(user.world_code in WORLD_CODE_TO_CLEAN_STR)) {\n        throw new Error(\"Invalid user; user.world_code is not a valid world code\");\n    }\n    return true;\n}\nfunction createUser(userJSON, world_code) {\n    return {\n        id: Number(userJSON.nick_no),\n        name: userJSON.nick_nm,\n        code: userJSON.code || null,\n        rank: Number(userJSON.rank),\n        world_code: world_code,\n    };\n}\nasync function getUserMapFromE7Server(world_code) {\n    console.log(`Getting user map for world code from E7 server: ${world_code}`);\n    const rawUserJSON = await E7API.fetchUserJSON(world_code);\n    if (!rawUserJSON || (typeof rawUserJSON === \"object\" && !(\"users\" in rawUserJSON))) {\n        console.log(`Could not get user map from E7 server for world code: ${world_code}`);\n        return null;\n    }\n    console.log(`Got user map from E7 server for world code: ${world_code}`);\n    const rawUserMap = rawUserJSON;\n    return Object.fromEntries(rawUserMap.users.map((user) => [\n        user.nick_no,\n        createUser(user, world_code),\n    ]));\n}\n/**\n * Gets a user map from the E7 server for the given world code.\n * The user map is a map of user IDs to user objects.\n * If the user map is cached, it will be returned from the cache.\n * Otherwise, it will be fetched from the E7 server and cached.\n * @param {string} world_code - The world code to get the user map for.\n * @returns {Promise<Object.<string, User>>} - The user map for the given world code.\n */\nasync function getUserMap(world_code) {\n    console.log(`Getting user map for world code: ${world_code}`);\n    const cachedUserMap = await ClientCache.get(userMapCacheKeyMap[world_code]);\n    if (cachedUserMap !== null) {\n        console.log(\"Got user map from cache\");\n        return cachedUserMap;\n    }\n    const fetchedUserMap = await getUserMapFromE7Server(world_code);\n    await ClientCache.cache(userMapCacheKeyMap[world_code], fetchedUserMap);\n    return fetchedUserMap;\n}\nconst cleanStr = (world_code) => WORLD_CODE_TO_CLEAN_STR[world_code];\nfunction findUser(userData, users, dataExtractFn) {\n    const user = users.find((user) => dataExtractFn(user) === userData);\n    if (user) {\n        console.log(`Found user: ${JSON.stringify(user)}`);\n        return { user, ok: true };\n    }\n    return { user: null, ok: true };\n}\nasync function findUserClientSide(user, userWorldCode) {\n    const userMap = await getUserMap(userWorldCode);\n    const users = userMap ? Object.values(userMap) : [];\n    if (users.length === 0) {\n        console.log(`User map had no users, falling back to flask server for world code: ${cleanStr(userWorldCode)}`);\n        return { user: null, ok: false };\n    }\n    let userData, dataExtractFn;\n    if (user.id) {\n        userData = user.id;\n        dataExtractFn = (user) => user.id;\n    }\n    else if (user.name) {\n        userData = user.name.toLowerCase();\n        dataExtractFn = (user) => user.name.toLowerCase();\n    }\n    else {\n        throw new Error(\"Must pass a user object with either user.name or user.id to find user\");\n    }\n    return findUser(userData, users, dataExtractFn);\n}\nlet UserManager = {\n    getUserMap: getUserMap,\n    /**\n     * Finds a user in the user map for the given world code using either user ID or name\n     * The world code is required\n     * If the user maps api call fails, will try to find the user by calling flask server\n     *\n     * @param {Object} searchUser - Object with either user ID or name, and world code\n     * @returns {Object} - Found user object\n     * @throws {Error} - If user is not found with given identifier in given world code\n     */\n    findUser: async function (searchUser) {\n        console.log(`Attempting to find user: ${JSON.stringify(searchUser)}`);\n        if (!(searchUser.name || searchUser.id) || !searchUser.world_code) {\n            throw new Error(\"Must pass a user object with either user.name or user.id, and user.world_code to find user\");\n        }\n        let identifier = searchUser.id\n            ? `Numeric ID: ${searchUser.id}`\n            : `Name: '${searchUser.name}'`;\n        let result = null;\n        result = await findUserClientSide(searchUser, searchUser.world_code);\n        // if issue, try to fetch from flask\n        if (!result.ok) {\n            result = await PYAPI.fetchUser(searchUser);\n        }\n        // result should now be guaranteed to be ok otherwise error would have been thrown\n        if (result.ok) {\n            const user = result.user;\n            if (user === null) {\n                throw new Error(`Could not find user with ${identifier} in Server: ${cleanStr(searchUser.world_code)}`);\n            }\n            return user;\n        }\n        throw new Error(`Function did not properly terminate: ${JSON.stringify(result)}`);\n    },\n    setUser: async function (user) {\n        await ClientCache.cache(ClientCache.Keys.USER, user);\n    },\n    getUser: async function () {\n        const user = await ClientCache.get(ClientCache.Keys.USER);\n        await ClientCache.setTimeoutDataNow(ClientCache.Keys.USER);\n        return user;\n    },\n    clearUserData: async function () {\n        await ClientCache.clearUserData();\n    },\n    clearUserDataLists: async function () {\n        await ClientCache.clearUserLists();\n    },\n};\nexport default UserManager;\n","/*\nThis script is used to export the current data selected by user (without filters applied) as a JSON file.\nAdditional data like the user is also exported.\n\nIt also has functions to parse uploaded JSON files back into the original format.\n*/\nimport { ContentManager } from \"./content-manager\";\nimport { COLUMNS_MAP, WORLD_CODE_TO_CLEAN_STR } from \"./e7/references\";\nimport { ExportColumns } from \"./e7/references\";\nimport { validateUserFormat } from \"./e7/user-manager\";\nfunction convertBattlesToExportFormat(battles) {\n    const headers = ExportColumns;\n    const rows = battles.map(battle => ExportColumns.map(key => JSON.stringify(battle[key])));\n    return { headers, rows };\n}\nfunction constructJSON(user, battlesList, filterStr) {\n    const exportData = {\n        user,\n        filterStr,\n        battles: { headers: [], rows: [] },\n    };\n    exportData.battles = convertBattlesToExportFormat(Object.values(battlesList));\n    return exportData;\n}\nfunction downloadExportJSON(filename, data) {\n    const jsonStr = JSON.stringify(data);\n    const blob = new Blob([jsonStr], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = filename.endsWith(\".json\") ? filename : `${filename}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n}\nasync function triggerDownload() {\n    const user = await ContentManager.UserManager.getUser();\n    if (!user) {\n        throw new Error(\"User not found; cannot export data without an active user\");\n    }\n    const stats = await ContentManager.ClientCache.getStats();\n    const filterStr = await ContentManager.ClientCache.getFilterStr() || undefined;\n    const filtersAppliedStr = stats.areFiltersApplied ? \" Filtered\" : \"\";\n    let battlesList = stats.areFiltersApplied ? Object.values(stats.filteredBattlesObj) : stats.battles;\n    battlesList = battlesList || [];\n    const data = await constructJSON(user, battlesList, filterStr);\n    const timestamp = new Date().toISOString().split(\"T\")[0] || \"\";\n    const fileName = `${user.name} (${user.id})${filtersAppliedStr} ${timestamp}`;\n    downloadExportJSON(fileName, data);\n}\nfunction validateUploadedFile(file, extension = \".json\", maxMB = 60) {\n    if (!file.name.endsWith(\".json\")) {\n        throw new Error(\"File must be .json\");\n    }\n    const maxBytes = maxMB * 1024 * 1024;\n    if (file.size > maxBytes) {\n        throw new Error(`File must be smaller than ${maxMB}mb, got ${file.size / (1024 * 1024)}mb File.`);\n    }\n}\nfunction validateUploadedBattles(data) {\n    if (!data || typeof data !== \"object\") {\n        return false;\n    }\n    if (!(\"headers\" in data) || !Array.isArray(data.headers)) {\n        throw new Error(\"Invalid upload: missing headers field\");\n    }\n    if (data.headers.length !== ExportColumns.length) {\n        throw new Error(`Invalid upload: expected ${ExportColumns.length} headers, got ${data.headers.length}`);\n    }\n    for (let i = 0; i < ExportColumns.length; i++) {\n        if (ExportColumns[i] !== data.headers[i]) {\n            throw new Error(`Invalid upload: headers do not match at index ${i}; expected ${ExportColumns[i]}, got ${data.headers[i]}`);\n        }\n    }\n    if (!(\"rows\" in data) || !Array.isArray(data.rows)) {\n        throw new Error(\"Invalid upload: missing rows field or rows is not an array\");\n    }\n    if (data.rows.length === 0) {\n        throw new Error(\"Invalid upload: uploaded data has no battles\");\n    }\n    for (let i = 0; i < data.rows.length; i++) {\n        const row = data.rows[i];\n        if (row.length !== ExportColumns.length) {\n            throw new Error(`Invalid upload: expected ${ExportColumns.length} columns per row, got ${row.length} at index ${i}`);\n        }\n    }\n    return true;\n}\nfunction validateFileContent(data) {\n    if (!data || typeof data !== \"object\") {\n        throw new Error(\"Invalid upload: data is null, undefined, or not an object\");\n    }\n    if (!(\"user\" in data)) {\n        throw new Error(\"Invalid upload: missing 'user' field\");\n    }\n    validateUserFormat(data.user);\n    if (!(\"battles\" in data)) {\n        throw new Error(\"Invalid upload: missing 'battles' field\");\n    }\n    validateUploadedBattles(data.battles);\n    return true;\n}\nasync function parseJSON(file) {\n    validateUploadedFile(file);\n    const jsonStr = await file.text();\n    const data = JSON.parse(jsonStr);\n    console.log(\"Parsed JSON:\", data);\n    validateFileContent(data);\n    return data;\n}\nfunction validateRawBattles(rawBattles) {\n    const p1IdSet = new Set(rawBattles.map(battle => battle[COLUMNS_MAP.P1_ID]));\n    const p1ServerSet = new Set(rawBattles.map(battle => battle[COLUMNS_MAP.P1_SERVER]));\n    if (p1IdSet.size !== 1) {\n        throw new Error(`Invalid upload: Multiple P1 IDs found in upload: {${Array.from(p1IdSet).join(\", \")}}`);\n    }\n    if (p1ServerSet.size !== 1) {\n        throw new Error(`Invalid upload: Multiple P1 Servers found in upload: {${Array.from(p1ServerSet).join(\", \")}}`);\n    }\n    const server = p1ServerSet.values().next().value?.replace(/\"|'/g, \"\");\n    if (!server || !Object.values(WORLD_CODE_TO_CLEAN_STR).includes(server)) {\n        throw new Error(`Invalid upload: Invalid P1 Server found in upload: '${server}'`);\n    }\n    return true;\n}\nfunction restructureParsedUploadBattles(battles) {\n    const rawBattlesList = [];\n    for (const battle of battles.rows) {\n        const battleObj = {};\n        ExportColumns.forEach((header, i) => {\n            battleObj[header] = battle[i];\n        });\n        rawBattlesList.push(battleObj);\n    }\n    validateRawBattles(rawBattlesList);\n    return rawBattlesList;\n}\nexport const ExportImportFns = {\n    triggerDownload,\n    parseJSON,\n    restructureParsedUploadBattles\n};\n","export const Safe = {\n    unwrapHtmlElt: function (eltID) {\n        const elt = document.getElementById(eltID);\n        if (elt === null) {\n            throw new Error(`Could not find element with ID ${eltID}`);\n        }\n        return elt;\n    },\n    setText: function (eltID, text) {\n        const elt = this.unwrapHtmlElt(eltID);\n        elt.textContent = text;\n    },\n};\n","import { ContentManager } from \"./content-manager\";\nconst LangManager = {\n    changeLang: async function (lang) {\n        await ContentManager.ClientCache.setLang(lang);\n        await ContentManager.HeroManager.fetchAndCacheHeroManager(lang);\n        window.location.reload();\n    },\n    getLang: async function () {\n        return await ContentManager.ClientCache.getLang();\n    },\n};\nexport { LangManager };\n","import { TableConstructor } from \"../html-constructor/html-constructor.ts\";\r\nimport DOC_ELEMENTS from \"../page-utilities/doc-element-references.ts\";\r\nimport { COLUMNS_MAP } from \"../../e7/references.ts\";\r\n\r\nconst HERO_TBL_COLS = [\r\n\t\"Hero Name\",\r\n\t\"Battles\",\r\n\t\"Pick Rate\",\r\n\t\"Wins\",\r\n\t\"Win Rate\",\r\n\t\"Postban Rate\",\r\n\t\"Success Rate\",\r\n\t\"+/-\",\r\n\t\"Point Gain\",\r\n\t\"Avg CR\",\r\n\t\"First Turn Rate\",\r\n];\r\n\r\nlet TO_BUILD = [\r\n\t{\r\n\t\ttbl: DOC_ELEMENTS.HOME_PAGE.SEASON_DETAILS_TBL,\r\n\t\tcols: [\"\", \"Season\", \"Start\", \"End\", \"Status\"],\r\n\t},\r\n\t{\r\n\t\ttbl: DOC_ELEMENTS.HOME_PAGE.PERFORMANCE_STATS_TBL,\r\n\t\tcols: [\"\", \"Battles\", \"Freq\", \"Wins\", \"Win Rate\", \"+/-\", \"FP WR\", \"SP WR\"],\r\n\t},\r\n\t{\r\n\t\ttbl: DOC_ELEMENTS.HOME_PAGE.FIRST_PICK_STATS_TBL,\r\n\t\tcols: [\"Hero\", \"Battles\", \"Pick Rate\", \"Win Rate\", \"+/-\"],\r\n\t},\r\n\t{\r\n\t\ttbl: DOC_ELEMENTS.HOME_PAGE.PREBAN_STATS_TBL,\r\n\t\tcols: [\"Preban\", \"Battles\", \"Ban Rate\", \"Win Rate\", \"+/-\"],\r\n\t},\r\n\t{\r\n\t\ttbl: DOC_ELEMENTS.HOME_PAGE.PLAYER_TBL,\r\n\t\tcols: HERO_TBL_COLS,\r\n\t},\r\n\t{\r\n\t\ttbl: DOC_ELEMENTS.HOME_PAGE.OPPONENT_TBL,\r\n\t\tcols: HERO_TBL_COLS.filter((col) => !col.toLowerCase().includes(\"success\")),\r\n\t},\r\n\t{\r\n\t\ttbl: DOC_ELEMENTS.HOME_PAGE.BATTLES_TBL,\r\n\t\tcols: Object.values(COLUMNS_MAP).filter(\r\n\t\t\t(col) => !col.toLowerCase().includes(\"prime\")\r\n\t\t),\r\n\t},\r\n];\r\n\r\nfunction buildTable(tableElt, cols) {\r\n\tconst id = tableElt.id;\r\n\tconst constructor = new TableConstructor(\r\n\t\ttableElt,\r\n\t\tid + \"-head\",\r\n\t\tid + \"-body\"\r\n\t);\r\n\tconstructor.addColumns(cols);\r\n}\r\n\r\nconst HERO_INFO_TO_BUILD = [\r\n\t{\r\n\t\ttblID: DOC_ELEMENTS.HOME_PAGE.IDS.HERO_PLAYER_TBL,\r\n\t\tcols: HERO_TBL_COLS,\r\n\t},\r\n\t{\r\n\t\ttblID: DOC_ELEMENTS.HOME_PAGE.IDS.HERO_OPPONENT_TBL,\r\n\t\tcols: HERO_TBL_COLS.filter((col) => !col.toLowerCase().includes(\"success\")),\r\n\t},\r\n];\r\n\r\nexport function heroInfoBuildTables() {\r\n\tHERO_INFO_TO_BUILD.forEach((entry) => {\r\n\t\tconst tableElt = DOC_ELEMENTS.HOME_PAGE.getElt(entry.tblID);\r\n\t\tbuildTable(tableElt, entry.cols);\r\n\t});\r\n}\r\n\r\nexport function buildTables() {\r\n\tTO_BUILD.forEach((entry) => {\r\n\t\tbuildTable(entry.tbl, entry.cols);\r\n\t});\r\n}\r\n","// Reference for context flags that are used within single pages to communicate accross vies for the page\nimport { HOME_PAGE_STATES } from \"../page-utilities/page-state-references.ts\";\nconst SOURCE_CONTEXT_VALUES = {\n    QUERY: \"query\",\n    UPLOAD: \"upload\",\n    STATS: \"stats\",\n};\nconst CONTEXT_VALUES = {\n    SOURCE: SOURCE_CONTEXT_VALUES,\n};\nconst scrollZero = Object.fromEntries(Object.values(HOME_PAGE_STATES).map((state) => [state, 0]));\nconst SCROLL_PERCENTS = {\n    ...scrollZero,\n    toString: function () {\n        return JSON.stringify(this, null, 2);\n    },\n};\nconst CONTEXT_KEYS = {\n    SOURCE: \"SOURCE\",\n    AUTO_ZOOM: \"AUTO_ZOOM\",\n    AUTO_QUERY: \"AUTO_QUERY\",\n    STATS_POST_RENDER_COMPLETED: \"STATS_POST_RENDER_COMPLETED\",\n    STATS_PRE_RENDER_COMPLETED: \"STATS_PRE_RENDER_COMPLETED\",\n    SCROLL_PERCENTS: \"SCROLL_PERCENTS\",\n    CODE_MIRROR_EDITOR: \"CODE_MIRROR_EDITOR\",\n    TRY_SET_USER: \"TRY_SET_USER\",\n    IGNORE_RELAYOUT: \"IGNORE_RELAYOUT\",\n    IS_FIRST_RENDER: \"IS_FIRST_RENDER\",\n};\nfunction _getDefault(key) {\n    switch (key) {\n        case CONTEXT_KEYS.AUTO_ZOOM:\n            return false;\n        case CONTEXT_KEYS.SOURCE:\n            return null;\n        case CONTEXT_KEYS.AUTO_QUERY:\n            return null;\n        case CONTEXT_KEYS.STATS_POST_RENDER_COMPLETED:\n            return false;\n        case CONTEXT_KEYS.STATS_PRE_RENDER_COMPLETED:\n            return false;\n        case CONTEXT_KEYS.SCROLL_PERCENTS:\n            return SCROLL_PERCENTS;\n        case CONTEXT_KEYS.CODE_MIRROR_EDITOR:\n            return null;\n        case CONTEXT_KEYS.TRY_SET_USER:\n            return null;\n        case CONTEXT_KEYS.IGNORE_RELAYOUT:\n            return false;\n        case CONTEXT_KEYS.IS_FIRST_RENDER:\n            return false;\n        default:\n            console.error(`No default value for key: ${key}`);\n            return null;\n    }\n}\nconst DEFAULTS = Object.fromEntries(Object.entries(CONTEXT_KEYS).map(([key]) => [key, _getDefault(key)]));\nfunction getContext() {\n    const CONTEXT = {\n        KEYS: CONTEXT_KEYS,\n        VALUES: CONTEXT_VALUES,\n        ...DEFAULTS,\n        popKey: function (key) {\n            const value = this[key];\n            this[key] = _getDefault(key);\n            return value;\n        },\n        readKey: function (key) {\n            return this[key];\n        },\n        toString() {\n            let str = \"CONTEXT:\\n\";\n            for (const key in CONTEXT_KEYS) {\n                const typedkey = key;\n                str += `\\t${key}: ${this[typedkey]}\\n`;\n            }\n            return str;\n        }\n    };\n    console.log(\"INITIALIZED CONTEXT: \", CONTEXT.toString());\n    return CONTEXT;\n}\nconst CONTEXT = getContext();\nexport { CONTEXT };\n","import { HomePageStateManager } from \"../orchestration/page-state-manager.ts\";\r\nimport { NavBarUtils } from \"../page-utilities/nav-bar-utils.ts\";\r\nimport { TextUtils } from \"../orchestration/text-controller.js\";\r\nimport { CONTEXT } from \"./home-page-context.ts\";\r\nimport DOC_ELEMENTS from \"../page-utilities/doc-element-references.ts\";\r\nimport UserManager from \"../../e7/user-manager.ts\";\r\nimport { resizeRankPlot } from \"./page-views/home-page/stats/stats-logic.js\";\r\nimport { HOME_PAGE_STATES } from \"../page-utilities/page-state-references.ts\";\r\n\r\nfunction addNavListener(stateDispatcher) {\r\n\tdocument.querySelectorAll(\".nav-link\").forEach((link) => {\r\n\t\tlink.addEventListener(\"click\", async function (event) {\r\n\t\t\tconst navType = this.dataset.nav;\r\n\t\t\tconsole.log(\"Clicked nav item:\", navType);\r\n\t\t\tconst currentState = await HomePageStateManager.getState();\r\n\t\t\tif (Object.values(HOME_PAGE_STATES).includes(navType)) {\r\n\t\t\t\tif (currentState === navType) {\r\n\t\t\t\t\tconsole.log(`Already in state: ${currentState} ; returning`);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (navType === HOME_PAGE_STATES.SELECT_DATA) {\r\n\t\t\t\t\tstateDispatcher(HOME_PAGE_STATES.SELECT_DATA);\r\n\t\t\t\t} else if (navType === HOME_PAGE_STATES.HERO_INFO) {\r\n\t\t\t\t\tstateDispatcher(HOME_PAGE_STATES.HERO_INFO);\r\n\t\t\t\t} else if (navType === HOME_PAGE_STATES.SHOW_STATS) {\r\n\t\t\t\t\tconst user = await UserManager.getUser();\r\n\r\n\t\t\t\t\t// Stats will not show if there is no active user ; will redirect to select data view with error\r\n\t\t\t\t\tif (!user) {\r\n\t\t\t\t\t\tTextUtils.queueSelectDataMsgRed(\r\n\t\t\t\t\t\t\t\"User not found; Must either query a valid user or upload battles to view hero stats\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tstateDispatcher(HOME_PAGE_STATES.SELECT_DATA, CONTEXT);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tstateDispatcher(HOME_PAGE_STATES.SHOW_STATS, CONTEXT);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Default behavior continues as normal\r\n\t\t\t\tconsole.log(`Navigating to: ${this.href}`);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction addClearDataBtnListener() {\r\n\tDOC_ELEMENTS.NAV_BAR.CLEAR_DATA_BTN.addEventListener(\r\n\t\t\"click\",\r\n\t\tasync function (_event) {\r\n\t\t\tconst user = await UserManager.getUser();\r\n\t\t\tif (user) {\r\n\t\t\t\tawait NavBarUtils.eraseUserFromPage();\r\n\t\t\t\tTextUtils.queueSelectDataMsgGreen(\r\n\t\t\t\t\t`Cleared data of user ${user.name} (${user.id})`\r\n\t\t\t\t);\r\n\t\t\t\tawait stateDispatcher(HOME_PAGE_STATES.SELECT_DATA);\r\n\t\t\t\tCONTEXT.SCROLL_PERCENTS[HOME_PAGE_STATES.SHOW_STATS] = 0; // reset scroll position of show stats page when user data cleared\r\n\t\t\t} else {\r\n\t\t\t\tTextUtils.queueSelectDataMsgGreen(\"Data already cleared\");\r\n\t\t\t\tawait stateDispatcher(HOME_PAGE_STATES.SELECT_DATA);\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n}\r\n\r\nfunction addSideBarHideListener() {\r\n\tDOC_ELEMENTS.NAV_BAR.SIDEBAR_HIDE_BTN.addEventListener(\r\n\t\t\"click\",\r\n\t\tfunction (_event) {\r\n\t\t\tconsole.log(\"Triggered sidebar listener\");\r\n\t\t\tresizeRankPlot();\r\n\t\t}\r\n\t);\r\n}\r\n\r\nfunction addSideBarListener() {\r\n\tDOC_ELEMENTS.NAV_BAR.SIDEBAR_CONTROL.addEventListener(\r\n\t\t\"click\",\r\n\t\tfunction (_event) {\r\n\t\t\tconsole.log(\"Triggered sidebar listener\");\r\n\t\t\tresizeRankPlot();\r\n\t\t}\r\n\t);\r\n}\r\n\r\nexport function addHomePageListeners(dispatch) {\r\n\taddNavListener(dispatch);\r\n\taddClearDataBtnListener();\r\n\taddSideBarHideListener();\r\n\taddSideBarListener();\r\n}\r\n","import { HeroInfoView } from \"./page-views/home-page/hero-info/hero-info-logic\";\nimport { LoadDataView } from \"./page-views/home-page/load-data/load-data-logic\";\nimport { StatsView } from \"./page-views/home-page/stats/stats-logic\";\nimport { SelectDataView } from \"./page-views/home-page/select-data/select-data-logic\";\nexport const HOME_PAGE_VIEWS = [\n    HeroInfoView,\n    LoadDataView,\n    SelectDataView,\n    StatsView,\n];\n","import { HomePageStateManager, } from \"../orchestration/page-state-manager.ts\";\nimport { HOME_PAGE_STATES } from \"../page-utilities/page-state-references.ts\";\nimport { NavBarUtils } from \"../page-utilities/nav-bar-utils.ts\";\nimport { TextController, TextUtils } from \"../orchestration/text-controller.js\";\nimport { CONTEXT } from \"./home-page-context.ts\";\nimport PageUtils from \"../page-utilities/page-utils.js\";\nimport DOC_ELEMENTS from \"../page-utilities/doc-element-references.ts\";\nimport IPM from \"../orchestration/inter-page-manager.ts\";\nimport UserManager from \"../../e7/user-manager.ts\";\nimport { addHomePageListeners } from \"./home-page-listeners.js\";\nimport { buildTables } from \"./home-page-build-tables.js\";\nimport { LangManager } from \"../../lang-manager.ts\";\nimport { PageOrchestration } from \"../orchestration/page-orchestration-template.ts\";\nimport { HOME_PAGE_VIEWS } from \"./home-page-views.ts\";\n/**\n * Handles actions sent from other pages to this page.\n * @param {Action} action - one of the actions defined in IPM.ACTIONS\n * @returns {Promise<boolean>} - true if the action caused a state dispatch to occur (we will skip the state dispatcher later if this is true)\n */\nasync function handleAction(actionObj) {\n    const action = actionObj.action;\n    let message = actionObj.message;\n    switch (action) {\n        case IPM.ACTIONS.CLEAR_USER:\n            const user = await UserManager.getUser();\n            if (!user)\n                break;\n            await NavBarUtils.eraseUserFromPage();\n            TextUtils.queueSelectDataMsgGreen(`Cleared data of user ${user.name} (${user.id})`);\n            HomePageStateManager.setState(HOME_PAGE_STATES.SELECT_DATA);\n            break;\n        case IPM.ACTIONS.SHOW_DATA_ALREADY_CLEARED_MSG:\n            TextUtils.queueSelectDataMsgGreen(\"Data already cleared\");\n            break;\n        case IPM.ACTIONS.SHOW_NO_USER_MSG:\n            message =\n                actionObj.message || \"Cannot perform action; no active user found.\";\n            TextUtils.queueSelectDataMsgRed(message);\n            break;\n        case IPM.ACTIONS.QUERY_USER:\n            CONTEXT.AUTO_QUERY = true;\n            HomePageStateManager.setState(HOME_PAGE_STATES.LOAD_DATA);\n            break;\n        default:\n            console.error(`Invalid action: ${action}`);\n            break;\n    }\n}\nasync function processIPMState() {\n    const ipmState = await IPM.flushState();\n    for (const actionObj of ipmState.actions) {\n        await handleAction(actionObj);\n    }\n}\nconst WRAPPER_LOGIC = {\n    preInitialize: async (dispatch) => {\n        addHomePageListeners(dispatch);\n        buildTables();\n    },\n    postInitialize: async () => {\n        const user = await UserManager.getUser();\n        console.log(\"GOT USER\", user);\n        const lang = await LangManager.getLang();\n        NavBarUtils.writeUserInfo(user, lang);\n        NavBarUtils.addExportDataBtnListener();\n        NavBarUtils.addBraceButtonListeners();\n        TextController.bindAutoClear(DOC_ELEMENTS.HOME_PAGE.MESSAGE_ELEMENTS_LIST);\n        let state = await HomePageStateManager.getState();\n        if (state === HOME_PAGE_STATES.LOAD_DATA) {\n            state = HOME_PAGE_STATES.SELECT_DATA; // don't trap user in load data page if something goes wrong\n            await NavBarUtils.eraseUserFromPage();\n            await HomePageStateManager.setState(state);\n        }\n        await processIPMState();\n    },\n    preDispatch: async (state) => {\n        console.log(`Switching to state: ${state}, with CONTEXT: `, CONTEXT.toString());\n        let currentState = await HomePageStateManager.getState();\n        CONTEXT.SCROLL_PERCENTS[currentState] = PageUtils.getScrollPercent();\n        TextController.clearMessages();\n        TextController.processQueue();\n        await HomePageStateManager.setState(state);\n    },\n    postDispatch: async (state) => {\n        let scrollPercent = CONTEXT.SCROLL_PERCENTS[state];\n        setTimeout(() => {\n            PageUtils.setScrollPercent(scrollPercent);\n        }, 0);\n        CONTEXT.IS_FIRST_RENDER = false;\n    },\n};\nconst orchestration = new PageOrchestration(WRAPPER_LOGIC, HOME_PAGE_VIEWS);\nexport async function main() {\n    document.addEventListener(\"DOMContentLoaded\", async () => {\n        await orchestration.initialize();\n        const state = await HomePageStateManager.getState();\n        await orchestration.dispatch(state);\n    });\n}\nawait main();\n","import { ContentManager } from \"../../../../../content-manager\";\nimport { COLUMNS_MAP } from \"../../../../../e7/references\";\nimport StatsBuilder from \"../../../../../e7/stats-builder\";\nimport { Tables } from \"../../../../../populate-content\";\nimport { TextController } from \"../../../../orchestration/text-controller\";\nimport DOC_ELEMENTS from \"../../../../page-utilities/doc-element-references\";\nimport PageUtils from \"../../../../page-utilities/page-utils\";\nconst searchInput = DOC_ELEMENTS.HOME_PAGE.SEARCH_INPUT;\nconst dropdown = DOC_ELEMENTS.HOME_PAGE.HERO_SEARCH_OPTIONS;\nconst defaultContent = DOC_ELEMENTS.HOME_PAGE.getElt(DOC_ELEMENTS.HOME_PAGE.IDS.HERO_DEFAULT_CONTENT);\nfunction filterPicks({ battles, heroName, isP1 }) {\n    const pickCol = isP1 ? COLUMNS_MAP.P1_PICKS : COLUMNS_MAP.P2_PICKS;\n    return battles.filter((b) => {\n        return b[pickCol].includes(heroName);\n    });\n}\nasync function chooseHero(heroName) {\n    searchInput.value = heroName;\n    searchInput.textContent = heroName;\n    dropdown.classList.remove('show');\n    PageUtils.setVisibility(defaultContent, false);\n    const battles = await ContentManager.ClientCache.getStats().then(stats => Object.values(stats ? stats.filteredBattlesObj : {}));\n    const subset = filterPicks({ battles, heroName, isP1: true });\n    const selectedHeroStats = StatsBuilder.queryStats(subset, battles.length, heroName);\n    TextController.writeStrFromID(selectedHeroStats[\"Pick Rate\"], 'pick-rate-value', [TextController.STYLES.E_BLUE]);\n    TextController.writeStrFromID(selectedHeroStats[\"Win rate\"], 'win-rate-value', [TextController.STYLES.E_BLUE]);\n    TextController.writeStrFromID(selectedHeroStats[\"Postban Rate\"], 'postban-rate-value', [TextController.STYLES.E_BLUE]);\n    const heroDicts = await ContentManager.HeroManager.getHeroDicts();\n    const heroStats = StatsBuilder.getHeroStats(subset, heroDicts);\n    Tables.populateHeroStatsTable(DOC_ELEMENTS.HOME_PAGE.IDS.HERO_PLAYER_TBL, heroStats.playerHeroStats);\n    Tables.populateHeroStatsTable(DOC_ELEMENTS.HOME_PAGE.IDS.HERO_OPPONENT_TBL, heroStats.enemyHeroStats);\n    TextController.writeStrFromID(`${heroName}`, 'selected-hero-value', [TextController.STYLES.E_BLUE]);\n    TextController.writeStrFromID(`${subset.length}`, 'battles-picked-value', [TextController.STYLES.E_BLUE]);\n    const contentContainer = DOC_ELEMENTS.HOME_PAGE.getElt(DOC_ELEMENTS.HOME_PAGE.IDS.HERO_INFO_CONTENT);\n    PageUtils.setVisibility(contentContainer, true);\n}\nfunction addHeroSelectListeners() {\n    // show dropdown when search input is clicked\n    searchInput.addEventListener('click', function (event) {\n        event.stopPropagation();\n        console.log(\"clicked\");\n        searchInput.value = \"\";\n        searchInput.textContent = \"\";\n        dropdown.classList.add('show');\n    });\n    // hide dropdown when clicked outside\n    document.addEventListener('click', function (event) {\n        const target = event.target;\n        console.log(\"unclicked\");\n        if (!searchInput.contains(target) && !dropdown.contains(target)) {\n            dropdown.classList.remove('show');\n        }\n    });\n    // filter options based on search term\n    searchInput.addEventListener('input', function () {\n        const searchTerm = this.value.toLowerCase();\n        const options = document.querySelectorAll('.option-list .option');\n        options.forEach((option) => {\n            if (option.textContent.toLowerCase().includes(searchTerm)) {\n                option.style.display = 'block';\n            }\n            else {\n                option.style.display = 'none';\n            }\n        });\n    });\n    // select option when clicked\n    document.querySelectorAll('.option-list .option').forEach(option => {\n        option.addEventListener('click', async function () {\n            await chooseHero(option.textContent);\n        });\n    });\n}\nfunction addHeroInfoListeners() {\n    addHeroSelectListeners();\n}\nexport { addHeroInfoListeners };\n","import { ContentManager } from \"../../../../../content-manager\";\nimport { Safe } from \"../../../../../html-safe\";\nimport { HOME_PAGE_FNS } from \"../../../../orchestration/page-state-manager\";\nimport { TextController, TextPacket } from \"../../../../orchestration/text-controller\";\nimport DOC_ELEMENTS from \"../../../../page-utilities/doc-element-references\";\nimport { HOME_PAGE_STATES } from \"../../../../page-utilities/page-state-references\";\nimport PageUtils from \"../../../../page-utilities/page-utils\";\nimport { heroInfoBuildTables } from \"../../../home-page-build-tables\";\nimport { addHeroInfoListeners } from \"./hero-info-listeners\";\nasync function populateOptionList() {\n    const optionList = Safe.unwrapHtmlElt('hero-option-list');\n    const heroes = await ContentManager.HeroManager.getHeroDicts();\n    let options = new Set(heroes.heroes\n        .filter(hero => hero.name !== heroes.Empty.name && hero.name !== heroes.Fodder.name)\n        .map(hero => hero.name)\n        .sort((a, b) => a.localeCompare(b)));\n    options.forEach(heroName => {\n        const option = document.createElement('div');\n        option.classList.add('option');\n        option.textContent = heroName;\n        option.dataset.value = heroName;\n        optionList.appendChild(option);\n    });\n}\nasync function setDefaultText() {\n    const user = await ContentManager.UserManager.getUser();\n    const stats = await ContentManager.ClientCache.getStats();\n    const defaultText = Safe.unwrapHtmlElt('default-text');\n    if (!user) {\n        TextController.write(new TextPacket(\"No data loaded: Query or Upload data on the 'Select Data' page to view hero information.\", defaultText, [TextController.STYLES.RED]));\n    }\n    else {\n        TextController.write(new TextPacket(\"Use the search and dropdown menu to select a hero and view statistics.\", defaultText, []));\n    }\n    const filtersAppliedElt = Safe.unwrapHtmlElt('filters-applied');\n    const numBattlesElt = Safe.unwrapHtmlElt('num-battles');\n    if (stats) {\n        const numFilters = stats.numFilters;\n        const numBattles = Object.values(stats.filteredBattlesObj).length;\n        TextController.write(new TextPacket(`${numFilters}`, filtersAppliedElt, []));\n        TextController.write(new TextPacket(`${numBattles}`, numBattlesElt, []));\n    }\n    else {\n        TextController.write(new TextPacket(\"n/a\", filtersAppliedElt, []));\n        TextController.write(new TextPacket(\"n/a\", numBattlesElt, []));\n    }\n}\nfunction getPlayerTableHtml(id, title, descr) {\n    return `\r\n    <div class=\"col-lg-12\">\r\n        <div class=\"card\">\r\n            <div class=\"card-header fixed-height-table-header kpi-header\">\r\n                <h5>${title}</h5>\r\n                <br>\r\n                <h6 style=\"font-size: 0.7em;\">\r\n                    ${descr}\r\n                </h6>\r\n            </div>\r\n            <div class=\"card-body kpi-body\">\r\n                <table id=\"${id}\" class=\"display compact cell-border\" style=\"width:100%\">\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    `;\n}\nfunction createTables(target) {\n    const tbl1HTML = getPlayerTableHtml(\"hero-player-tbl\", \"Teammate Heroes\", \"Displays statistics for heroes computed based on when they appear on the player's team. \" +\n        \"Success Rate indicates percentage of games in which the player won the game or the hero was post banned.\");\n    const tbl2HTML = getPlayerTableHtml(\"hero-opponent-tbl\", \"Opponent Heroes\", \"Displays statistics for heroes computed based on when they appear on the enemy team. \" +\n        \"Win rate, +/-, postban rate, and point gain are relative to the player while pick rate, Avg \" +\n        \"CR, and first turn rate are relative to the opponent.\");\n    const container = document.createElement('div');\n    container.innerHTML = tbl1HTML + tbl2HTML;\n    target.appendChild(container);\n    heroInfoBuildTables();\n}\nfunction makeRowDiv() {\n    const row = document.createElement('div');\n    row.classList.add(\"d-flex\", \"flex-row\", \"mb-2\", \"gap-3\");\n    return row;\n}\nfunction createKPICards(target) {\n    const row1 = makeRowDiv();\n    const row2 = makeRowDiv();\n    const rows = [row1, row2];\n    row1.innerHTML = `\r\n    <div class=\"col-md-3\">\r\n        <div class=\"card mb-0 p-2 d-flex justify-content-center flex-column align-items-center\">\r\n            <span class=\"f-16\">Selected Hero</span>\r\n            <span class=\"f-16\" id=\"selected-hero-value\">&nbsp;</span>\r\n        </div>\r\n    </div>\r\n    `;\n    row2.innerHTML = `\r\n    <div class=\"col-md-2\">\r\n        <div class=\"card p-2 d-flex justify-content-center flex-column align-items-center\"\">\r\n            <span class=\"f-16\">Battles Picked</span>\r\n            <span class=\"f-16\" id=\"battles-picked-value\">&nbsp;</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-md-2\">\r\n        <div class=\"card p-2 d-flex justify-content-center flex-column align-items-center\" id=\"pick-rate\">\r\n            <span class=\"f-16\">Pick Rate</span>\r\n            <span class=\"f-16\" id=\"pick-rate-value\">&nbsp;</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-md-2\">\r\n        <div class=\"card p-2 d-flex justify-content-center flex-column align-items-center\" id=\"win-rate\">\r\n            <span class=\"f-16\">Win Rate</span>\r\n            <span class=\"f-16\" id=\"win-rate-value\">&nbsp;</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"col-md-2\">\r\n        <div class=\"card p-2 d-flex justify-content-center flex-column align-items-center\" id=\"postban-rate\">\r\n            <span class=\"f-16\">Postban Rate</span>\r\n            <span class=\"f-16\" id=\"postban-rate-value\">&nbsp;</span>\r\n        </div>\r\n    </div>\r\n    `;\n    rows.forEach((row) => target.appendChild(row));\n}\nasync function resetPage() {\n    const searchInput = DOC_ELEMENTS.HOME_PAGE.getElt(DOC_ELEMENTS.HOME_PAGE.IDS.SEARCH_INPUT);\n    searchInput.value = '';\n    searchInput.textContent = '';\n    const contentContainer = DOC_ELEMENTS.HOME_PAGE.getElt(DOC_ELEMENTS.HOME_PAGE.IDS.HERO_INFO_CONTENT);\n    PageUtils.setVisibility(contentContainer, false);\n    await setDefaultText();\n    const defaultContent = DOC_ELEMENTS.HOME_PAGE.getElt(DOC_ELEMENTS.HOME_PAGE.IDS.HERO_DEFAULT_CONTENT);\n    PageUtils.setVisibility(defaultContent, true);\n}\nasync function initialize(stateDispatcher) {\n    await populateOptionList();\n    addHeroInfoListeners();\n    const target = DOC_ELEMENTS.HOME_PAGE.getElt(DOC_ELEMENTS.HOME_PAGE.IDS.HERO_INFO_CONTENT);\n    createKPICards(target);\n    createTables(target);\n}\nasync function runLogic(stateDispatcher) {\n    await resetPage();\n}\nasync function handleDispatch(dispatcher) {\n    await runLogic(dispatcher);\n    await HOME_PAGE_FNS.homePageSetView(HOME_PAGE_STATES.HERO_INFO);\n}\nlet HeroInfoView = {\n    runLogic: runLogic,\n    initialize: initialize,\n    triggerState: HOME_PAGE_STATES.HERO_INFO,\n    handleDispatch: handleDispatch\n};\nexport { HeroInfoView };\n","function addLoadDataListeners(_) {\r\n\t\r\n}\r\n\r\nexport { addLoadDataListeners };\r\n","import { CONTEXT } from \"../../../home-page-context.ts\";\r\nimport { HOME_PAGE_STATES } from \"../../../../page-utilities/page-state-references.ts\";\r\nimport { FilterParser } from \"../../../../../e7/filter-parsing/filter-parser.ts\";\r\nimport { ContentManager } from \"../../../../../content-manager.ts\";\r\nimport { StatsView } from \"../stats/stats-logic.js\";\r\nimport { TextUtils } from \"../../../../orchestration/text-controller.js\";\r\nimport { NavBarUtils } from \"../../../../page-utilities/nav-bar-utils.ts\";\r\nimport { addLoadDataListeners } from \"./load-data-listeners.js\";\r\nimport PYAPI from \"../../../../../apis/py-API.js\";\r\nimport { ExportImportFns } from \"../../../../../export-import-data-tools.ts\";\r\nimport { HOME_PAGE_FNS } from \"../../../../orchestration/page-state-manager.ts\";\r\n\r\nasync function processUpload() {\r\n\tconst selectedFile = await ContentManager.ClientCache.get(\r\n\t\tContentManager.ClientCache.Keys.RAW_UPLOAD\r\n\t);\r\n\r\n\tconsole.log(\"Retrieved Upload: \", selectedFile);\r\n\r\n\tconst uploadedData = await ExportImportFns.parseJSON(selectedFile);\r\n\tconst battleArr = ExportImportFns.restructureParsedUploadBattles(\r\n\t\tuploadedData.battles\r\n\t);\r\n\tconst uploadedUser = uploadedData.user;\r\n\r\n\tconst user = await ContentManager.UserManager.findUser(uploadedUser);\r\n\r\n\tif (!user) {\r\n\t\tconsole.log(\r\n\t\t\t\"Failed to find user with ID during upload verification:\",\r\n\t\t\tplayerID\r\n\t\t);\r\n\t\tconsole.log(\"Setting Error Message:\", \"User not found\");\r\n\t\tthrow new Error(\"File Upload Error: User not found\");\r\n\t}\r\n\treturn { user, battleArr };\r\n}\r\n\r\nasync function handleBattleQuery(user, HeroDicts) {\r\n\tconsole.log(\r\n\t\t\"querying and caching user battles for user: \",\r\n\t\tJSON.stringify(user)\r\n\t);\r\n\tlet artifacts =\r\n\t\tawait ContentManager.ArtifactManager.getArtifactCodeToNameMap();\r\n\tlet response = await PYAPI.rsFetchBattleData(user);\r\n\tconsole.log(\"Got response\", response);\r\n\tif (!response.ok) {\r\n\t\tconst data = await response.json();\r\n\t\tthrow new Error(data.error);\r\n\t} else {\r\n\t\tconst data = await response.json();\r\n\t\tconst rawBattles = data.battles;\r\n\t\tawait ContentManager.BattleManager.cacheQuery(\r\n\t\t\trawBattles,\r\n\t\t\tHeroDicts,\r\n\t\t\tartifacts\r\n\t\t);\r\n\t\tconsole.log(\"Cached queried battles\");\r\n\t}\r\n}\r\n\r\nasync function redirectError(err, source, stateDispatcher) {\r\n\tlet sourceState;\r\n\tconst [QUERY, UPLOAD, STATS] = [\r\n\t\tCONTEXT.VALUES.SOURCE.QUERY,\r\n\t\tCONTEXT.VALUES.SOURCE.UPLOAD,\r\n\t\tCONTEXT.VALUES.SOURCE.STATS,\r\n\t];\r\n\tif (source === QUERY || source === UPLOAD) {\r\n\t\tsourceState = HOME_PAGE_STATES.SELECT_DATA;\r\n\t\tTextUtils.queueSelectDataMsgRed(`Failed to load data: ${err.message}`);\r\n\t} else if (source === STATS) {\r\n\t\tsourceState = HOME_PAGE_STATES.SHOW_STATS;\r\n\t\tTextUtils.queueFilterMsgRed(`Failed to load data: ${err.message}`);\r\n\t} else {\r\n\t\tconsole.error(`Invalid source: ${source} ; redirecting to select data`);\r\n\t\tsourceState = HOME_PAGE_STATES.SELECT_DATA;\r\n\t\tTextUtils.queueSelectDataMsgRed(`Failed to load data: ${err.message}`);\r\n\t}\r\n\tconsole.error(err);\r\n\tawait NavBarUtils.eraseUserFromPage();\r\n\tawait stateDispatcher(sourceState);\r\n\treturn;\r\n}\r\n\r\nasync function try_find_user(userObj) {\r\n\tconsole.log(\"Finding User using:\", userObj);\r\n\tconst user = await ContentManager.UserManager.findUser(userObj);\r\n\tconsole.log(\"Got data:\", JSON.stringify(user));\r\n\tif (user !== null) {\r\n\t\treturn user;\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nasync function replaceUser(user) {\r\n\tawait ContentManager.UserManager.clearUserData();\r\n\tawait ContentManager.UserManager.setUser(user);\r\n\tconst lang = await ContentManager.LangManager.getLang();\r\n\tNavBarUtils.writeUserInfo(user, lang);\r\n}\r\n\r\nasync function runLogic(stateDispatcher) {\r\n\tlet [HeroDicts, SOURCE, autoQuery] = [null, null, null];\r\n\ttry {\r\n\t\tHeroDicts = await ContentManager.HeroManager.getHeroDicts();\r\n\t\tSOURCE = CONTEXT.popKey(CONTEXT.KEYS.SOURCE);\r\n\t\tautoQuery = CONTEXT.popKey(CONTEXT.KEYS.AUTO_QUERY);\r\n\t} catch (e) {\r\n\t\tconsole.error(\"Could not load reference and context variables: \", e);\r\n\t\tawait stateDispatcher(HOME_PAGE_STATES.SELECT_DATA);\r\n\t\treturn;\r\n\t}\r\n\r\n\ttry {\r\n\t\tlet user = null;\r\n\t\tif (SOURCE === CONTEXT.VALUES.SOURCE.UPLOAD) {\r\n\t\t\tlet result = await processUpload();\r\n\t\t\tuser = result.user;\r\n\t\t\tawait replaceUser(user);\r\n\t\t\tawait ContentManager.BattleManager.cacheUpload(\r\n\t\t\t\tresult.battleArr,\r\n\t\t\t\tHeroDicts\r\n\t\t\t);\r\n\t\t} else if (SOURCE === CONTEXT.VALUES.SOURCE.QUERY) {\r\n\t\t\tconst userObj = CONTEXT.popKey(CONTEXT.KEYS.TRY_SET_USER);\r\n\t\t\tif (userObj === null)\r\n\t\t\t\tthrow new Error(\"TRY_SET_USER User missing from CONTEXT\");\r\n\t\t\tuser = await try_find_user(userObj); // find user automatically throws error if not found\r\n\t\t\tawait replaceUser(user);\r\n\t\t}\r\n\r\n\t\tif (user === null) {\r\n\t\t\tuser = await ContentManager.UserManager.getUser();\r\n\t\t}\r\n\r\n\t\t// if new user query or auto query from upload battles we query the users battles from the server and add to cache\r\n\t\tif (autoQuery || SOURCE === CONTEXT.VALUES.SOURCE.QUERY) {\r\n\t\t\tawait handleBattleQuery(user, HeroDicts);\r\n\t\t}\r\n\r\n\t\t// retrieve the battles from the cache (both uploaded and queried if applicable) and then apply any filters, then compute stats and plots\r\n\t\tconsole.log(\"Getting Battles From Cache\");\r\n\t\tconst battles = await ContentManager.BattleManager.getBattles();\r\n\t\tconst battlesList = Object.values(battles);\r\n\r\n\t\tconsole.log(\"BATTLES DURING LOAD\");\r\n\t\tconsole.log(battles);\r\n\r\n\t\t// TODO: Check if reacquire of seasons details is needed when next season starts\r\n\t\t// console.log(\"Checking if Reacquire of Seasons Details Needed\");\r\n\t\t// await ContentManager.SeasonManager.reaquireIfNeeded(battlesList);\r\n\r\n\t\tconsole.log(\"Getting Filters From Cache\");\r\n\t\tconst filters = await FilterParser.getFiltersFromCache(HeroDicts);\r\n\r\n\t\tconsole.log(`Received Filters: ${JSON.stringify(filters)}`);\r\n\t\tconst stats = await ContentManager.BattleManager.getStats(\r\n\t\t\tbattles,\r\n\t\t\tfilters,\r\n\t\t\tHeroDicts\r\n\t\t);\r\n\r\n\t\tconsole.log(\"Got Stats: \", stats);\r\n\t\tawait ContentManager.ClientCache.setStats(stats);\r\n\r\n\t\tawait StatsView.populateContent(); // populates tables and plots in show stats view before showing\r\n\t\tCONTEXT.STATS_PRE_RENDER_COMPLETED = true; // flag that the stats page doesn't need to run populate content itself\r\n\t\tconsole.log(\"REACHED END OF LOAD DATA LOGIC\");\r\n\t\tawait stateDispatcher(HOME_PAGE_STATES.SHOW_STATS);\r\n\t\treturn;\r\n\t} catch (err) {\r\n\t\ttry {\r\n\t\t\tawait redirectError(err, SOURCE, stateDispatcher);\r\n\t\t\treturn;\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`Something went wrong ; redirecting to select data ; error:`,\r\n\t\t\t\terr\r\n\t\t\t);\r\n\t\t\tawait NavBarUtils.eraseUserFromPage();\r\n\t\t\tawait stateDispatcher(HOME_PAGE_STATES.SELECT_DATA);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function initialize() {\r\n\taddLoadDataListeners();\r\n}\r\n\r\nasync function handleDispatch(stateDispatcher) {\r\n\tawait HOME_PAGE_FNS.homePageSetView(HOME_PAGE_STATES.LOAD_DATA);\r\n\tawait runLogic(stateDispatcher);\r\n}\r\n\r\nlet LoadDataView = {\r\n\trunLogic: runLogic,\r\n\tinitialize: initialize,\r\n\ttriggerState: HOME_PAGE_STATES.LOAD_DATA,\r\n\thandleDispatch: handleDispatch,\r\n};\r\n\r\nexport { LoadDataView };\r\n","import { HOME_PAGE_STATES } from \"../../../../page-utilities/page-state-references.ts\";\r\nimport { CONTEXT } from \"../../../home-page-context.ts\";\r\nimport DOC_ELEMENTS from \"../../../../page-utilities/doc-element-references.ts\";\r\nimport {\r\n\tTextController,\r\n\tTextPacket,\r\n} from \"../../../../orchestration/text-controller.js\";\r\nimport { ContentManager } from \"../../../../../content-manager.ts\";\r\n\r\nfunction writeMsgRed(msg) {\r\n\tTextController.write(\r\n\t\tnew TextPacket(msg, DOC_ELEMENTS.HOME_PAGE.SELECT_DATA_MSG, [\r\n\t\t\tTextController.STYLES.RED,\r\n\t\t])\r\n\t);\r\n}\r\n\r\nasync function addUserFormListener(stateDispatcher) {\r\n\tconst checkbox = DOC_ELEMENTS.HOME_PAGE.ID_SEARCH_FLAG;\r\n\tconst key = ContentManager.ClientCache.Keys.ID_SEARCH_FLAG;\r\n\tcheckbox.addEventListener(\"click\", async () => {\r\n\t\tawait ContentManager.ClientCache.cache(key, checkbox.checked);\r\n\t});\r\n\r\n\tconst form = document.getElementById(\"userForm\");\r\n\r\n\t// Intercept form submission\r\n\tform.addEventListener(\"submit\", async function (event) {\r\n\t\tconsole.log(\"Processing User Submission\");\r\n\r\n\t\tevent.preventDefault(); // Prevent actual form submission to server\r\n\r\n\t\tconst data = new FormData(form);\r\n\r\n\t\tconst name = data.get(\"username\");\r\n\t\tconst world_code = data.get(\"server\");\r\n\r\n\t\tif (!name) {\r\n\t\t\twriteMsgRed(\"Must enter username\");\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tconst idSearchFlag = await ContentManager.ClientCache.get(\r\n\t\t\t\t\tContentManager.ClientCache.Keys.ID_SEARCH_FLAG\r\n\t\t\t\t);\r\n\t\t\t\tconst userObj = idSearchFlag\r\n\t\t\t\t\t? { id: Number(name), name, world_code }\r\n\t\t\t\t\t: { name, world_code };\r\n\t\t\t\tCONTEXT.TRY_SET_USER = userObj;\r\n\t\t\t\tCONTEXT.AUTO_QUERY = true;\r\n\t\t\t\tCONTEXT.SOURCE = CONTEXT.VALUES.SOURCE.QUERY;\r\n\t\t\t\tstateDispatcher(HOME_PAGE_STATES.LOAD_DATA);\r\n\t\t\t\treturn;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(\"Caught Error:\", err);\r\n\t\t\t\twriteMsgRed(err.message);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\nasync function addUploadFormListener(stateDispatcher) {\r\n\tconst checkbox = document.getElementById(\"auto-query-flag\");\r\n\tcheckbox.addEventListener(\"click\", async () => {\r\n\t\tawait ContentManager.ClientCache.cache(\r\n\t\t\tContentManager.ClientCache.Keys.AUTO_QUERY_FLAG,\r\n\t\t\tcheckbox.checked\r\n\t\t);\r\n\t});\r\n\r\n\tlet selectedFile = null;\r\n\r\n\t// Capture file when selected\r\n\tDOC_ELEMENTS.HOME_PAGE.CSV_FILE.addEventListener(\"change\", function (event) {\r\n\t\tselectedFile = event.target.files[0];\r\n\t});\r\n\r\n\t// Intercept form submission\r\n\tDOC_ELEMENTS.HOME_PAGE.UPLOAD_FORM.addEventListener(\r\n\t\t\"submit\",\r\n\t\tasync function (event) {\r\n\t\t\tconsole.log(\"Processing File Submission\");\r\n\r\n\t\t\tevent.preventDefault(); // Prevent actual form submission to server\r\n\r\n\t\t\t// Get its state of auto-query checkbox\r\n\t\t\tconst autoQueryFlag = checkbox.checked;\r\n\r\n\t\t\ttry {\r\n\t\t\t\t// parse uploaded battles into an array\r\n\t\t\t\tif (!selectedFile) {\r\n\t\t\t\t\twriteMsgRed(\"Must upload a file\");\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Selected File: ${selectedFile.name} ; content: ${JSON.stringify(\r\n\t\t\t\t\t\tselectedFile\r\n\t\t\t\t\t)}`\r\n\t\t\t\t);\r\n\t\t\t\tawait ContentManager.ClientCache.cache(\r\n\t\t\t\t\tContentManager.ClientCache.Keys.RAW_UPLOAD,\r\n\t\t\t\t\tselectedFile\r\n\t\t\t\t);\r\n\t\t\t\tCONTEXT.AUTO_QUERY = autoQueryFlag;\r\n\t\t\t\tCONTEXT.SOURCE = CONTEXT.VALUES.SOURCE.UPLOAD;\r\n\t\t\t\tstateDispatcher(HOME_PAGE_STATES.LOAD_DATA);\r\n\t\t\t\treturn;\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.error(\"Caught Error:\", err);\r\n\t\t\t\twriteMsgRed(err.message);\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n}\r\n\r\nfunction addSelectDataListeners(stateDispatcher) {\r\n\taddUserFormListener(stateDispatcher);\r\n\taddUploadFormListener(stateDispatcher);\r\n}\r\n\r\nexport { addSelectDataListeners };\r\n","import ClientCache from \"../../../../../cache-manager.ts\";\r\nimport DOC_ELEMENTS from \"../../../../page-utilities/doc-element-references.ts\";\r\nimport { addSelectDataListeners } from \"./select-data-listeners.js\";\r\nimport { HOME_PAGE_FNS } from \"../../../../orchestration/page-state-manager.ts\";\r\nimport { HOME_PAGE_STATES } from \"../../../../page-utilities/page-state-references.ts\";\r\n\r\nasync function runLogic() {\r\n\tconst autoQueryFlag = document.getElementById(\"auto-query-flag\");\r\n\tautoQueryFlag.checked = await ClientCache.get(\r\n\t\tClientCache.Keys.AUTO_QUERY_FLAG\r\n\t);\r\n\r\n\tconst idSearchFlag = DOC_ELEMENTS.HOME_PAGE.ID_SEARCH_FLAG;\r\n\tidSearchFlag.checked = await ClientCache.get(ClientCache.Keys.ID_SEARCH_FLAG);\r\n}\r\n\r\nasync function initialize(stateDispatcher) {\r\n\taddSelectDataListeners(stateDispatcher);\r\n}\r\n\r\nasync function handleDispatch(stateDispatcher) {\r\n\tawait HOME_PAGE_FNS.homePageSetView(HOME_PAGE_STATES.SELECT_DATA);\r\n\tawait runLogic(stateDispatcher);\r\n}\r\n\r\nlet SelectDataView = {\r\n\trunLogic: runLogic,\r\n\tinitialize: initialize,\r\n\ttriggerState: HOME_PAGE_STATES.SELECT_DATA,\r\n\thandleDispatch: handleDispatch,\r\n};\r\n\r\nexport { SelectDataView };\r\n","import SavedFilters from \"../../../../../e7/saved-filters.js\";\r\nimport PageUtils from \"../../../../page-utilities/page-utils.js\";\r\nimport { Tables } from \"../../../../../populate-content.js\";\r\nimport { CONTEXT } from \"../../../home-page-context.ts\";\r\nimport { HOME_PAGE_STATES } from \"../../../../page-utilities/page-state-references.ts\";\r\nimport DOC_ELEMENTS from \"../../../../page-utilities/doc-element-references.ts\";\r\nimport { ContentManager } from \"../../../../../content-manager.ts\";\r\nimport ClientCache from \"../../../../../cache-manager.ts\";\r\nimport { getSizes, PLOT_REFS } from \"../../../../../e7/plots.ts\";\r\n\r\nfunction addBattleTableFilterToggleListener() {\r\n\tconsole.log(\"Setting listener for filter-battle-table checkbox\");\r\n\tconst filterBattleTableCheckbox = DOC_ELEMENTS.HOME_PAGE.BATTLE_FILTER_TOGGLE;\r\n\tfilterBattleTableCheckbox.addEventListener(\"click\", async () => {\r\n\t\tconsole.log(\r\n\t\t\t\"Toggling Filter Battle Table: \",\r\n\t\t\tfilterBattleTableCheckbox.checked\r\n\t\t);\r\n\t\tconst stats = await ContentManager.ClientCache.getStats();\r\n\t\tif (!filterBattleTableCheckbox.checked) {\r\n\t\t\tTables.replaceBattleData(stats.battles);\r\n\t\t} else {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Replacing table with filtered data:\",\r\n\t\t\t\tstats.filteredBattlesObj\r\n\t\t\t);\r\n\t\t\tTables.replaceBattleData(Object.values(stats.filteredBattlesObj));\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction addAutoZoomListener() {\r\n\tconst autoZoomCheckbox = DOC_ELEMENTS.HOME_PAGE.AUTO_ZOOM_FLAG;\r\n\tautoZoomCheckbox.addEventListener(\"click\", async () => {\r\n\t\tconsole.log(\"Toggling Auto Zoom: \", autoZoomCheckbox.checked);\r\n\t\tawait ContentManager.ClientCache.cache(\r\n\t\t\tContentManager.ClientCache.Keys.AUTO_ZOOM_FLAG,\r\n\t\t\tautoZoomCheckbox.checked\r\n\t\t);\r\n\t});\r\n}\r\n\r\nfunction addLatestBattlesBtnListener(stateDispatcher) {\r\n\tconst latestBattlesBtn = DOC_ELEMENTS.HOME_PAGE.LATEST_BATTLES_BTN;\r\n\tlatestBattlesBtn.addEventListener(\"click\", async () => {\r\n\t\tconsole.log(\"Clicking Latest Battles Button\");\r\n\t\tCONTEXT.AUTO_QUERY = true;\r\n\t\tCONTEXT.SOURCE = CONTEXT.VALUES.SOURCE.STATS;\r\n\t\tawait stateDispatcher(HOME_PAGE_STATES.LOAD_DATA);\r\n\t});\r\n}\r\n\r\nfunction addPremadeFilterButtonListener(editor) {\r\n\t// Logic for adding premade filters to filter pane\r\n\tdocument\r\n\t\t.getElementById(\"premade-filters\")\r\n\t\t.addEventListener(\"click\", function (event) {\r\n\t\t\tconsole.log(\"Attempting to add a premade filter\");\r\n\t\t\tevent.preventDefault();\r\n\t\t\tconst target = event.target.closest(\".dropdown-item\");\r\n\t\t\tif (!target) return;\r\n\t\t\tconst filterName = target.textContent.trim();\r\n\t\t\tconsole.log(\"Target found:\", filterName);\r\n\t\t\tconst currStr = editor.getValue();\r\n\t\t\tconst newStr = SavedFilters.extendFilters(currStr, filterName);\r\n\t\t\teditor.setValue(newStr);\r\n\t\t});\r\n}\r\n\r\nfunction addFilterButtonListeners(editor, stateDispatcher) {\r\n\t// Logic for submit buttons on filter pane\r\n\tconst filterForm = document.getElementById(\"filterForm\");\r\n\tfilterForm.addEventListener(\"submit\", async function (event) {\r\n\t\tevent.preventDefault(); // Prevent actual form submission to server\r\n\r\n\t\t// Ensure value is synced back to textarea before submit ; not strictly necessary since processed client-side\r\n\t\tdocument.getElementById(\"codeArea\").value = editor.getValue();\r\n\r\n\t\tconsole.log(\"Processing Filter Action\");\r\n\r\n\t\tconst clickedButton = event.submitter;\r\n\t\tconst action = clickedButton?.value;\r\n\t\tconst syntaxStr = editor.getValue();\r\n\t\tconst appliedFilter = await ContentManager.ClientCache.getFilterStr();\r\n\r\n\t\tif (action === \"apply\") {\r\n\t\t\tconst validFilter = await PageUtils.validateFilterSyntax(syntaxStr);\r\n\t\t\tif (validFilter) {\r\n\t\t\t\tawait ContentManager.ClientCache.setFilterStr(syntaxStr);\r\n\t\t\t\tCONTEXT.AUTO_QUERY = false;\r\n\t\t\t\tCONTEXT.SOURCE = CONTEXT.VALUES.SOURCE.STATS;\r\n\t\t\t\tstateDispatcher(HOME_PAGE_STATES.LOAD_DATA);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t} else if (action === \"check\") {\r\n\t\t\tconsole.log(\"Checking Str\", syntaxStr);\r\n\t\t\tawait PageUtils.validateFilterSyntax(syntaxStr);\r\n\t\t\treturn;\r\n\t\t} else if (action === \"clear\") {\r\n\t\t\teditor.setValue(\"\");\r\n\t\t\tconsole.log(\"Found applied filter [\", appliedFilter, \"] when clearing\");\r\n\t\t\tif (appliedFilter) {\r\n\t\t\t\tconsole.log(\"Found filter str\", appliedFilter);\r\n\t\t\t\tawait ContentManager.ClientCache.setFilterStr(\"\");\r\n\t\t\t\tCONTEXT.AUTO_QUERY = false;\r\n\t\t\t\tCONTEXT.SOURCE = CONTEXT.VALUES.SOURCE.STATS;\r\n\t\t\t\tstateDispatcher(HOME_PAGE_STATES.LOAD_DATA);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction addPlotlyLineAndMarkWidthListener() {\r\n\tconst plotDiv = DOC_ELEMENTS.HOME_PAGE.RANK_PLOT;\r\n\tif (plotDiv.__zoomListenerAttached) return;\r\n\tplotDiv.__zoomListenerAttached = true;\r\n\r\n\tconsole.log(\"Attaching plotly relayout listener\");\r\n\r\n\tplotDiv.on(\"plotly_relayout\", async function (e) {\r\n\t\tconst ignore = CONTEXT.popKey(CONTEXT.KEYS.IGNORE_RELAYOUT);\r\n\t\tif (ignore) return;\r\n\t\tconsole.log(\"TRIGGERED PLOTLY_RELAYOUT EVENT\");\r\n\r\n\t\tconst stats = await ClientCache.getStats();\r\n\r\n\t\tconst originalXRange = Object.values(stats.battles).length;\r\n\r\n\t\tconst sizes = getSizes(originalXRange);\r\n\r\n\t\tif (e[\"xaxis.range[0]\"] !== undefined) {\r\n\t\t\tlet newRange = [e[\"xaxis.range[0]\"], e[\"xaxis.range[1]\"]];\r\n\r\n\t\t\t// Zoom ratio: smaller range = more zoom\r\n\t\t\tlet zoomFactor = originalXRange / (newRange[1] - newRange[0]);\r\n\r\n\t\t\t// Adjust sizes proportionally (with a min/max clamp)\r\n\t\t\t// let newMarkerSize = Math.min(\r\n\t\t\t// \tMath.max(sizes.markerSize * zoomFactor, sizes.markerSize),\r\n\t\t\t// \tPLOT_REFS.markerMaxWidth\r\n\t\t\t// );\r\n\t\t\t// let newLineWidth = Math.min(\r\n\t\t\t// \tMath.max(sizes.lineWidth * zoomFactor, sizes.lineWidth),\r\n\t\t\t// \tPLOT_REFS.lineMaxWidth\r\n\t\t\t// );\r\n\r\n\t\t\tconst newSizes = getSizes(newRange[1] - newRange[0]);\r\n\t\t\tconst newMarkerSize = newSizes.markerSize;\r\n\t\t\tconst newLineWidth = newSizes.lineWidth;\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Refitting marker and line sizes to\",\r\n\t\t\t\tnewMarkerSize,\r\n\t\t\t\tnewLineWidth\r\n\t\t\t);\r\n\r\n\t\t\tPlotly.restyle(plotDiv, {\r\n\t\t\t\t\"marker.size\": [newMarkerSize],\r\n\t\t\t\t\"line.width\": [newLineWidth],\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tPlotly.restyle(plotDiv, {\r\n\t\t\t\t\"marker.size\": [sizes.markerSize],\r\n\t\t\t\t\"line.width\": [sizes.lineWidth],\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Reseting marker and line sizes to\",\r\n\t\t\t\tsizes.markerSize,\r\n\t\t\t\tsizes.lineWidth\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction addStatsListeners(editor, stateDispatcher) {\r\n\taddAutoZoomListener();\r\n\taddBattleTableFilterToggleListener();\r\n\taddPremadeFilterButtonListener(editor);\r\n\taddFilterButtonListeners(editor, stateDispatcher);\r\n\taddLatestBattlesBtnListener(stateDispatcher);\r\n}\r\n\r\nexport { addStatsListeners, addPlotlyLineAndMarkWidthListener };\r\n","import UserManager from \"../../../../../e7/user-manager.ts\";\r\nimport ClientCache from \"../../../../../cache-manager.ts\";\r\nimport { Tables, CardContent } from \"../../../../../populate-content.js\";\r\nimport { ContentManager } from \"../../../../../content-manager.ts\";\r\nimport { RegExps } from \"../../../../../e7/regex.ts\";\r\nimport {\r\n\taddPlotlyLineAndMarkWidthListener,\r\n\taddStatsListeners,\r\n} from \"./stats-listeners.js\";\r\nimport DOC_ELEMENTS from \"../../../../page-utilities/doc-element-references.ts\";\r\nimport { CONTEXT } from \"../../../home-page-context.ts\";\r\nimport { Safe } from \"../../../../../html-safe.ts\";\r\nimport {\r\n\tgetZoom,\r\n\tgenerateRankPlot,\r\n\tgetSizes,\r\n} from \"../../../../../e7/plots.ts\";\r\nimport { getScrollbarWidth } from \"../../../../html-constructor/html-constructor.ts\";\r\nimport { HOME_PAGE_STATES } from \"../../../../page-utilities/page-state-references.ts\";\r\nimport { HOME_PAGE_FNS } from \"../../../../orchestration/page-state-manager.ts\";\r\n\r\nexport function resizeRankPlot() {\r\n\tif (!CONTEXT.STATS_PRE_RENDER_COMPLETED) return;\r\n\tCONTEXT.IGNORE_RELAYOUT = true;\r\n\tsetTimeout(() => {\r\n\t\tPlotly.Plots.resize(document.getElementById(\"rank-plot\"));\r\n\t}, 20);\r\n}\r\n\r\nconst filtersAreRelevant = (stats) => {\r\n\treturn (\r\n\t\tstats.areFiltersApplied &&\r\n\t\tstats.battles.length > Object.values(stats.filteredBattlesObj).length\r\n\t);\r\n};\r\n\r\nasync function populatePlot(stats) {\r\n\tconst container = Safe.unwrapHtmlElt(\"rank-plot-container\");\r\n\tconst user = await UserManager.getUser();\r\n\tconst autoZoom = await ClientCache.get(ClientCache.Keys.AUTO_ZOOM_FLAG);\r\n\r\n\tconst plotDiv = generateRankPlot(\r\n\t\tcontainer,\r\n\t\tstats.battles,\r\n\t\tuser,\r\n\t\tstats.numFilters > 0 ? stats.filteredBattlesObj : null\r\n\t);\r\n\r\n\taddPlotlyLineAndMarkWidthListener(plotDiv);\r\n\tif (autoZoom && filtersAreRelevant(stats)) {\r\n\t\t// compute the needed zoom level\r\n\t\tconst zoom = getZoom(stats.battles, stats.filteredBattlesObj);\r\n\t\tconsole.log(\"Zooming to:\", zoom);\r\n\r\n\t\tconst newSizes = getSizes(zoom.endX - zoom.startX);\r\n\r\n\t\tconst relayoutConfig = {\r\n\t\t\t\"xaxis.range\": [zoom.startX, zoom.endX],\r\n\t\t\t\"yaxis.range\": [zoom.startY, zoom.endY],\r\n\t\t};\r\n\r\n\t\tconst markerConfig = {\r\n\t\t\t\"marker.size\": [newSizes.markerSize],\r\n\t\t\t\"line.width\": [newSizes.lineWidth],\r\n\t\t};\r\n\t\tCONTEXT.IGNORE_RELAYOUT = true;\r\n\t\tPlotly.restyle(plotDiv, markerConfig);\r\n\t\tPlotly.relayout(plotDiv, relayoutConfig);\r\n\t}\r\n}\r\n\r\nasync function populateContent() {\r\n\tconst user = await UserManager.getUser();\r\n\r\n\tif (!user) {\r\n\t\tconsole.log(\"Skipping populate tables: user not found\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tconsole.log(\"POPULATING DATA PROCESS INITIATED\");\r\n\r\n\ttry {\r\n\t\tconsole.log(\"Getting Season Details\");\r\n\t\tconst seasonDetails = await ContentManager.SeasonManager.getSeasonDetails();\r\n\t\tconsole.log(\"Got season details:\", seasonDetails, typeof seasonDetails);\r\n\r\n\t\tconsole.log(\"Getting Stats\");\r\n\t\tconst stats = await ContentManager.ClientCache.getStats();\r\n\r\n\t\t//console.log(\"GOT STATS: \", JSON.stringify(stats));\r\n\r\n\t\tconsole.time(\"populateTables\");\r\n\t\tconsole.log(\"POPULATING TABLES, CARD CONTENT, AND PLOTS\");\r\n\t\tTables.populateSeasonDetailsTable(\"season-details-tbl\", seasonDetails);\r\n\t\tTables.populateHeroStatsTable(\"player-tbl\", stats.playerHeroStats);\r\n\t\tconsole.log(\"Populating opponent table\");\r\n\t\tTables.populateHeroStatsTable(\"opponent-tbl\", stats.enemyHeroStats);\r\n\t\tconsole.log(\"Populating first pick table\");\r\n\t\tTables.populatePlayerFirstPickTable(\r\n\t\t\t\"first-pick-stats-tbl\",\r\n\t\t\tstats.firstPickStats\r\n\t\t);\r\n\t\tTables.populatePlayerPrebansTable(\"preban-stats-tbl\", stats.prebanStats);\r\n\t\tTables.populateServerStatsTable(\r\n\t\t\t\"performance-stats-tbl\",\r\n\t\t\tstats.performanceStats\r\n\t\t);\r\n\t\tif (DOC_ELEMENTS.HOME_PAGE.BATTLE_FILTER_TOGGLE.checked) {\r\n\t\t\tconsole.log(\"POPULATING AS FILTERED BATTLES TABLE\");\r\n\t\t\tTables.populateFullBattlesTable(\r\n\t\t\t\t\"battles-tbl\",\r\n\t\t\t\tObject.values(stats.filteredBattlesObj),\r\n\t\t\t\tuser\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tconsole.log(\"POPULATING AS FULL BATTLES TABLE\");\r\n\t\t\tTables.populateFullBattlesTable(\"battles-tbl\", stats.battles, user);\r\n\t\t}\r\n\t\tCardContent.populateGeneralStats(stats.generalStats);\r\n\t\tawait populatePlot(stats);\r\n\t\tconsole.log(\"FINISHED POPULATING\");\r\n\t\tconsole.timeEnd(\"populateTables\");\r\n\t} catch (err) {\r\n\t\tconsole.error(\"Error loading data:\", err);\r\n\t}\r\n}\r\n\r\nasync function addCodeMirror() {\r\n\tCodeMirror.defineMode(\"filterSyntax\", function () {\r\n\t\treturn {\r\n\t\t\ttoken: function (stream, state) {\r\n\t\t\t\treturn RegExps.tokenMatch(stream);\r\n\t\t\t},\r\n\t\t};\r\n\t});\r\n\r\n\tconst textarea = document.getElementById(\"codeArea\");\r\n\r\n\tlet editor = CodeMirror.fromTextArea(textarea, {\r\n\t\tmode: \"filterSyntax\",\r\n\t\tlineNumbers: true,\r\n\t\ttheme: \"default\",\r\n\t});\r\n\r\n\teditor.setSize(null, 185);\r\n\r\n\tconst appliedFilter = await ContentManager.ClientCache.getFilterStr();\r\n\r\n\tif (appliedFilter) {\r\n\t\teditor.setValue(appliedFilter);\r\n\t}\r\n\r\n\t// Optional: sync changes back to textarea if needed\r\n\teditor.on(\"change\", () => {\r\n\t\teditor.save(); // Updates the hidden textarea for form submit\r\n\t});\r\n\r\n\t// Show the editor after it's initialized\r\n\ttextarea.classList.remove(\"codemirror-hidden\");\r\n\tCONTEXT.CODE_MIRROR_EDITOR = editor;\r\n\treturn editor;\r\n}\r\n\r\nasync function preFirstRenderLogic() {\r\n\tawait populateContent();\r\n}\r\n\r\nasync function postFirstRenderLogic() {\r\n\tconst editor = CONTEXT.CODE_MIRROR_EDITOR;\r\n\tif (!editor) {\r\n\t\tconsole.error(\"Editor not found in CONTEXT\");\r\n\t\treturn;\r\n\t}\r\n\tconsole.log(\"Refreshing editor\");\r\n\teditor.refresh();\r\n}\r\n\r\nasync function runLogic(stateDispatcher) {\r\n\tconst autoZoomCheckbox = DOC_ELEMENTS.HOME_PAGE.AUTO_ZOOM_FLAG;\r\n\tconst checked = await ContentManager.ClientCache.get(\r\n\t\tContentManager.ClientCache.Keys.AUTO_ZOOM_FLAG\r\n\t);\r\n\tautoZoomCheckbox.checked = checked;\r\n\tconst stats = await ContentManager.ClientCache.getStats();\r\n\r\n\tconst filterBattleTableCheckbox = DOC_ELEMENTS.HOME_PAGE.BATTLE_FILTER_TOGGLE;\r\n\tif (filterBattleTableCheckbox.checked) {\r\n\t\tTables.replaceBattleData(Object.values(stats.filteredBattlesObj));\r\n\t}\r\n\r\n\tconst user = await UserManager.getUser();\r\n\r\n\tif (!user) {\r\n\t\tconsole.log(\"User not found sending to select data quitely\");\r\n\t\tstateDispatcher(HOME_PAGE_STATES.SELECT_DATA); // switch view with no error; should only happen if user is reloading and state cache did not expire while user info did\r\n\t\treturn;\r\n\t} else {\r\n\t\tconsole.log(\"User found:\", user);\r\n\t}\r\n\r\n\tDOC_ELEMENTS.HOME_PAGE.CSV_FILE.value = \"\";\r\n\tDOC_ELEMENTS.HOME_PAGE.USER_QUERY_FORM_NAME.value = \"\";\r\n}\r\n\r\nfunction addScrollTableOffsets() {\r\n\tconst tables = [\r\n\t\tDOC_ELEMENTS.HOME_PAGE.FIRST_PICK_STATS_TBL,\r\n\t\tDOC_ELEMENTS.HOME_PAGE.PREBAN_STATS_TBL,\r\n\t\tDOC_ELEMENTS.HOME_PAGE.SEASON_DETAILS_TBL,\r\n\t];\r\n\tconst scrollWidth = getScrollbarWidth();\r\n\tfor (let tbl of tables) {\r\n\t\tconst thead = tbl.querySelector(\"thead\");\r\n\t\tif (!thead) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tthead.style.setProperty(\"padding-right\", `${scrollWidth}px`);\r\n\t}\r\n}\r\n\r\nasync function initialize(stateDispatcher) {\r\n\taddScrollTableOffsets();\r\n\tconst editor = await addCodeMirror();\r\n\tawait addStatsListeners(editor, stateDispatcher);\r\n}\r\n\r\nasync function handleDispatch(stateDispatcher) {\r\n\tif (!CONTEXT.STATS_PRE_RENDER_COMPLETED) {\r\n\t\tif (!CONTEXT.IS_FIRST_RENDER) {\r\n\t\t\tawait HOME_PAGE_FNS.homePageSetView(HOME_PAGE_STATES.LOAD_DATA); // show loading screen while populating content\r\n\t\t}\r\n\t\tconsole.log(\"Running stats pre render logic\");\r\n\t\tawait preFirstRenderLogic(stateDispatcher); // if stats page is accessed from outside home page, must populate content, otherwise load data logic will\r\n\t\tCONTEXT.STATS_PRE_RENDER_COMPLETED = true;\r\n\t\tconsole.log(\"Completed stats pre render logic\");\r\n\t}\r\n\tawait runLogic(stateDispatcher);\r\n\tawait HOME_PAGE_FNS.homePageSetView(HOME_PAGE_STATES.SHOW_STATS);\r\n\tif (!CONTEXT.STATS_POST_RENDER_COMPLETED) {\r\n\t\tconsole.log(\"Running stats post render logic\");\r\n\t\tawait postFirstRenderLogic(); // will resize code mirror appropriately\r\n\t\tCONTEXT.STATS_POST_RENDER_COMPLETED = true;\r\n\t\tconsole.log(\"Completed stats post render logic\");\r\n\t}\r\n\tresizeRankPlot();\r\n}\r\n\r\nlet StatsView = {\r\n\tpreFirstRenderLogic: preFirstRenderLogic,\r\n\tpostFirstRenderLogic: postFirstRenderLogic,\r\n\trunLogic: runLogic,\r\n\tinitialize: initialize,\r\n\tpopulateContent: populateContent,\r\n\ttriggerState: HOME_PAGE_STATES.SHOW_STATS,\r\n\thandleDispatch: handleDispatch,\r\n};\r\n\r\nexport { StatsView };\r\n","import { Safe } from \"../../html-safe.ts\";\nlet ID_COUNTER = 0;\nfunction generateID() {\n    ID_COUNTER += 1;\n    return `id-${ID_COUNTER}`;\n}\nlet _SCROLLBAR_WIDTH = null;\nfunction getScrollbarWidth() {\n    if (_SCROLLBAR_WIDTH)\n        return _SCROLLBAR_WIDTH;\n    const outer = document.createElement(\"div\");\n    outer.style.visibility = \"hidden\";\n    outer.style.overflow = \"scroll\";\n    document.body.appendChild(outer);\n    const scrollbarWidth = outer.offsetWidth - outer.clientWidth;\n    outer.remove();\n    _SCROLLBAR_WIDTH = scrollbarWidth;\n    return scrollbarWidth;\n}\nexport const ComposeOption = {\n    NEST: \"nest\", // all subsequent compose elements will be children\n    END_NEST: \"end-nest\", // exits the current nest if any otherwise ignore\n    ADJ: \"adj\", // all subsequent compose elements will be siblings\n};\nconst END_NEST_TAG = \"~end-nest~\";\nexport const END_NEST = {\n    tag: END_NEST_TAG,\n    option: ComposeOption.END_NEST\n};\nclass HTMLConstructor {\n    htmlElt;\n    children;\n    childArr;\n    constructor(htmlElt) {\n        this.htmlElt = htmlElt;\n        this.children = {};\n        this.childArr = [];\n    }\n    static fromID(id) {\n        return new HTMLConstructor(Safe.unwrapHtmlElt(id));\n    }\n    static fromElt(elt) {\n        return new HTMLConstructor(elt);\n    }\n    get id() {\n        return this.htmlElt.id;\n    }\n    set id(id) {\n        this.htmlElt.id = id;\n    }\n    addClass(...classes) {\n        this.htmlElt.classList.add(...classes);\n    }\n    addStyle(style) {\n        this.htmlElt.setAttribute(\"style\", style);\n    }\n    removeClass(...classes) {\n        this.htmlElt.classList.remove(...classes);\n    }\n    addAttributes(attributes) {\n        for (const [key, value] of Object.entries(attributes)) {\n            this.htmlElt.setAttribute(key, value);\n        }\n    }\n    appendChild(child) {\n        if (child instanceof HTMLConstructor) {\n            this.htmlElt.appendChild(child.htmlElt);\n            if (!child.id)\n                child.id = generateID();\n            this.children[child.id] = child;\n            this.childArr.push(child);\n            return child;\n        }\n        else if (child instanceof HTMLElement) {\n            let wrapped = new HTMLConstructor(child);\n            return this.appendChild(wrapped);\n        }\n        else {\n            throw new Error(\"Only instances of HTMLConstructor or HTMLElement can be passed to this function\");\n        }\n    }\n    setInnerHtml(htmlStr) {\n        this.htmlElt.innerHTML = htmlStr;\n    }\n    appendInnerHTML(htmlStr) {\n        this.htmlElt.insertAdjacentHTML(\"beforeend\", htmlStr);\n    }\n    constructChild(eltType, attributes = {}) {\n        if (!attributes.id)\n            attributes.id = generateID();\n        let child = document.createElement(eltType);\n        let constructor = new HTMLConstructor(child);\n        constructor.addAttributes(attributes);\n        this.appendChild(constructor);\n        return constructor;\n    }\n    addTextContent(text) {\n        this.htmlElt.textContent = text;\n    }\n    /**\n     * Constructs a tree of HTMLConstructors from an array of HTMLComposeElements.\n     *\n     * @param {HTMLComposeElement[]} elements - An array of HTMLComposeElements\n     * representing the structure and content of the HTML tree.\n     */\n    compose(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            if (element.option === ComposeOption.NEST) { // all subsequent compose elements will be children\n                const nestedChildren = [];\n                for (let j = i + 1; j < elements.length; j++) {\n                    const nestedChild = elements[j];\n                    if (nestedChild.option === ComposeOption.END_NEST) {\n                        break;\n                    }\n                    nestedChildren.push(nestedChild);\n                }\n                if (element.children) {\n                    element.children = [...element.children, ...nestedChildren];\n                }\n                else {\n                    element.children = nestedChildren;\n                }\n                element.option = ComposeOption.ADJ;\n                this.compose([element]);\n                i += nestedChildren.length;\n                continue;\n            }\n            ;\n            if (element.tag === END_NEST_TAG)\n                continue;\n            if (element.textContent instanceof Array) { // create adjacent copies of element using the different text\n                const subElements = [];\n                for (const text of element.textContent) {\n                    const subElt = Object.assign({}, element);\n                    subElt.textContent = text;\n                    subElements.push(subElt);\n                }\n                this.compose(subElements);\n                continue;\n            }\n            ;\n            let child = this.constructChild(element.tag, element.attributes);\n            if (element.classes)\n                child.addClass(...element.classes);\n            if (element.children)\n                child.compose(element.children);\n            if (element.textContent)\n                child.addTextContent(element.textContent);\n            if (element.style)\n                child.addStyle(element.style);\n            if (element.innerHtml)\n                child.setInnerHtml(element.innerHtml);\n        }\n        ;\n    }\n}\nclass TableConstructor extends HTMLConstructor {\n    thead;\n    tbody;\n    constructor(htmlElt, headID, bodyID) {\n        super(htmlElt);\n        this.constructChild(\"thead\", { id: headID });\n        this.constructChild(\"tbody\", { id: bodyID });\n        this.thead = this.children[headID];\n        this.tbody = this.children[bodyID];\n    }\n    static createFromIDs(tableID, headID, bodyID) {\n        const table = document.createElement(\"table\");\n        table.id = tableID;\n        return new TableConstructor(table, headID, bodyID);\n    }\n    addColumns(colNameArr) {\n        const thead = this.thead;\n        const tr = thead.constructChild(\"tr\");\n        colNameArr.forEach((colName) => {\n            const attributes = { scope: \"col\" };\n            tr.constructChild(\"th\", attributes).addTextContent(colName);\n        });\n    }\n}\nfunction cardNest({ content, classes } = {}) {\n    return [\n        {\n            tag: \"div\",\n            classes: [\"col-sm-12\"].concat(classes ?? []),\n            option: ComposeOption.NEST\n        },\n        {\n            tag: \"div\",\n            classes: [\"card\"],\n            children: content,\n            option: ComposeOption.NEST\n        },\n    ];\n}\nfunction cardBody({ composeList, classes, option }) {\n    return {\n        tag: \"div\",\n        classes: [\"card-body\", \"pc-component\"].concat(classes ?? []),\n        option: option,\n        children: composeList\n    };\n}\nfunction paragraph(text, classes) {\n    return {\n        tag: \"p\",\n        textContent: text,\n        classes: classes\n    };\n}\nfunction header(text, hNum = 1, classes) {\n    return {\n        tag: \"h\" + hNum,\n        textContent: text,\n        classes: classes\n    };\n}\nfunction hr() {\n    return {\n        tag: \"hr\"\n    };\n}\nfunction br() {\n    return {\n        tag: \"br\"\n    };\n}\nfunction listElement({ outertag, outerclasses, innertag, innerclasses, textList }) {\n    return {\n        tag: outertag ?? \"ul\",\n        classes: outerclasses ?? [],\n        children: [\n            {\n                tag: innertag ?? \"li\",\n                classes: innerclasses ?? [],\n                textContent: textList\n            }\n        ]\n    };\n}\nconst ComposeFns = {\n    cardNest,\n    cardBody,\n    paragraph,\n    header,\n    hr,\n    br,\n    listElement,\n};\nexport { TableConstructor, HTMLConstructor, ComposeFns, getScrollbarWidth };\n","import ClientCache from \"../../cache-manager.ts\";\nconst ACTIONS = {\n    CLEAR_USER: \"CLEAR_USER\",\n    SHOW_NO_USER_MSG: \"SHOW_NO_USER_MSG\",\n    SHOW_DATA_ALREADY_CLEARED_MSG: \"SHOW_DATA_ALREADY_CLEARED_MSG\",\n    QUERY_USER: \"QUERY_USER\",\n    REFRESH_REFERENCES: \"REFRESH_REFERENCES\",\n};\nlet InterPageManager = {\n    ACTIONS: ACTIONS,\n    getState: async function () {\n        return ((await ClientCache.get(ClientCache.Keys.INTER_PAGE_MANAGER)) ?? {\n            actions: [],\n            messages: [],\n        });\n    },\n    setState: async function (state) {\n        await ClientCache.cache(ClientCache.Keys.INTER_PAGE_MANAGER, state);\n    },\n    pushActions: async function (actions) {\n        let state = await this.getState();\n        state.actions.push(...actions);\n        await this.setState(state);\n    },\n    pushAction: async function (action) {\n        let state = await this.getState();\n        state.actions.push(action);\n        await this.setState(state);\n    },\n    makeAction: function (action, message) {\n        return { action: action, message: message };\n    },\n    flushState: async function () {\n        const state = await this.getState();\n        await ClientCache.delete(ClientCache.Keys.INTER_PAGE_MANAGER);\n        return state;\n    },\n};\nexport default InterPageManager;\n","export class PageOrchestration {\n    wrapperLogic;\n    views;\n    dispatch;\n    initialize;\n    constructor(wrapperLogic, views) {\n        this.wrapperLogic = wrapperLogic;\n        this.views = views;\n        this.bindViews();\n    }\n    bindViews() {\n        const self = this;\n        this.dispatch = async function (state) {\n            await self.wrapperLogic.preDispatch(state);\n            for (const view of self.views) {\n                if (view.triggerState === state) {\n                    await view.handleDispatch(self.dispatch);\n                }\n                ;\n            }\n            await self.wrapperLogic.postDispatch(state);\n        };\n        this.initialize = async function () {\n            await self.wrapperLogic.preInitialize(self.dispatch);\n            for (const view of self.views) {\n                await view.initialize(self.dispatch);\n            }\n            await self.wrapperLogic.postInitialize(self.dispatch);\n        };\n    }\n    appendView(view) {\n        this.views.push(view);\n        this.bindViews();\n    }\n}\n","import ClientCache from \"../../cache-manager.ts\";\nimport DOC_ELEMENTS from \"../page-utilities/doc-element-references.ts\";\nimport PageUtils from \"../page-utilities/page-utils.js\";\nimport { HOME_PAGE_STATES } from \"../page-utilities/page-state-references.ts\";\nimport UserManager from \"../../e7/user-manager.ts\";\nimport { WORLD_CODE_TO_CLEAN_STR } from \"../../e7/references.ts\";\nconst VALIDATION_SET = new Set(Object.values(HOME_PAGE_STATES));\nfunction validateState(state) {\n    if (!VALIDATION_SET.has(state)) {\n        console.error(`Invalid page state: ${state}`);\n        return false;\n    }\n    return true;\n}\nfunction getContentBody(state) {\n    switch (state) {\n        case HOME_PAGE_STATES.SELECT_DATA:\n            return DOC_ELEMENTS.HOME_PAGE.SELECT_DATA_BODY;\n        case HOME_PAGE_STATES.SHOW_STATS:\n            return DOC_ELEMENTS.HOME_PAGE.SHOW_STATS_BODY;\n        case HOME_PAGE_STATES.LOAD_DATA:\n            return DOC_ELEMENTS.HOME_PAGE.LOAD_DATA_BODY;\n        case HOME_PAGE_STATES.HERO_INFO:\n            return DOC_ELEMENTS.HOME_PAGE.HERO_INFO_BODY;\n        default:\n            console.error(`Invalid page state: ${state}`);\n    }\n}\nlet HomePageStateManager = {\n    getState: async function () {\n        return ((await ClientCache.get(ClientCache.Keys.HOME_PAGE_STATE)) ??\n            HOME_PAGE_STATES.SELECT_DATA); // default to GET_DATA\n    },\n    setState: async function (state) {\n        if (!validateState(state))\n            return;\n        await ClientCache.cache(ClientCache.Keys.HOME_PAGE_STATE, state);\n    },\n    resetState: async function () {\n        await ClientCache.delete(ClientCache.Keys.HOME_PAGE_STATE);\n    },\n};\nfunction homePageSetView(state) {\n    if (!validateState(state))\n        return;\n    for (const otherState of Object.values(HOME_PAGE_STATES)) {\n        if (state === otherState)\n            continue;\n        const otherStateBody = getContentBody(otherState);\n        if (!otherStateBody)\n            continue;\n        console.log(`Hiding ${otherStateBody.id}`);\n        PageUtils.setVisibility(otherStateBody, false);\n    }\n    const contentBody = getContentBody(state);\n    if (contentBody) {\n        console.log(`Showing ${contentBody.id}`);\n        PageUtils.setVisibility(contentBody, true);\n    }\n    ;\n    PageUtils.setVisibility(DOC_ELEMENTS.BODY_FOOTER_CONTAINER, true);\n}\nfunction homePageDrawUserInfo(user) {\n    if (user) {\n        DOC_ELEMENTS.HOME_PAGE.USER_NAME.innerText = user.name;\n        DOC_ELEMENTS.HOME_PAGE.USER_ID.innerText = `${user.id}`;\n        DOC_ELEMENTS.HOME_PAGE.USER_SERVER.innerText =\n            WORLD_CODE_TO_CLEAN_STR[user.world_code];\n    }\n    else {\n        DOC_ELEMENTS.HOME_PAGE.USER_NAME.innerText = \"(None)\";\n        DOC_ELEMENTS.HOME_PAGE.USER_ID.innerText = \"(None)\";\n        DOC_ELEMENTS.HOME_PAGE.USER_SERVER.innerText = \"(None)\";\n    }\n}\nasync function homePageSetUser(user) {\n    await UserManager.clearUserData(); // clear any existing data\n    homePageDrawUserInfo(user);\n    if (user) {\n        await UserManager.setUser(user);\n    }\n}\nasync function homePageClearUserData() {\n    await homePageSetUser(null);\n}\nlet HOME_PAGE_FNS = {\n    homePageSetView: homePageSetView,\n    homePageSetUser: homePageSetUser,\n    homePageDrawUserInfo: homePageDrawUserInfo,\n    homePageClearUserData: homePageClearUserData,\n};\nexport { HomePageStateManager, HOME_PAGE_FNS, validateState };\n","import { Safe } from \"../../html-safe.ts\";\r\nimport DOC_ELEMENTS from \"../page-utilities/doc-element-references.ts\";\r\n\r\nconst STYLES = {\r\n\tRED: \"text-danger\",\r\n\tGREEN: \"text-safe\",\r\n\tE_BLUE: \"text-e-blue\",\r\n};\r\n\r\nclass TextPacket {\r\n\tconstructor(text, docElement, classList=[]) {\r\n\t\tthis.text = text;\r\n\t\tthis.docElement = docElement;\r\n\t\tthis.classList = classList;\r\n\t}\r\n}\r\n\r\nfunction assertTextPacket(textPacket) {\r\n\tif (!textPacket instanceof TextPacket) {\r\n\t\tthrow new Error(\r\n\t\t\t\"Only instances of TextPacket can be passed to this function\"\r\n\t\t);\r\n\t}\r\n}\r\n\r\nlet TextController = {\r\n\tqueue: [],\r\n\tautoClearElements: [],\r\n\r\n\tTextPacket: TextPacket,\r\n\tSTYLES: STYLES,\r\n\r\n\tclearStyles: function (docElement) {\r\n\t\tfor (const style of Object.values(STYLES)) {\r\n\t\t\tdocElement.classList.remove(style);\r\n\t\t}\r\n\t},\r\n\r\n\twrite: function (TextPacket) {\r\n\t\tassertTextPacket(TextPacket);\r\n\t\tTextPacket.docElement.textContent = TextPacket.text;\r\n\t\tthis.clearStyles(TextPacket.docElement);\r\n\t\tTextPacket.classList.forEach((className) => {\r\n\t\t\tTextPacket.docElement.classList.add(className);\r\n\t\t});\r\n\t},\r\n\r\n\twriteStr: function (text, docElement, classList=[]) {\r\n\t\tthis.write(new TextPacket(text, docElement, classList));\r\n\t},\r\n\r\n\twriteStrFromID: function (text, id, classList=[]) {\r\n\t\tconst elt = Safe.unwrapHtmlElt(id);\r\n\t\tthis.writeStr(text, elt, classList);\r\n\t},\r\n\r\n\tpush: function (TextPacket) {\r\n\t\tassertTextPacket(TextPacket);\r\n\t\tthis.queue.push(TextPacket);\r\n\t},\r\n\r\n\tpushFromObj: function ({ text, docElement, classList }) {\r\n\t\tthis.push(new TextPacket(text, docElement, classList));\r\n\t},\r\n\r\n\tbindAutoClear: function (elementList) {\r\n\t\t// Only used to clear messages automatically when swiching page states\r\n\t\tfor (const element of elementList) {\r\n\t\t\tthis.autoClearElements.push(element);\r\n\t\t}\r\n\t},\r\n\r\n\tprocessQueue: function () {\r\n\t\tthis.queue.forEach((TextPacket) => {\r\n\t\t\tthis.write(TextPacket);\r\n\t\t});\r\n\t\tthis.queue = [];\r\n\t},\r\n\r\n\tclearMessages: function () {\r\n\t\tfor (const element of this.autoClearElements) {\r\n\t\t\telement.textContent = \"\";\r\n\t\t\tthis.clearStyles(element);\r\n\t\t}\r\n\t},\r\n};\r\n\r\nfunction queueSelectDataMsgGreen(msg) {\r\n\tTextController.push(\r\n\t\tnew TextPacket(msg, DOC_ELEMENTS.HOME_PAGE.SELECT_DATA_MSG, [STYLES.GREEN])\r\n\t);\r\n}\r\n\r\nfunction queueSelectDataMsgRed(msg) {\r\n\tTextController.push(\r\n\t\tnew TextPacket(msg, DOC_ELEMENTS.HOME_PAGE.SELECT_DATA_MSG, [STYLES.RED])\r\n\t);\r\n}\r\n\r\nfunction queueFilterMsgGreen(msg) {\r\n\tTextController.push(\r\n\t\tnew TextPacket(msg, DOC_ELEMENTS.HOME_PAGE.FILTER_MSG, [STYLES.GREEN])\r\n\t);\r\n}\r\n\r\nfunction queueFilterMsgRed(msg) {\r\n\tTextController.push(\r\n\t\tnew TextPacket(msg, DOC_ELEMENTS.HOME_PAGE.FILTER_MSG, [STYLES.RED])\r\n\t);\r\n}\r\n\r\nlet TextUtils = {\r\n\tqueueSelectDataMsgGreen,\r\n\tqueueSelectDataMsgRed,\r\n\tqueueFilterMsgGreen,\r\n\tqueueFilterMsgRed,\r\n};\r\n\r\nexport { TextController, TextPacket, TextUtils };\r\n","import { Safe } from \"../../html-safe.ts\";\nconst HomePageIds = {\n    SELECT_DATA_MSG: \"select-data-msg\",\n    FILTER_MSG: \"filterMSG\",\n    SELECT_DATA_BODY: \"select-data-body\",\n    SHOW_STATS_BODY: \"show-stats-body\",\n    LOAD_DATA_BODY: \"load-data-body\",\n    HERO_INFO_BODY: \"hero-info-body\",\n    HERO_INFO_CONTENT: \"hero-info-content\",\n    HERO_DEFAULT_CONTENT: \"default-content\",\n    LATEST_BATTLES_BTN: \"latest-battles-btn\",\n    UPLOAD_FORM: \"uploadForm\",\n    CSV_FILE: \"csvFile\",\n    USER_QUERY_FORM_NAME: \"user-query-form-name\",\n    USER_QUERY_FORM_SERVER: \"user-query-form-server\",\n    AUTO_ZOOM_FLAG: \"auto-zoom-flag\",\n    USER_NAME: \"user-name\",\n    USER_ID: \"user-id\",\n    USER_SERVER: \"user-server\",\n    BATTLE_FILTER_TOGGLER: \"filter-battle-table\",\n    ID_SEARCH_FLAG: \"id-search-flag\",\n    SEASON_DETAILS_TBL: \"season-details-tbl\",\n    PERFORMANCE_STATS_TBL: \"performance-stats-tbl\",\n    FIRST_PICK_STATS_TBL: \"first-pick-stats-tbl\",\n    PREBAN_STATS_TBL: \"preban-stats-tbl\",\n    PLAYER_TBL: \"player-tbl\",\n    OPPONENT_TBL: \"opponent-tbl\",\n    BATTLES_TBL: \"battles-tbl\",\n    RANK_PLOT: \"rank-plot\",\n    SEARCH_INPUT: \"searchInput\",\n    HERO_SEARCH_OPTIONS: \"hero-option-list\",\n    HERO_PLAYER_TBL: \"hero-player-tbl\",\n    HERO_OPPONENT_TBL: \"hero-opponent-tbl\",\n};\nclass HomePageElements {\n    IDS = HomePageIds;\n    _SELECT_DATA_MSG = null;\n    _FILTER_MSG = null;\n    _SELECT_DATA_BODY = null;\n    _SHOW_STATS_BODY = null;\n    _LOAD_DATA_BODY = null;\n    _HERO_INFO_BODY = null;\n    _LATEST_BATTLES_BTN = null;\n    _UPLOAD_FORM = null;\n    _CSV_FILE = null;\n    _USER_QUERY_FORM_NAME = null;\n    _USER_QUERY_FORM_SERVER = null;\n    _AUTO_ZOOM_FLAG = null;\n    _FOOTER = null;\n    _USER_NAME = null;\n    _USER_ID = null;\n    _USER_SERVER = null;\n    _BATTLE_FILTER_TOGGLER = null;\n    _ID_SEARCH_FLAG = null;\n    _SEASON_DETAILS_TBL = null;\n    _PERFORMANCE_STATS_TBL = null;\n    _FIRST_PICK_STATS_TBL = null;\n    _PREBAN_STATS_TBL = null;\n    _PLAYER_TBL = null;\n    _OPPONENT_TBL = null;\n    _BATTLE_TBL = null;\n    _RANK_PLOT = null;\n    _HERO_PLAYER_TBL = null;\n    _HERO_OPPONENT_TBL = null;\n    _SEARCH_INPUT = null;\n    _SEARCH_OPTIONS = null;\n    getElt(id) {\n        return Safe.unwrapHtmlElt(id);\n    }\n    get SELECT_DATA_MSG() {\n        return this._SELECT_DATA_MSG ||= Safe.unwrapHtmlElt(\"select-data-msg\");\n    }\n    get FILTER_MSG() {\n        return this._FILTER_MSG ||= Safe.unwrapHtmlElt(\"filterMSG\");\n    }\n    get SELECT_DATA_BODY() {\n        return this._SELECT_DATA_BODY ||= Safe.unwrapHtmlElt(\"select-data-body\");\n    }\n    get SHOW_STATS_BODY() {\n        return this._SHOW_STATS_BODY ||= Safe.unwrapHtmlElt(\"show-stats-body\");\n    }\n    get LOAD_DATA_BODY() {\n        return this._LOAD_DATA_BODY ||= Safe.unwrapHtmlElt(\"load-data-body\");\n    }\n    get HERO_INFO_BODY() {\n        return this._HERO_INFO_BODY ||= Safe.unwrapHtmlElt(\"hero-info-body\");\n    }\n    get LATEST_BATTLES_BTN() {\n        return this._LATEST_BATTLES_BTN ||= Safe.unwrapHtmlElt(\"latest-battles-btn\");\n    }\n    get UPLOAD_FORM() {\n        return this._UPLOAD_FORM ||= Safe.unwrapHtmlElt(\"uploadForm\");\n    }\n    get CSV_FILE() {\n        return this._CSV_FILE ||= Safe.unwrapHtmlElt(\"csvFile\");\n    }\n    get USER_QUERY_FORM_NAME() {\n        return this._USER_QUERY_FORM_NAME ||= Safe.unwrapHtmlElt(\"user-query-form-name\");\n    }\n    get USER_QUERY_FORM_SERVER() {\n        return this._USER_QUERY_FORM_SERVER ||= Safe.unwrapHtmlElt(\"user-query-form-server\");\n    }\n    get AUTO_ZOOM_FLAG() {\n        return this._AUTO_ZOOM_FLAG ||= Safe.unwrapHtmlElt(\"auto-zoom-flag\");\n    }\n    get USER_NAME() {\n        return this._USER_NAME ||= Safe.unwrapHtmlElt(\"user-name\");\n    }\n    get USER_ID() {\n        return this._USER_ID ||= Safe.unwrapHtmlElt(\"user-id\");\n    }\n    get USER_SERVER() {\n        return this._USER_SERVER ||= Safe.unwrapHtmlElt(\"user-server\");\n    }\n    get BATTLE_FILTER_TOGGLE() {\n        return this._BATTLE_FILTER_TOGGLER ||= Safe.unwrapHtmlElt(\"filter-battle-table\");\n    }\n    get ID_SEARCH_FLAG() {\n        return this._ID_SEARCH_FLAG ||= Safe.unwrapHtmlElt(\"id-search-flag\");\n    }\n    get SEASON_DETAILS_TBL() {\n        return this._SEASON_DETAILS_TBL ||=\n            Safe.unwrapHtmlElt(\"season-details-tbl\");\n    }\n    get PERFORMANCE_STATS_TBL() {\n        return this._PERFORMANCE_STATS_TBL ||= Safe.unwrapHtmlElt(\"performance-stats-tbl\");\n    }\n    get FIRST_PICK_STATS_TBL() {\n        return this._FIRST_PICK_STATS_TBL ||= Safe.unwrapHtmlElt(\"first-pick-stats-tbl\");\n    }\n    get PREBAN_STATS_TBL() {\n        return this._PREBAN_STATS_TBL ||= Safe.unwrapHtmlElt(\"preban-stats-tbl\");\n    }\n    get PLAYER_TBL() {\n        return this._PLAYER_TBL ||= Safe.unwrapHtmlElt(\"player-tbl\");\n    }\n    get OPPONENT_TBL() {\n        return this._OPPONENT_TBL ||= Safe.unwrapHtmlElt(\"opponent-tbl\");\n    }\n    get BATTLES_TBL() {\n        return this._BATTLE_TBL ||= Safe.unwrapHtmlElt(\"battles-tbl\");\n    }\n    get RANK_PLOT() {\n        return this._RANK_PLOT ||= Safe.unwrapHtmlElt(\"rank-plot\");\n    }\n    get MESSAGE_ELEMENTS_LIST() {\n        return [this.SELECT_DATA_MSG, this.FILTER_MSG];\n    }\n    get SEARCH_INPUT() {\n        return this._SEARCH_INPUT ||= Safe.unwrapHtmlElt(\"searchInput\");\n    }\n    get HERO_SEARCH_OPTIONS() {\n        return this._SEARCH_OPTIONS ||= Safe.unwrapHtmlElt(\"hero-option-list\");\n    }\n    get HERO_PLAYER_TBL() {\n        return this._HERO_PLAYER_TBL ||= Safe.unwrapHtmlElt(\"hero-player-tbl\");\n    }\n    get HERO_OPPONENT_TBL() {\n        return this._HERO_OPPONENT_TBL ||= Safe.unwrapHtmlElt(\"hero-opponent-tbl\");\n    }\n}\nclass NavBarElements {\n    _SIDEBAR_HIDE_BTN = null;\n    get SIDEBAR_HIDE_BTN() {\n        return (this._SIDEBAR_HIDE_BTN ||= Safe.unwrapHtmlElt(\"sidebar-hide\"));\n    }\n    _CLEAR_DATA_BTN = null;\n    get CLEAR_DATA_BTN() {\n        return (this._CLEAR_DATA_BTN ||= Safe.unwrapHtmlElt(\"clear-data-btn\"));\n    }\n    _EXPORT_CSV_BTN = null;\n    get EXPORT_DATA_BTN() {\n        return (this._EXPORT_CSV_BTN ||= Safe.unwrapHtmlElt(\"export-data-btn\"));\n    }\n    _OFFICIAL_SITE_BTN = null;\n    get OFFICIAL_SITE_BTN() {\n        return (this._OFFICIAL_SITE_BTN ||= Safe.unwrapHtmlElt(\"official-site-btn\"));\n    }\n    _USER_NAME = null;\n    get USER_NAME() {\n        return (this._USER_NAME ||= Safe.unwrapHtmlElt(\"user-name\"));\n    }\n    _USER_ID = null;\n    get USER_ID() {\n        return (this._USER_ID ||= Safe.unwrapHtmlElt(\"user-id\"));\n    }\n    _USER_SERVER = null;\n    get USER_SERVER() {\n        return (this._USER_SERVER ||= Safe.unwrapHtmlElt(\"user-server\"));\n    }\n    _SIDEBAR_CONTROL = null;\n    get SIDEBAR_CONTROL() {\n        return (this._SIDEBAR_CONTROL ||= Safe.unwrapHtmlElt(\"sidebar-control\"));\n    }\n    _REFRESH_REFERENCES_BTN = null;\n    get REFRESH_REFERENCES_BTN() {\n        return (this._REFRESH_REFERENCES_BTN ||= Safe.unwrapHtmlElt(\"refresh-references-btn\"));\n    }\n}\nclass SEARCH_PAGE_ELEMENTS {\n    _SEARCH_DOMAINS = null;\n    get SEARCH_DOMAINS() {\n        return (this._SEARCH_DOMAINS ||= Safe.unwrapHtmlElt(\"search-domains\"));\n    }\n    _SEARCH_SUBMIT_BTN = null;\n    get SEARCH_SUBMIT_BTN() {\n        return (this._SEARCH_SUBMIT_BTN ||=\n            Safe.unwrapHtmlElt(\"search-submit-btn\"));\n    }\n    _SEARCH_FORM = null;\n    get SEARCH_FORM() {\n        return (this._SEARCH_FORM ||= Safe.unwrapHtmlElt(\"searchForm\"));\n    }\n    _SEARCH_TABLE_CONTAINER = null;\n    get SEARCH_TABLE_CONTAINER() {\n        return (this._SEARCH_TABLE_CONTAINER ||= Safe.unwrapHtmlElt(\"search-table-container\"));\n    }\n}\nclass FILTER_SYNTAX_PAGE_ELEMENTS {\n    _FILTER_SYNTAX_RULES_CONTAINER = null;\n    get FILTER_SYNTAX_RULES_CONTAINER() {\n        return (this._FILTER_SYNTAX_RULES_CONTAINER ||= Safe.unwrapHtmlElt(\"filter-syntax-rules-container\"));\n    }\n    _ALL_CONTENT_CONTAINER = null;\n    get ALL_CONTENT_CONTAINER() {\n        return (this._ALL_CONTENT_CONTAINER ||= Safe.unwrapHtmlElt(\"all-content-container\"));\n    }\n}\nclass INFO_PAGE_ELEMENTS {\n    IDS = {\n        OVERVIEW_CONTAINER: \"overview-container\",\n        OVERVIEW_CARD: \"overview-card\",\n        RETURN_BTN: \"info-return-btn\",\n        RETURN_CONTAINER: \"info-return-container\",\n        FILTER_SYNTAX_CONTAINER: \"filter-syntax-rules-container\",\n        FILTER_EXAMPLES_AND_TEST_CONTAINER: \"filter-syntax-examples-and-test-container\",\n        INFORMATION_CONTENT_LINKS_CONTAINER: \"information-content-links-container\",\n        ALL_CONTENT_CONTAINER: \"all-content-container\",\n        FILTER_OVERVIEW: \"filter-rules-card\",\n        FIELD_SYNTAX: \"fields-card\",\n        FUNCTION_SYNTAX: \"functions-card\",\n        OPERATOR_SYNTAX: \"operators-card\",\n        DATA_SYNTAX: \"declared-data-card\",\n        STRUCTURAL_SYNTAX: \"structural-syntax-card\",\n        EX_FILTER_1: \"exFilter1\",\n        EX_FILTER_2: \"exFilter2\",\n        EX_FILTER_3: \"exFilter3\",\n        EX_FILTER_4: \"exFilter4\",\n        EX_FILTER_5: \"exFilter5\",\n        TEST_FILTER_FORM: \"test-filter-form\",\n        TEST_FILTER_MESSAGE: \"filterMSG\",\n        TEST_SYNTAX_CARD: \"test-syntax-card\",\n        CHECK_SYNTAX_BTN: \"check-syntax-btn\",\n    };\n    _CACHE = {};\n    constructor() {\n        this._CACHE = {};\n    }\n    getFromId(id) {\n        return this._CACHE[id] ||= Safe.unwrapHtmlElt(id);\n    }\n}\nclass DocElements {\n    HOME_PAGE;\n    NAV_BAR;\n    SEARCH_PAGE;\n    FILTER_SYNTAX_PAGE;\n    INFO_PAGE;\n    _BODY_FOOTER_CONTAINER = null;\n    _FOOTER_WRAPPER = null;\n    constructor() {\n        this.HOME_PAGE = new HomePageElements();\n        this.NAV_BAR = new NavBarElements();\n        this.SEARCH_PAGE = new SEARCH_PAGE_ELEMENTS();\n        this.FILTER_SYNTAX_PAGE = new FILTER_SYNTAX_PAGE_ELEMENTS();\n        this.INFO_PAGE = new INFO_PAGE_ELEMENTS();\n    }\n    get BODY_FOOTER_CONTAINER() {\n        return (this._BODY_FOOTER_CONTAINER ??=\n            Safe.unwrapHtmlElt(\"body-footer-container\"));\n    }\n    get FOOTER_WRAPPER() {\n        return (this._FOOTER_WRAPPER ||= Safe.unwrapHtmlElt(\"footer-wrapper\"));\n    }\n}\nconst DOC_ELEMENTS = new DocElements();\nexport default DOC_ELEMENTS;\n","import { HomePageStateManager, } from \"../orchestration/page-state-manager.ts\";\nimport { CSVHeaders, E7_GG_HOME_URL, E7_STOVE_HOME_URL, WORLD_CODE_TO_CLEAN_STR, } from \"../../e7/references.ts\";\nimport UserManager from \"../../e7/user-manager.ts\";\nimport DOC_ELEMENTS from \"./doc-element-references.ts\";\nimport IPM from \"../orchestration/inter-page-manager.ts\";\nimport { ContentManager } from \"../../content-manager.ts\";\nimport { LangManager } from \"../../lang-manager.ts\";\nimport { ExportImportFns } from \"../../export-import-data-tools.ts\";\nimport { HOME_PAGE_STATES } from \"./page-state-references.ts\";\nfunction navToHome() {\n    // @ts-ignore\n    window.location.href = URL_UTILS.HOME_PAGE_URL;\n}\n// used for pages outside of home page to handle nav bar (will always switch pages)\nfunction addNavListeners() {\n    document.querySelectorAll(\".nav-link\").forEach((link) => {\n        link.addEventListener(\"click\", async function (event) {\n            if (!(\"dataset\" in link) || !(link.dataset && typeof link.dataset === \"object\" && \"nav\" in link.dataset))\n                return;\n            const navType = link.dataset.nav;\n            console.log(\"Clicked nav item:\", navType);\n            if (Object.values(HOME_PAGE_STATES).includes(navType)) {\n                if (navType === HOME_PAGE_STATES.SELECT_DATA) {\n                    await HomePageStateManager.setState(HOME_PAGE_STATES.SELECT_DATA);\n                    navToHome();\n                }\n                else if (navType === HOME_PAGE_STATES.HERO_INFO) {\n                    await HomePageStateManager.setState(HOME_PAGE_STATES.HERO_INFO);\n                    navToHome();\n                }\n                else if (navType === HOME_PAGE_STATES.SHOW_STATS) {\n                    const user = await UserManager.getUser();\n                    // Stats will not show if there is no active user ; will redirect to select data view with error\n                    if (!user) {\n                        await HomePageStateManager.setState(HOME_PAGE_STATES.SELECT_DATA);\n                        await IPM.pushAction({\n                            message: \"Active user not found; you must either query a valid user or upload battles to view hero stats.\",\n                            action: IPM.ACTIONS.SHOW_NO_USER_MSG\n                        });\n                        navToHome();\n                    }\n                    else {\n                        await HomePageStateManager.setState(HOME_PAGE_STATES.SHOW_STATS);\n                        navToHome();\n                    }\n                }\n            }\n        });\n    });\n}\nfunction addClearDataBtnListener() {\n    DOC_ELEMENTS.NAV_BAR.CLEAR_DATA_BTN.addEventListener(\"click\", async function () {\n        const user = await UserManager.getUser();\n        if (user) {\n            await HomePageStateManager.setState(HOME_PAGE_STATES.SELECT_DATA);\n            await IPM.pushAction({ action: IPM.ACTIONS.CLEAR_USER });\n        }\n        else {\n            await HomePageStateManager.setState(HOME_PAGE_STATES.SELECT_DATA);\n            await IPM.pushAction({ action: IPM.ACTIONS.SHOW_DATA_ALREADY_CLEARED_MSG });\n        }\n        navToHome();\n    });\n}\n/**\n * Simulates hover on mobile devices for \"brace\" buttons (buttons with a dashed\n * border). When a button is touched, it adds a class to simulate a hover effect.\n * The class is automatically removed after 150ms.\n */\nfunction addBraceButtonListeners() {\n    const braceButtons = [\n        DOC_ELEMENTS.NAV_BAR.CLEAR_DATA_BTN,\n        DOC_ELEMENTS.NAV_BAR.EXPORT_DATA_BTN,\n        DOC_ELEMENTS.NAV_BAR.OFFICIAL_SITE_BTN\n    ];\n    console.log(\"Adding brace button listeners\");\n    braceButtons.forEach((btn) => {\n        // Simulate hover on mobile\n        btn.addEventListener(\"touchstart\", () => {\n            btn.classList.add(\"touch-hover\");\n            // Auto-expire hover\n            setTimeout(() => btn.classList.remove(\"touch-hover\"), 150);\n        });\n    });\n}\nfunction writeUserInfo(user, lang = \"en\") {\n    if (user) {\n        DOC_ELEMENTS.NAV_BAR.USER_NAME.innerText = user.name;\n        DOC_ELEMENTS.NAV_BAR.USER_ID.innerText = `${user.id}`;\n        DOC_ELEMENTS.NAV_BAR.USER_SERVER.innerText =\n            WORLD_CODE_TO_CLEAN_STR[user.world_code];\n        DOC_ELEMENTS.NAV_BAR.OFFICIAL_SITE_BTN.onclick = () => {\n            window.open(generateGGLink(user, lang), \"_blank\", \"noopener,noreferrer\");\n        };\n    }\n    else {\n        DOC_ELEMENTS.NAV_BAR.USER_NAME.innerText = \"(None)\";\n        DOC_ELEMENTS.NAV_BAR.USER_ID.innerText = \"(None)\";\n        DOC_ELEMENTS.NAV_BAR.USER_SERVER.innerText = \"(None)\";\n        DOC_ELEMENTS.NAV_BAR.OFFICIAL_SITE_BTN.onclick = () => {\n            window.open(E7_GG_HOME_URL, \"_blank\", \"noopener,noreferrer\");\n        };\n    }\n}\nexport function convertBattlesToCSV(arr) {\n    const headers = CSVHeaders;\n    const csvRows = [];\n    // add headers\n    csvRows.push(headers.map(h => `\"${h}\"`).join(\",\"));\n    // add rows\n    for (const obj of arr) {\n        const values = headers.map(h => {\n            let v = obj[h] ?? \"\";\n            if (Array.isArray(v))\n                v = JSON.stringify(v).replace(/\"/g, '\"\"');\n            return `\"${v}\"`;\n        });\n        csvRows.push(values.join(\",\"));\n    }\n    return csvRows.join(\"\\n\");\n}\nexport function downloadCSV(csv, filename) {\n    const BOM = \"\\uFEFF\";\n    const csvFile = new Blob([BOM + csv], { type: \"text/csv;charset=utf-8;\" });\n    const downloadLink = document.createElement(\"a\");\n    downloadLink.download = filename;\n    downloadLink.href = window.URL.createObjectURL(csvFile);\n    downloadLink.style.display = \"none\";\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n}\nfunction addExportDataBtnListener() {\n    DOC_ELEMENTS.NAV_BAR.EXPORT_DATA_BTN.addEventListener(\"click\", async function () {\n        const user = await ContentManager.UserManager.getUser();\n        if (!user) {\n            await IPM.pushAction({\n                message: \"User not found; cannot export data without an active user\",\n                action: IPM.ACTIONS.SHOW_NO_USER_MSG,\n            });\n            await HomePageStateManager.setState(HOME_PAGE_STATES.SELECT_DATA);\n            navToHome();\n            return;\n        }\n        await ExportImportFns.triggerDownload();\n    });\n}\nasync function eraseUserFromPage() {\n    await UserManager.clearUserData();\n    writeUserInfo(null);\n}\nasync function setUserOnPage(user) {\n    await UserManager.setUser(user);\n    const lang = await LangManager.getLang();\n    writeUserInfo(user, lang);\n}\nfunction generateGGLink(user, lang) {\n    const url = `${E7_STOVE_HOME_URL}/${lang}/gg/battlerecord/${user.world_code}/${user.id}`;\n    return url;\n}\nasync function initialize() {\n    const user = await UserManager.getUser();\n    writeUserInfo(user);\n    addNavListeners();\n    addClearDataBtnListener();\n    addExportDataBtnListener();\n    addBraceButtonListeners();\n}\nlet NavBarUtils = {\n    addNavListeners: addNavListeners,\n    addClearDataBtnListener: addClearDataBtnListener,\n    writeUserInfo: writeUserInfo,\n    initialize: initialize,\n    navToHome: navToHome,\n    addExportDataBtnListener: addExportDataBtnListener,\n    addBraceButtonListeners: addBraceButtonListeners,\n    eraseUserFromPage: eraseUserFromPage,\n    setUserOnPage: setUserOnPage,\n};\nexport { NavBarUtils };\n","export const HOME_PAGE_STATES = {\n    SELECT_DATA: \"select-data\",\n    SHOW_STATS: \"show-stats\",\n    LOAD_DATA: \"load-data\",\n    HERO_INFO: \"hero-info\",\n};\n","import HeroManager from \"../../e7/hero-manager.ts\";\r\nimport { FilterParser } from \"../../e7/filter-parsing/filter-parser.ts\";\r\nimport {\r\n\tTextController,\r\n\tTextPacket,\r\n} from \"../orchestration/text-controller.js\";\r\n\r\nlet PageUtils = {\r\n\tvalidateFilterSyntax: async function (str) {\r\n\t\tconst HeroDicts = await HeroManager.getHeroDicts();\r\n\t\tlet filterMSG = document.getElementById(\"filterMSG\");\r\n\t\ttry {\r\n\t\t\tlet parser = await FilterParser.fromFilterStr(str, HeroDicts);\r\n\t\t\tconsole.log(parser.asString());\r\n\t\t\tTextController.write(\r\n\t\t\t\tnew TextPacket(\"Validation Passed\", filterMSG, [\r\n\t\t\t\t\tTextController.STYLES.GREEN,\r\n\t\t\t\t])\r\n\t\t\t);\r\n\t\t\treturn true;\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t\tTextController.write(\r\n\t\t\t\tnew TextPacket(`Validation Failed: ${err.message}`, filterMSG, [\r\n\t\t\t\t\tTextController.STYLES.RED,\r\n\t\t\t\t])\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\r\n\tsetScrollPercent: function (percent) {\r\n\t\tconsole.log(`Scrolling to ${percent}%`);\r\n\t\tconst maxScroll =\r\n\t\t\tdocument.documentElement.scrollHeight - window.innerHeight;\r\n\t\tconst targetScroll = (percent / 100) * maxScroll;\r\n\t\t// Temporarily disable CSS smooth scrolling\r\n\t\tconst html = document.documentElement;\r\n\t\tconst prevScrollBehavior = html.style.scrollBehavior;\r\n\t\thtml.style.scrollBehavior = \"auto\";\r\n\r\n\t\twindow.scrollTo({ top: targetScroll });\r\n\r\n\t\t// Restore previous behavior\r\n\t\thtml.style.scrollBehavior = prevScrollBehavior;\r\n\t},\r\n\r\n\tgetScrollPercent: function () {\r\n\t\tconst scrollTop = window.scrollY || document.documentElement.scrollTop;\r\n\t\tconst scrollHeight = document.documentElement.scrollHeight;\r\n\t\tconst clientHeight = window.innerHeight;\r\n\t\tconst maxScroll = scrollHeight - clientHeight;\r\n\r\n\t\tif (maxScroll === 0) return 0; // avoid division by zero\r\n\r\n\t\treturn (scrollTop / maxScroll) * 100;\r\n\t},\r\n\r\n\tsetVisibility(element, visible) {\r\n\t\tif (visible) {\r\n\t\t\telement.classList.remove(\"d-none\");\r\n\t\t} else {\r\n\t\t\telement.classList.add(\"d-none\");\r\n\t\t}\r\n\t},\r\n};\r\n\r\nexport default PageUtils;\r\n","import {\r\n\tCOLUMNS_MAP,\r\n\tARRAY_COLUMNS,\r\n\tHERO_STATS_COLUMN_MAP,\r\n} from \"./e7/references.ts\";\r\nimport { Safe } from \"./html-safe.ts\";\r\nimport DOC_ELEMENTS from \"./pages/page-utilities/doc-element-references.ts\";\r\n\r\nfunction destroyDataTable(tableid) {\r\n\tconst tableSelector = $(`#${tableid}`);\r\n\tif ($.fn.dataTable.isDataTable(tableSelector)) {\r\n\t\tconsole.log(\"Destroying DataTable: \", tableid);\r\n\t\ttableSelector.DataTable().clear().destroy();\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns a copy of the dataArr with the array columns converted to strings\r\n * (using JSON.stringify). This is necessary for the DataTables library to\r\n * properly render the data.\r\n *\r\n * @param {Array<Object>} dataArr - The data array to modify.\r\n * @returns {Array<Object>} - The modified data array.\r\n */\r\nfunction getDataWithStringifiedArrayColumns(dataArr) {\r\n\tdataArr = structuredClone(dataArr);\r\n\tfor (const row of dataArr) {\r\n\t\tfor (const col of ARRAY_COLUMNS) {\r\n\t\t\trow[col] = JSON.stringify(row[col]);\r\n\t\t}\r\n\t}\r\n\treturn dataArr;\r\n}\r\n\r\nfunction convertPercentToColorClass(str) {\r\n\tconst num = Number(str.replace(\"%\", \"\"));\r\n\tif (num > 50) {\r\n\t\treturn \"text-over50\";\r\n\t} else if (num < 50) {\r\n\t\treturn \"text-below50\";\r\n\t} else {\r\n\t\treturn \"\";\r\n\t}\r\n}\r\n\r\nfunction getTbody(tableid) {\r\n\tconst tbody = document.getElementById(`${tableid}-body`);\r\n\tif (!tbody) {\r\n\t\tthrow new Error(`Could not find tbody with id ${tableid}-body`);\r\n\t}\r\n\treturn tbody;\r\n}\r\n\r\nlet Tables = {\r\n\tpopulateHeroStatsTable: function (tableid, data) {\r\n\t\tdestroyDataTable(tableid);\r\n\r\n\t\tconst tbody = getTbody(tableid);\r\n\t\ttbody.innerHTML = \"\"; // Clear existing rows\r\n\r\n\t\tconst isP1 = tableid.toLowerCase().includes(\"player\");\r\n\t\tconst person = isP1 ? \"Player\" : \"Enemy\";\r\n\r\n\t\tconst P1_COLUMNS = [\r\n\t\t\tHERO_STATS_COLUMN_MAP.HERO_NAME,\r\n\t\t\tHERO_STATS_COLUMN_MAP.BATTLES,\r\n\t\t\tHERO_STATS_COLUMN_MAP.PICK_RATE,\r\n\t\t\tHERO_STATS_COLUMN_MAP.WINS,\r\n\t\t\tHERO_STATS_COLUMN_MAP.WIN_RATE,\r\n\t\t\tHERO_STATS_COLUMN_MAP.POSTBAN_RATE,\r\n\t\t\tHERO_STATS_COLUMN_MAP.SUCCESS_RATE,\r\n\t\t\tHERO_STATS_COLUMN_MAP.PLUS_MINUS,\r\n\t\t\tHERO_STATS_COLUMN_MAP.POINT_GAIN,\r\n\t\t\tHERO_STATS_COLUMN_MAP.AVG_CR,\r\n\t\t\tHERO_STATS_COLUMN_MAP.FIRST_TURN_RATE,\r\n\t\t];\r\n\r\n\t\tconst P2_COLUMNS = P1_COLUMNS.filter(\r\n\t\t\t(col) => col !== HERO_STATS_COLUMN_MAP.SUCCESS_RATE\r\n\t\t);\r\n\r\n\t\tconst columns = isP1 ? P1_COLUMNS : P2_COLUMNS;\r\n\r\n\t\tconsole.log(\"Columns: \", columns);\r\n\r\n\t\tconst tableSelector = $(`#${tableid}`);\r\n\r\n\t\tvar table = tableSelector.DataTable({\r\n\t\t\tlayout: {\r\n\t\t\t\ttopStart: \"buttons\",\r\n\t\t\t},\r\n\t\t\tlanguage: {\r\n\t\t\t\tinfo: \"Total rows: _TOTAL_\",\r\n\t\t\t},\r\n\t\t\torder: [[2, \"desc\"]], // order by pick rate desc\r\n\t\t\tbuttons: {\r\n\t\t\t\tname: \"primary\",\r\n\t\t\t\tbuttons: [\r\n\t\t\t\t\t\"copy\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\textend: \"csv\",\r\n\t\t\t\t\t\ttext: \"CSV\",\r\n\t\t\t\t\t\tfilename: person + \" Hero Stats\",\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\textend: \"excel\",\r\n\t\t\t\t\t\ttext: \"Excel\",\r\n\t\t\t\t\t\tfilename: person + \" Hero Stats\",\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tcolumnDefs: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttargets: \"_all\",\r\n\t\t\t\t\tclassName: \"nowrap\",\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\ttargets: 4, // \"win_rate\" column\r\n\t\t\t\t\tcreatedCell: function (td, cellData) {\r\n\t\t\t\t\t\tconst num = Number(cellData.replace(\"%\", \"\"));\r\n\t\t\t\t\t\tif (num < 50) {\r\n\t\t\t\t\t\t\ttd.style.color = \"red\";\r\n\t\t\t\t\t\t} else if (num > 50) {\r\n\t\t\t\t\t\t\ttd.style.color = \"mediumspringgreen\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\tpageLength: 50,\r\n\t\t\tscrollY: \"300px\",\r\n\t\t\tdeferRender: true,\r\n\t\t\tscroller: true,\r\n\t\t\tscrollCollapse: false,\r\n\t\t\tcolumns: columns.map((col) => ({ data: col })),\r\n\t\t});\r\n\t\ttable.rows.add(data).draw();\r\n\t\treturn table;\r\n\t},\r\n\r\n\tpopulateSeasonDetailsTable: function (tableid, data) {\r\n\t\tconst tbody = getTbody(tableid);\r\n\t\ttbody.innerHTML = \"\"; // Clear existing rows\r\n\r\n\t\tdata.forEach((item) => {\r\n\t\t\tconst row = document.createElement(\"tr\");\r\n\r\n\t\t\t// Populate each <td> in order\r\n\t\t\trow.innerHTML = `\r\n            <td>${item[\"Season Number\"]}</td>\r\n            <td>${item[\"Season\"]}</td>\r\n            <td>${item[\"Start\"]}</td>\r\n            <td>${item[\"End\"]}</td>\r\n            <td>${item[\"Status\"]}</td>\r\n            `;\r\n\t\t\ttbody.appendChild(row);\r\n\t\t});\r\n\t},\r\n\r\n\tpopulateServerStatsTable: function (tableid, data) {\r\n\t\tconst tbody = getTbody(tableid);\r\n\t\ttbody.innerHTML = \"\"; // Clear existing rows\r\n\r\n\t\tdata.forEach((item) => {\r\n\t\t\tconst row = document.createElement(\"tr\");\r\n\t\t\tconst labelColorClass = item[\"label\"].includes(\"Server\")\r\n\t\t\t\t? \"cm-keyword\"\r\n\t\t\t\t: \"cm-declared-data\";\r\n\r\n\t\t\t// Populate each <td> in order\r\n\t\t\trow.innerHTML = `\r\n            <td class=\"${labelColorClass}\">${item[\"label\"]}</td>\r\n            <td>${item[\"count\"]}</td>\r\n            <td>${item[\"frequency\"]}</td>\r\n            <td>${item[\"wins\"]}</td>\r\n            <td class=\"${convertPercentToColorClass(item[\"win_rate\"])}\">${\r\n\t\t\t\titem[\"win_rate\"]\r\n\t\t\t}</td>\r\n            <td>${item[\"+/-\"]}</td>\r\n            <td class=\"${convertPercentToColorClass(item[\"fp_wr\"])}\">${\r\n\t\t\t\titem[\"fp_wr\"]\r\n\t\t\t}</td>\r\n            <td class=\"${convertPercentToColorClass(item[\"sp_wr\"])}\">${\r\n\t\t\t\titem[\"sp_wr\"]\r\n\t\t\t}</td>\r\n            `;\r\n\t\t\ttbody.appendChild(row);\r\n\t\t});\r\n\t},\r\n\r\n\tpopulatePlayerPrebansTable: function (tableid, data) {\r\n\t\tconst tbody = getTbody(tableid);\r\n\t\ttbody.innerHTML = \"\"; // Clear existing rows\r\n\r\n\t\tdata.forEach((item) => {\r\n\t\t\tconst row = document.createElement(\"tr\");\r\n\r\n\t\t\t// Populate each <td> in order\r\n\t\t\trow.innerHTML = `\r\n            <td>${item[\"preban\"]}</td>\r\n            <td>${item[\"appearances\"]}</td>\r\n            <td>${item[\"appearance_rate\"]}</td>\r\n            <td class=\"${convertPercentToColorClass(item[\"win_rate\"])}\">${\r\n\t\t\t\titem[\"win_rate\"]\r\n\t\t\t}</td>\r\n            <td>${item[\"+/-\"]}</td>\r\n            `;\r\n\r\n\t\t\ttbody.appendChild(row);\r\n\t\t});\r\n\t},\r\n\r\n\tpopulatePlayerFirstPickTable: function (tableid, data) {\r\n\t\tconst tbody = getTbody(tableid);\r\n\t\ttbody.innerHTML = \"\"; // Clear existing rows\r\n\r\n\t\tdata.forEach((item) => {\r\n\t\t\tconst row = document.createElement(\"tr\");\r\n\r\n\t\t\t// Populate each <td> in order\r\n\t\t\trow.innerHTML = `\r\n            <td>${item[\"hero\"]}</td>\r\n            <td>${item[\"appearances\"]}</td>\r\n            <td>${item[\"appearance_rate\"]}</td>\r\n            <td class=\"${convertPercentToColorClass(item[\"win_rate\"])}\">${\r\n\t\t\t\titem[\"win_rate\"]\r\n\t\t\t}</td>\r\n            <td>${item[\"+/-\"]}</td>\r\n            `;\r\n\r\n\t\t\ttbody.appendChild(row);\r\n\t\t});\r\n\t},\r\n\r\n\tpopulateFullBattlesTable: function (tableid, data, user) {\r\n\t\tdestroyDataTable(tableid);\r\n\r\n\t\tdata = getDataWithStringifiedArrayColumns(data);\r\n\t\tconst tbody = getTbody(tableid);\r\n\t\ttbody.innerHTML = \"\"; // Clear existing rows\r\n\r\n\t\tlet fileName;\r\n\t\tconst timestamp = new Date().toISOString().split(\"T\")[0] || \"\";\r\n\t\tif (user) {\r\n\t\t\tfileName = `${user.name} (${user.id}) ${timestamp}`;\r\n\t\t} else {\r\n\t\t\tfileName =\r\n\t\t\t\tdata.length === 0 ? \"Empty\" : `UID(${data[0][\"P1 ID\"]}) ${timestamp}`;\r\n\t\t}\r\n\r\n\t\tvar table = $(`#${tableid}`).DataTable({\r\n\t\t\tlayout: {\r\n\t\t\t\ttopStart: \"buttons\",\r\n\t\t\t},\r\n\t\t\tlanguage: {\r\n\t\t\t\tinfo: \"Total rows: _TOTAL_\",\r\n\t\t\t},\r\n\t\t\torder: [[2, \"desc\"]], // Sort by Date/Time desc by default\r\n\t\t\tcolumnDefs: [\r\n\t\t\t\t{\r\n\t\t\t\t\ttargets: \"_all\",\r\n\t\t\t\t\tclassName: \"nowrap\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t\trowCallback: function (row, data, dataIndex) {\r\n\t\t\t\tconst winCell = row.cells[14];\r\n\t\t\t\tconst firstPickCell = row.cells[15];\r\n\t\t\t\tconst firstTurnCell = row.cells[16];\r\n\r\n\t\t\t\tif (data[\"Win\"] === true) {\r\n\t\t\t\t\twinCell.style.color = \"mediumspringgreen\";\r\n\t\t\t\t} else if (data[\"Win\"] === false) {\r\n\t\t\t\t\twinCell.style.color = \"red\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (data[\"First Pick\"] === true) {\r\n\t\t\t\t\tfirstPickCell.style.color = \"deepskyblue\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (data[\"First Turn\"] === true) {\r\n\t\t\t\t\tfirstTurnCell.style.color = \"deepskyblue\";\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tbuttons: {\r\n\t\t\t\tname: \"primary\",\r\n\t\t\t\tbuttons: [\r\n\t\t\t\t\t\"copy\",\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\textend: \"csv\",\r\n\t\t\t\t\t\ttext: \"CSV\",\r\n\t\t\t\t\t\tfilename: fileName,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\textend: \"excel\",\r\n\t\t\t\t\t\ttext: \"Excel\",\r\n\t\t\t\t\t\tfilename: fileName,\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t\tpageLength: 50,\r\n\t\t\tscrollY: \"300px\",\r\n\t\t\tdeferRender: true,\r\n\t\t\tscroller: true,\r\n\t\t\tscrollCollapse: false,\r\n\t\t\tcolumns: Object.values(COLUMNS_MAP)\r\n\t\t\t\t.filter((col) => !col.toLowerCase().includes(\"prime\"))\r\n\t\t\t\t.map((col) => ({ data: col })),\r\n\t\t});\r\n\t\ttable.rows.add(data).draw();\r\n\t\treturn table;\r\n\t},\r\n\r\n\treplaceDatatableData: function (tableid, data) {\r\n\t\tconst datatableReference = $(`#${tableid}`).DataTable();\r\n\t\tdatatableReference.clear().rows.add(data).draw();\r\n\t},\r\n\r\n\treplaceBattleData(data) {\r\n\t\tdata = getDataWithStringifiedArrayColumns(data);\r\n\t\tconst id = DOC_ELEMENTS.HOME_PAGE.BATTLES_TBL.id;\r\n\t\tthis.replaceDatatableData(id, data);\r\n\t},\r\n};\r\n\r\nlet CardContent = {\r\n\tpopulateGeneralStats: function (general_stats) {\r\n\t\tSafe.setText(\"total-battles\", general_stats.total_battles);\r\n\t\tSafe.setText(\"first-pick-count\", general_stats.first_pick_count);\r\n\t\tSafe.setText(\"first-pick-rate\", ` (${general_stats.first_pick_rate})`);\r\n\t\tSafe.setText(\"second-pick-count\", general_stats.second_pick_count);\r\n\t\tSafe.setText(\"second-pick-rate\", ` (${general_stats.second_pick_rate})`);\r\n\t\tSafe.setText(\"total-winrate\", general_stats.total_winrate);\r\n\t\tSafe.setText(\"first-pick-winrate\", general_stats.first_pick_winrate);\r\n\t\tSafe.setText(\"second-pick-winrate\", general_stats.second_pick_winrate);\r\n\t\tSafe.setText(\"total-wins\", general_stats.total_wins);\r\n\t\tSafe.setText(\"max-win-streak\", general_stats.max_win_streak);\r\n\t\tSafe.setText(\"max-loss-streak\", general_stats.max_loss_streak);\r\n\t\tSafe.setText(\"avg-ppg\", general_stats.avg_ppg);\r\n\t\tSafe.setText(\"avg-turns\", general_stats.avg_turns);\r\n\t\tSafe.setText(\"avg-time\", general_stats.avg_time);\r\n\t\tSafe.setText(\"max-turns\", general_stats.max_turns);\r\n\t\tSafe.setText(\"max-time\", general_stats.max_time);\r\n\t\tSafe.setText(\"first-turn-games\", general_stats.first_turn_games);\r\n\t\tSafe.setText(\"first-turn-rate\", general_stats.first_turn_rate);\r\n\t},\r\n};\r\n\r\nexport { Tables, CardContent };\r\n","export function toTitleCase(str) {\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\nexport function strArrToCountMap(strArr) {\n    let acc = {};\n    return strArr.reduce((acc, elt) => {\n        acc[elt] = (acc[elt] || 0) + 1;\n        return acc;\n    }, acc);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var hasSymbol = typeof Symbol === \"function\";\nvar webpackQueues = hasSymbol ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = hasSymbol ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = hasSymbol ? Symbol(\"webpack error\") : \"__webpack_error__\";\n\n\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tvar handle = (deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}\n\tvar done = (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue))\n\tbody(handle, done);\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./static/assets/js/pages/home-page/home-page.ts\");\n",""],"names":["e","t","r","Symbol","n","iterator","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","length","l","TypeError","call","done","value","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","_regenerator","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","RS_BATTLE_URL","HERO_URL","USER_URL","SEASON_URL","ARTIFACT_JSON_URL","PYAPI","test","data","console","log","rank_plot","fetchFromPython","_fetchFromPython","_callee","url","response","_context","fetch","ok","json","_x","fetchHeroData","_fetchHeroData","_callee2","_context2","rsFetchBattleData","_rsFetchBattleData","_callee3","user","_context3","Error","method","headers","body","JSON","stringify","_x2","fetchSeasonDetails","_fetchSeasonDetails","_callee4","seasonDetails","_context4","success","parse","error","fetchArtifactJson","_fetchArtifactJson","_callee5","artifactJson","_context5","fetchUser","_fetchUser","_callee6","userData","_context6","name","world_code","id","concat","foundUser","_x3","SavedFilters","extendFilters","currFilterStr","filterName","filter","replace","slice","TableConstructor","DOC_ELEMENTS","COLUMNS_MAP","HERO_TBL_COLS","TO_BUILD","tbl","HOME_PAGE","SEASON_DETAILS_TBL","cols","PERFORMANCE_STATS_TBL","FIRST_PICK_STATS_TBL","PREBAN_STATS_TBL","PLAYER_TBL","OPPONENT_TBL","col","toLowerCase","includes","BATTLES_TBL","values","buildTable","tableElt","constructor","addColumns","HERO_INFO_TO_BUILD","tblID","IDS","HERO_PLAYER_TBL","HERO_OPPONENT_TBL","heroInfoBuildTables","forEach","entry","getElt","buildTables","HomePageStateManager","NavBarUtils","TextUtils","CONTEXT","UserManager","resizeRankPlot","HOME_PAGE_STATES","addNavListener","stateDispatcher","document","querySelectorAll","link","addEventListener","_ref","event","navType","currentState","dataset","nav","getState","SELECT_DATA","HERO_INFO","SHOW_STATS","getUser","queueSelectDataMsgRed","href","addClearDataBtnListener","NAV_BAR","CLEAR_DATA_BTN","_ref2","_event","eraseUserFromPage","queueSelectDataMsgGreen","SCROLL_PERCENTS","addSideBarHideListener","SIDEBAR_HIDE_BTN","addSideBarListener","SIDEBAR_CONTROL","addHomePageListeners","dispatch","addLoadDataListeners","_","FilterParser","ContentManager","StatsView","ExportImportFns","HOME_PAGE_FNS","processUpload","_processUpload","selectedFile","uploadedData","battleArr","uploadedUser","ClientCache","get","Keys","RAW_UPLOAD","parseJSON","restructureParsedUploadBattles","battles","findUser","playerID","handleBattleQuery","_handleBattleQuery","HeroDicts","artifacts","_data","rawBattles","ArtifactManager","getArtifactCodeToNameMap","BattleManager","cacheQuery","redirectError","_x4","_x5","_redirectError","err","source","sourceState","QUERY","UPLOAD","STATS","VALUES","SOURCE","message","queueFilterMsgRed","try_find_user","_x6","_try_find_user","userObj","replaceUser","_x7","_replaceUser","lang","clearUserData","setUser","LangManager","getLang","writeUserInfo","runLogic","_x8","_runLogic","autoQuery","result","battlesList","filters","stats","_t","_t2","_t3","HeroManager","getHeroDicts","popKey","KEYS","AUTO_QUERY","cacheUpload","TRY_SET_USER","getBattles","getFiltersFromCache","getStats","setStats","populateContent","STATS_PRE_RENDER_COMPLETED","initialize","_initialize","_callee7","_context7","handleDispatch","_x9","_handleDispatch","_callee8","_context8","homePageSetView","LOAD_DATA","LoadDataView","triggerState","TextController","TextPacket","writeMsgRed","msg","write","SELECT_DATA_MSG","STYLES","RED","addUserFormListener","_addUserFormListener","checkbox","key","form","ID_SEARCH_FLAG","cache","checked","getElementById","idSearchFlag","preventDefault","FormData","Number","addUploadFormListener","_addUploadFormListener","AUTO_QUERY_FLAG","CSV_FILE","target","files","UPLOAD_FORM","_ref4","autoQueryFlag","addSelectDataListeners","SelectDataView","PageUtils","Tables","getSizes","PLOT_REFS","addBattleTableFilterToggleListener","filterBattleTableCheckbox","BATTLE_FILTER_TOGGLE","replaceBattleData","filteredBattlesObj","addAutoZoomListener","autoZoomCheckbox","AUTO_ZOOM_FLAG","addLatestBattlesBtnListener","latestBattlesBtn","LATEST_BATTLES_BTN","addPremadeFilterButtonListener","editor","closest","textContent","trim","currStr","getValue","newStr","setValue","addFilterButtonListeners","filterForm","clickedButton","action","syntaxStr","appliedFilter","validFilter","submitter","getFilterStr","validateFilterSyntax","setFilterStr","addPlotlyLineAndMarkWidthListener","plotDiv","RANK_PLOT","__zoomListenerAttached","on","_ref5","ignore","originalXRange","sizes","newRange","zoomFactor","newSizes","newMarkerSize","newLineWidth","IGNORE_RELAYOUT","undefined","markerSize","lineWidth","Plotly","restyle","addStatsListeners","CardContent","RegExps","Safe","getZoom","generateRankPlot","getScrollbarWidth","setTimeout","Plots","resize","filtersAreRelevant","areFiltersApplied","populatePlot","_populatePlot","container","autoZoom","zoom","relayoutConfig","markerConfig","unwrapHtmlElt","numFilters","endX","startX","startY","endY","relayout","_populateContent","SeasonManager","getSeasonDetails","_typeof","time","populateSeasonDetailsTable","populateHeroStatsTable","playerHeroStats","enemyHeroStats","populatePlayerFirstPickTable","firstPickStats","populatePlayerPrebansTable","prebanStats","populateServerStatsTable","performanceStats","populateFullBattlesTable","populateGeneralStats","generalStats","timeEnd","addCodeMirror","_addCodeMirror","textarea","CodeMirror","defineMode","token","stream","state","tokenMatch","fromTextArea","mode","lineNumbers","theme","setSize","save","classList","remove","CODE_MIRROR_EDITOR","preFirstRenderLogic","_preFirstRenderLogic","postFirstRenderLogic","_postFirstRenderLogic","refresh","USER_QUERY_FORM_NAME","addScrollTableOffsets","tables","scrollWidth","_i","_tables","thead","querySelector","style","setProperty","IS_FIRST_RENDER","STATS_POST_RENDER_COMPLETED","GREEN","E_BLUE","_createClass","text","docElement","_classCallCheck","assertTextPacket","textPacket","queue","autoClearElements","clearStyles","_Object$values","className","add","writeStr","writeStrFromID","elt","push","pushFromObj","bindAutoClear","elementList","_iterator","_createForOfIteratorHelper","_step","s","element","processQueue","_this","clearMessages","_iterator2","_step2","queueFilterMsgGreen","FILTER_MSG","_validateFilterSyntax","str","filterMSG","parser","fromFilterStr","asString","setScrollPercent","percent","maxScroll","documentElement","scrollHeight","window","innerHeight","targetScroll","html","prevScrollBehavior","scrollBehavior","scrollTo","top","getScrollPercent","scrollTop","scrollY","clientHeight","setVisibility","visible","ARRAY_COLUMNS","HERO_STATS_COLUMN_MAP","destroyDataTable","tableid","tableSelector","$","fn","dataTable","isDataTable","DataTable","clear","destroy","getDataWithStringifiedArrayColumns","dataArr","structuredClone","row","convertPercentToColorClass","num","getTbody","tbody","innerHTML","isP1","person","P1_COLUMNS","HERO_NAME","BATTLES","PICK_RATE","WINS","WIN_RATE","POSTBAN_RATE","SUCCESS_RATE","PLUS_MINUS","POINT_GAIN","AVG_CR","FIRST_TURN_RATE","P2_COLUMNS","columns","table","layout","topStart","language","info","order","buttons","extend","filename","columnDefs","targets","createdCell","td","cellData","color","pageLength","deferRender","scroller","scrollCollapse","map","rows","draw","item","createElement","appendChild","labelColorClass","fileName","timestamp","Date","toISOString","split","rowCallback","dataIndex","winCell","cells","firstPickCell","firstTurnCell","replaceDatatableData","datatableReference","general_stats","setText","total_battles","first_pick_count","first_pick_rate","second_pick_count","second_pick_rate","total_winrate","first_pick_winrate","second_pick_winrate","total_wins","max_win_streak","max_loss_streak","avg_ppg","avg_turns","avg_time","max_turns","max_time","first_turn_games","first_turn_rate"],"sourceRoot":""}